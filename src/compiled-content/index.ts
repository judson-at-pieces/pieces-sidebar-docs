
// Auto-generated compiled content index
// This file is generated by the MDX compiler - do not edit manually

import React from 'react';

export interface CompiledContentModule {
  default: React.ComponentType;
  frontmatter: {
    title?: string;
    description?: string;
    author?: string;
    lastModified?: string;
    path?: string;
    visibility?: string;
  };
}

// Content registry that will be populated by the build script
export const contentRegistry: Record<string, CompiledContentModule> = {};

// Function to get compiled content from registry
export function getCompiledContent(path: string): CompiledContentModule | null {
  const normalizedPath = path.startsWith('/') ? path : `/${path}`;
  console.log('üîç Looking for compiled content at path:', normalizedPath);
  console.log('üìö Available paths in registry:', Object.keys(contentRegistry));
  
  const found = contentRegistry[normalizedPath];
  if (found) {
    console.log('‚úÖ Found compiled content for:', normalizedPath);
  } else {
    console.log('‚ùå No compiled content found for:', normalizedPath);
  }
  
  return found || null;
}

// Get all available compiled content paths
export function getAllCompiledPaths(): string[] {
  return Object.keys(contentRegistry);
}

// Register content function (used by build script)
export function registerContent(path: string, module: CompiledContentModule): void {
  console.log('üìù Registering content for path:', path);
  contentRegistry[path] = module;
}

// Legacy export for backward compatibility
export const contentComponents = contentRegistry;

export type ContentComponent = CompiledContentModule;

export function getContentComponent(path: string): ContentComponent | undefined {
  return getCompiledContent(path) || undefined;
}

// Simple fallback content for development
const createFallbackContent = (title: string, path: string): CompiledContentModule => ({
  default: () => {
    return React.createElement('div', { className: 'markdown-content' }, 
      React.createElement('h1', null, title),
      React.createElement('p', null, `The ${title} offers users a straightforward way to manage and utilize saved code snippets through the Pieces Drive.`),
      React.createElement('h2', null, 'Getting Started'),
      React.createElement('p', null, `Learn how to install and configure the ${title} for your development workflow.`)
    );
  },
  frontmatter: {
    title,
    path,
    visibility: 'PUBLIC'
  }
});

// Register some basic fallback content for development
if (Object.keys(contentRegistry).length === 0) {
  console.log('üìù Registering fallback content for development...');
  
  registerContent('/cli', createFallbackContent('Pieces CLI', '/cli'));
  registerContent('/desktop/configuration/aesthetics-layout', createFallbackContent('Aesthetics & Layouts', '/desktop/configuration/aesthetics-layout'));
  registerContent('/quick-guides', createFallbackContent('Quick Guides', '/quick-guides'));
  registerContent('/desktop', createFallbackContent('Desktop', '/desktop'));
  registerContent('/extensions-plugins', createFallbackContent('Extensions & Plugins', '/extensions-plugins'));
  registerContent('/meet-pieces/macos-installation-guide', createFallbackContent('macOS Installation Guide', '/meet-pieces/macos-installation-guide'));
  registerContent('/large-language-models/cloud-models', createFallbackContent('Cloud Models', '/large-language-models/cloud-models'));
  
  console.log('‚úÖ Fallback content registered');
}
