
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Check if we have valid configuration
const hasValidConfig = SUPABASE_URL && 
                       SUPABASE_PUBLISHABLE_KEY && 
                       SUPABASE_URL !== 'undefined' &&
                       SUPABASE_PUBLISHABLE_KEY !== 'undefined' &&
                       SUPABASE_URL.includes('supabase.co') &&
                       SUPABASE_PUBLISHABLE_KEY.length > 50;

// Create a null client for fallback
const nullClient = {
  auth: {
    getSession: () => Promise.resolve({ data: { session: null }, error: null }),
    onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),
    signInWithOAuth: () => Promise.resolve({ data: null, error: new Error('Supabase not configured') }),
    signOut: () => Promise.resolve({ error: null })
  },
  from: () => ({
    select: () => ({ eq: () => Promise.resolve({ data: null, error: new Error('Supabase not configured') }) }),
    insert: () => Promise.resolve({ error: new Error('Supabase not configured') }),
    update: () => ({ eq: () => Promise.resolve({ error: new Error('Supabase not configured') }) }),
    delete: () => ({ eq: () => Promise.resolve({ error: new Error('Supabase not configured') }) })
  }),
  functions: {
    invoke: () => Promise.resolve({ data: null, error: new Error('Supabase not configured') })
  }
} as any;

// Safe client creation with try-catch
let supabaseClient: any;
if (hasValidConfig) {
  try {
    supabaseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
      }
    });
  } catch (error) {
    console.warn('Failed to create Supabase client:', error);
    supabaseClient = nullClient;
  }
} else {
  console.warn('Supabase configuration invalid or missing:', { 
    hasUrl: !!SUPABASE_URL, 
    hasKey: !!SUPABASE_PUBLISHABLE_KEY,
    urlValid: SUPABASE_URL?.includes('supabase.co'),
    keyLength: SUPABASE_PUBLISHABLE_KEY?.length 
  });
  supabaseClient = nullClient;
}

export const supabase = supabaseClient;
export const isSupabaseConfigured = hasValidConfig;
