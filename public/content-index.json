{
  "/docs/cli/commands": {
    "slug": "/docs/cli/commands",
    "metadata": {
      "title": "Commands",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Pieces CLI Commands\n\nBelow is a table containing all the commands available for use in the Pieces CLI.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/commands/pieces_help.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Command Table\n\nYou can easily access these commands through the **help menu** using the command `help` within the Pieces CLI. If you’re not within the Pieces CLI, you can use `pieces help`.\n\nWhen you’re within the terminal and use the `pieces run` command, you don’t have to prefix the commands with “pieces”.\n\n| Command                           | What it does                                                                                      |\n| --------------------------------- | ------------------------------------------------------------------------------------------------- |\n| `run`                             | Start the CLI in loop mode—you only need to type flags or commands.                               |\n| `list`                            | List all materials in your Pieces Drive (alias: `drive`).                                         |\n| `list apps`                       | List all registered applications.                                                                 |\n| `list models`                     | List available AI models and switch which one `ask` uses.                                         |\n| `create`                          | Create a new material from whatever’s on your clipboard.                                          |\n| `modify`                          | Update the content of the current material.                                                       |\n| `edit`                            | Change the name or classification of the current material.                                        |\n| `delete`                          | Delete the current (or most recent) material.                                                     |\n| `execute`                         | Run a Pieces bash material.                                                                       |\n| `clear`                           | Clear the terminal screen.                                                                        |\n| `config`                          | Show your current Pieces CLI configuration.                                                       |\n| `config --editor <editorName>`    | Set your preferred code editor (e.g. `vim`, `code`).                                              |\n| `install`                         | Install the PiecesOS desktop application.                                                         |\n| `open`                            | Open PiecesOS or its helper Applet.                                                               |\n| `ask \"Your question here\"`        | Send a question to the AI.                                                                        |\n| `-m`, `--materials <id1> <id2> …` | Attach saved items by index (e.g. `-m 1 2`).                                                      |\n| `-f`, `--file <path1> <path2> …`  | Attach files or folders (absolute or relative paths).                                             |\n| `chats`                           | List all your past conversations.                                                                 |\n| `chat`                            | Show messages in your current conversation.                                                       |\n| `chat <number>`                   | Switch to and display a specific conversation by its number.                                      |\n| `-n`                              | Start a new conversation.                                                                         |\n| `-d`                              | Delete the conversation you’re currently in.                                                      |\n| `-r <new name>`                   | Rename your current conversation (e.g. `-r \"Project Ideas\"`).                                     |\n| `search <query>`                  | Fuzzy-search your materials and chats.                                                            |\n| `--mode ncs`                      | Use Neural Code Search for your query.                                                            |\n| `--mode fts`                      | Use Full-Text Search for your query.                                                              |\n| `commit`                          | Commit changes to GitHub and auto-generate the message. Add `-p` or `--push` to push immediately. |\n| `login`                           | Log in to your Pieces Cloud account.                                                              |\n| `logout`                          | Log out of your Pieces Cloud account.                                                             |\n| `version`                         | Show versions of PiecesOS and the CLI tool.                                                       |\n| `help`                            | Display the help message.                                                                         |\n| `onboarding`                      | Walk through the initial setup process.                                                           |\n| `feedback`                        | Send feedback directly to the Pieces team.                                                        |\n| `contribute`                      | Contribute code or ideas to the CLI project.                                                      |",
    "lastModified": "2025-06-04T17:24:57.468Z",
    "filePath": "cli/commands.md"
  },
  "/docs/cli/configuration": {
    "slug": "/docs/cli/configuration",
    "metadata": {
      "title": "Configuration",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Settings and Models\n\nLearn how to configure the Pieces CLI—changing both LLMs and the code editor.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/configuration/available_models.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Supported LLMs\n\nWe continually update and configure our plugins and extensions to ensure compatibility with the latest large language models (LLMs).\n\nThe Pieces CLI currently supports 26 cloud-based models.\n\n| Supported LLMs                | Supported LLMs   |\n| ----------------------------- | ---------------- |\n| Gemini-2.5 Flash Preview      | GPT-4o Mini      |\n| o4 Mini                       | Gemini-1.5 Pro   |\n| o3                            | Gemini-1.5 Flash |\n| GPT-4.1                       | GPT-4o           |\n| Gemini-2.0 Flash Lite         | Claude 3 Haiku   |\n| Gemini-2.5 Pro Experimental   | Claude 3 Sonnet  |\n| Gemini-2.5 Pro Preview        | Claude 3 Opus    |\n| Claude 3.7 Sonnet             | GPT-4 Turbo      |\n| o3 Mini                       | (Gemini)         |\n| o1                            | GPT-3.5-turbo    |\n| Gemini-2.0 Flash Experimental | GPT-4            |\n| Claude 3.5 Sonnet             | Codey (PaLM2)    |\n| Claude 3.5 Haiku              | (PaLM2)          |\n\n[Read documentation on how to switch your Pieces Copilot Runtime (LLM)](https://docs.pieces.app/products/cli/copilot/llms-settings) utilized by the Pieces CLI.\n\n## Settings Overview\n\nBelow is a breakdown of each adjustable setting (preferences, behaviors, views, etc.) you can find in the Pieces CLI, broken down by section\n\n**List Applications**\n\nTo see every application you’ve registered, run `list apps`. This prints a table of app names and IDs so you can verify which integrations are available.\n\n**List Models**\n\nUse `list models` to display all AI models you’ve configured for the `ask` command. The output shows each model’s name and index, and which is currently active.\n\n**View Configuration**\n\nRun `config` to print your current IDE selection for code editing.\n\n**Edit Configuration**\n\nExecute `config --editor <editorName>` to open your config file in the editor of your choice. Simply adjust values (for example, change `timeout: 10` to `timeout: 20`) and save—your changes take effect immediately.\n\n**Login**\n\nAuthenticate with your Pieces Cloud account by running `login`. You’ll be prompted for credentials in a web browser; once you’re logged in, you can sync materials and access private resources in your [Pieces Drive](https://docs.pieces.app/products/cli/drive).\n\n**Logout**\n\nUse `logout` to clear your saved credentials and end your session. This is useful when switching accounts or working on a shared machine.\n\n**Contribute**\n\nKick off a contribution workflow with `contribute`. You’ll be guided through describing your changes, and a pull-request template will open in your browser so you can submit improvements to the CLI.\n\n**Install PiecesOS**\n\nRun `install` to download and set up the [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os), which provides background services, like Pieces Drive, and a graphical dashboard for non-CLI related tasks.\n\n**Open PiecesOS**\n\nUse `open` to launch the desktop app or helper Applet. If it isn’t already running, this command starts the service and brings up the GUI.\n\n***\n\nFor additional support resources, check out our [troubleshooting guide.](https://docs.pieces.app/products/cli/troubleshooting)",
    "lastModified": "2025-06-04T17:24:57.472Z",
    "filePath": "cli/configuration.md"
  },
  "/docs/cli/copilot/chat": {
    "slug": "/docs/cli/copilot/chat",
    "metadata": {
      "title": "Generative AI Conversations",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Accessing Copilot Chat in your Terminal\n\nThere are two ways to manage your Copilot chats in the Pieces CLI.\n\n### Starting a New Copilot Chat\n\nTo quickly start a conversation with Pieces Copilot:\n\n<Steps>\n  <Step title=\"Open a Terminal\">\n    Opening a terminal on your device depends on your platform: Open your OS’ search bar and enter `terminal` (macOS/Linux) or `CMD` (Windows).\n  </Step>\n\n  <Step title=\"Enter Ask Command\">\n    You can launch Pieces CLI by typing `pieces run`., Then, you can type `ask query`, where `query` is your question.\n\n    If you’re not in Pieces CLI, in your terminal, you can type `pieces ask query`, replacing `query` with your question.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_copilot/chat/ask_pieces.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### Opening Previous Chats\n\nTo resume or explore an earlier conversation:\n\n* `chats`: Show all your conversations. The one highlighted in green is where new questions go by default.\n\n* `chat`: Display the messages in your current conversation.\n\n* `chat <number>`: Switch to conversation `<number>` and show its messages.\n\nUse these flags with your `chat` command to manage conversations as you go:\n\n* `chat --new`, `chat -n`: Create a new conversation and switch to it.\n\n* `chat --delete`, `chat -d`: Delete the conversation you’re currently viewing.\n\n* `chat --rename [name]`, `chat -r [name]`: Rename the conversation you’re viewing. If you don’t provide `[name]`, the assistant will suggest one.\n\n[Read more about what commands are available in the Pieces CLI](https://docs.pieces.app/products/cli/commands).\n\n## Contextualized Chats\n\nYou can narrow Copilot’s focus by feeding it specific materials or files when you ask a question.\n\n### via Material Index\n\n<Steps>\n  <Step title=\"Open a Terminal\">\n    Opening a terminal on your device depends on your platform: Open your OS’ search bar and enter `terminal`(macOS/Linux) or `CMD`(Windows).\n  </Step>\n\n  <Step title=\"List your materials\">\n    Run `pieces list` to view all saved materials and note the **index** of the one you need.\n  </Step>\n\n  <Step title=\"Ask with a Material\">\n    Use the `-m` flag and that index when you ask: `pieces ask \"Explain the data model here\" -m 4`\n\n    Pieces Copilot will load material #4 as context.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_copilot/chat/pieces_context_chat.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### via File Path\n\nUse a folder of specific file as context for Pieces Copilot by initiating the conversation at a specified path.\n\n<Steps>\n  <Step title=\"Select Your File or Folder\">\n    Decide which file (or directory) you want Copilot to reference.\n  </Step>\n\n  <Step title=\"Open a Terminal\">\n    Opening a terminal on your device depends on your platform: Open your OS’ search bar and enter `terminal`(macOS/Linux) or `CMD`(Windows).\n  </Step>\n\n  <Step title=\"Ask with a File\">\n    Use the `-f` flag and the path, `pieces ask \"How does this component render?\" -f src/components/Button.jsx`.\n\n    Pieces Copilot will read that file before answering.\n  </Step>\n\n  <Step title=\"Provide Multiple Contexts\">\n    Mix flags to supply more than one source `pieces ask \"Compare this code to the design spec\" -m 2 -f design/specs.md`.\n\n    Copilot loads material #2 and `specs.md` before generating its response.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_copilot/chat/adding_file.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## Pieces MCP\n\nThe Pieces MCP offers several useful commands within the Pieces CLI, from setting up the MCP to learning more about it. Discover the different commands:\n\n### Setup\n\nAutomatically sets up MCP for VS Code, Goose, or Cursor.\n\n<Steps>\n  <Step title=\"Enter MCP Command\">\n    Within the Pieces CLI, enter `mcp setup` this will open up a new MCP setup menu.\n  </Step>\n\n  <Step title=\"Select MCP Platform\">\n    In the new window, select one of the three options that appear:\n\n    * VS Code\n\n    * Goose\n\n    * Cursor\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_copilot/chat/selecting_mcp_option.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n    After selecting the environment you plan to set up Pieces MCP with, you’ll be prompted with the next set of questions.\n  </Step>\n\n  <Step title=\"Select Workspace\">\n    The new menu will have you select a workspace:\n\n    * `User Settings` — Make the MCP available in any project you work on within VS Code.\n\n    * `Workspace Settings` — Save the MCP locally to the current project you’re working on.\n\n    When you select the workspace you want to set up, Pieces CLI will automatically add the configuration for you and guide you through using Pieces MCP within the platform you chose.\n  </Step>\n</Steps>\n\n### List\n\nThe `mcp list` command displays the current implementations of Pieces MCP on your development platforms.\n\nCurrently, the Pieces CLI supports integration with [GitHub Copilot](https://docs.pieces.app/products/mcp/github-copilot), [Goose](https://docs.pieces.app/products/mcp/goose), and [Cursor](https://docs.pieces.app/products/mcp/cursor).\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_copilot/chat/mcp_list.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Docs\n\nThe `mcp docs` command displays all of the [mcp documentation](https://docs.pieces.app/products/mcp/get-started) correlated with the supported development environments with the Pieces CLI and Pieces MCP.\n\n### Repair\n\nThe `mcp repair` command checks how the Pieces MCP is set up in the platforms supported by Pieces CLI.\n\nIf it finds any issues, it will automatically fix them and ask you to type `y` for yes or `n` for no. Then, press `return` (macOS) or `enter` (Windows/Linux) to confirm your choice.\n\n### Status\n\nRunning `mcp status` within the Pieces CLI will automatically check all implemented platforms to make sure the Pieces MCP implementation is running correctly.\n\nIf it finds that an implementation is broken, it will ask if you want to auto-repair the MCP server.\n\nType `y` for yes or `n` for no, and press `return` (macOS) or `enter` (Windows/Linux) to confirm your choice.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_copilot/chat/finish_setup_mcp.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Improving Code Consistency & Standardization\n\nThe Pieces Copilot enhances code quality by identifying inconsistencies and providing practical suggestions for standardization.\n\n### Naming Inconsistencies\n\nSuppose functions across your workspace use inconsistent naming patterns (e.g., `authenticateUser` in `authHandler.go` vs. `retrieveUserProfile` in `userHandler.go`).\n\nIn that case, Pieces Copilot can suggest adopting a standardized naming convention for better readability and maintainability, like this:\n\n```c\nfunc authenticateUser(ctx context.Context, credentials Credentials) (User, error) {\n    if credentials.Username == \"\" || credentials.Password == \"\" {\n        return User{}, errors.New(\"missing credentials\")\n    }\n}\n```\n\n### Inconsistent Error Handling\n\nIf error-handling strategies differ across files (e.g., structured errors in `authService.go` vs. inconsistent handling in `userService.go`), Pieces Copilot can help unify the approach:\n\n```c\nfunc LoginUser(credentials Credentials) (string, error) {\n    token, err := authenticate(credentials)\n    if err != nil {\n        return \"\", fmt.Errorf(\"login failed: %w\", err)\n    }\n    return token, nil\n}\n```",
    "lastModified": "2025-06-04T17:24:57.482Z",
    "filePath": "cli/copilot/chat.md"
  },
  "/docs/cli/copilot/llms-settings": {
    "slug": "/docs/cli/copilot/llms-settings",
    "metadata": {
      "title": "LLM Settings",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Switching LLMs\n\nThe Pieces CLI currently supports 19 different cloud-hosted LLM models.\n\n## How To Configure Your LLM Runtime\n\nSwitching your LLM model in the Pieces CLI is easy. You can select the model that best fits your needs.\n\nFollow the steps below to change the cloud LLM utilized by the Pieces MCP:\n\n<Steps>\n  <Step title=\"Open a Terminal\">\n    Opening a terminal on your device depends on your platform: Open your OS’ search bar and enter `terminal`(macOS/Linux) or `CMD`(Windows).\n  </Step>\n\n  <Step title=\"Start Pieces CLI\">\n    In your terminal, enter `pieces run` to launch into Pieces.\n  </Step>\n\n  <Step title=\"Open Models and Change\">\n    While in the Pieces CLI, type `list models`. This will display a list of available models within the Pieces CLI.\n\n    Use your `scroll wheel` or `arrow keys` to navigate to your desired LLM and press `return` (macOS) or `enter` (Windows/Linux) to set the LLM runtime.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_copilot/llms_settings/available_models.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nOnce you’ve chosen a new model, the switch is instant. You can continue your work seamlessly with the selected model's capabilities—*no need to restart or refresh anything.*\n\n### Available LLMs\n\nPieces CLI supports 26 cloud-hosted LLM models, allowing you to choose from a variety of options to meet your needs.\n\n| Supported LLMs                | Supported LLMs   |\n| ----------------------------- | ---------------- |\n| Gemini-2.5 Flash Preview      | GPT-4o Mini      |\n| o4 Mini                       | Gemini-1.5 Pro   |\n| o3                            | Gemini-1.5 Flash |\n| GPT-4.1                       | GPT-4o           |\n| Gemini-2.0 Flash Lite         | Claude 3 Haiku   |\n| Gemini-2.5 Pro Experimental   | Claude 3 Sonnet  |\n| Gemini-2.5 Pro Preview        | Claude 3 Opus    |\n| Claude 3.7 Sonnet             | GPT-4 Turbo      |\n| o3 Mini                       | (Gemini)         |\n| o1                            | GPT-3.5-turbo    |\n| Gemini-2.0 Flash Experimental | GPT-4            |\n| Claude 3.5 Sonnet             | Codey (PaLM2)    |\n| Claude 3.5 Haiku              | (PaLM2)          |",
    "lastModified": "2025-06-04T17:24:57.486Z",
    "filePath": "cli/copilot/llms-settings.md"
  },
  "/docs/cli/copilot": {
    "slug": "/docs/cli/copilot",
    "metadata": {
      "title": "Pieces Copilot",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Generative AI Conversations\n\nIf you're facing an issue or stuck on a difficult debug, ask the Pieces Copilot specific questions directly in your terminal using `pieces ask`.\n\nYou can ask questions that don't need context, like *“What is the basic format for a JSON object?”* or more detailed questions where the Pieces Copilot requires context from your saved materials.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_copilot/_MAIN/pieces_ask_question.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Adding Conversation Context\n\nContextual awareness lets the Pieces Copilot help you solve problems faster by providing relevant answers to your issue and notes.\n\nTo best add conversation context, [include materials](https://docs.pieces.app/products/cli/copilot/chat#via-material-index) or [file context](https://docs.pieces.app/products/cli/copilot/chat#via-file-path) for more accurate responses from the Pieces Copilot chat.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_copilot/_MAIN/adding_file.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Pieces Copilot As a Daily Driver\n\nThe Pieces Copilot is a powerful, adaptable tool that improves the more you use it, *so use it!*\n\n***\n\n<AccordionGroup>\n  <Accordion title=\"Collaborative Coding Made Easy\">\n    Generate detailed comments and documentation to improve team collaboration and reduce onboarding time. This helps create a consistent coding and writing style across teams.\n  </Accordion>\n\n  <Accordion title=\"Quick Prototyping\">\n    Generate initial implementations and boilerplate code for prototypes and fast-paced projects. This is ideal for hackathons, proof-of-concepts (PoCs), and other time-sensitive tasks.\n  </Accordion>\n\n  <Accordion title=\"Skill Enhancement\">\n    Pieces Copilot doubles as a learning tool, helping you explore best practices, new paradigms, and advanced techniques in real-time.\n  </Accordion>\n</AccordionGroup>",
    "lastModified": "2025-06-04T17:24:57.475Z",
    "filePath": "cli/copilot.md"
  },
  "/docs/cli/drive/edit-and-update": {
    "slug": "/docs/cli/drive/edit-and-update",
    "metadata": {
      "title": "Edit & Update",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Editing\n\nKeeping an up-to-date library of code snippets in the Pieces CLI is easy with seamless editing.\n\n## How to Edit Snippets\n\nFollow the steps below to edit a saved material in the Pieces CLI.\n\n<Steps>\n  <Step title=\"Open a Terminal\">\n    Opening a terminal on your device depends on your platform: Open your OS’ search bar and enter `terminal`(macOS/Linux) or `CMD`(Windows).\n  </Step>\n\n  <Step title=\"Open the Pieces Drive\">\n    Launch the Pieces CLI by typing `pieces run` in your terminal.\n\n    Access your saved snippets with the `list` command.\n\n    Use your mouse wheel or arrow keys to scroll and select a snippet by pressing `return` (macOS) or `enter` (Windows/Linux).\n  </Step>\n\n  <Step title=\"Enter Modify Command\">\n    After selecting your desired snippet, enter the `modify` command. This will open your selected snippet in your desired IDE.\n\n    Any changes made and saved within your IDE will update the Pieces Drive automatically, allowing you to use the changed snippet immediately.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_drive/edit_update/editing_saving.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## How to Rename Snippets\n\nWith the Pieces CLI, you can rename saved materials and have those changes apply universally throughout your Pieces Drive—follow the steps below to learn how.\n\n<Steps>\n  <Step title=\"Locate a Snippet\">\n    In your terminal, type `pieces run` to enter the Pieces CLI. This will switch you to Pieces CLI run mode, where you can type `list`.\n\n    Use your mouse wheel or arrow keys to scroll and select a snippet by pressing `return` (macOS) or `enter` (Windows/Linux).\n  </Step>\n\n  <Step title=\"Enter the Edit Command\">\n    After selecting a snippet, you can type `edit`.\n\n    This will open a new prompt for you to change the name and classification for the snippet.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_drive/edit_update/edit_command.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n    When you’re complete, the snippet will update across your Pieces Drive automatically.\n  </Step>\n</Steps>",
    "lastModified": "2025-06-04T17:24:57.497Z",
    "filePath": "cli/drive/edit-and-update.md"
  },
  "/docs/cli/drive/saving-materials": {
    "slug": "/docs/cli/drive/saving-materials",
    "metadata": {
      "title": "Saving Materials",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Saving Code Snippets to Pieces Drive\n\nStoring developer materials, such as snippets of boilerplate code, is an excellent way to build a helpful code collection in your Pieces Drive.\n\nThis helps you save time when writing generic code in various forms. The Pieces CLI offers a *create* feature designed to assist you with this.\n\nYou can use this feature to save all kinds of functional code materials, like:\n\n* API endpoint definitions\n\n* Utility functions or commonly used helper methods\n\n* Code templates for starting new modules\n\n* Reusable logic for error handling or authentication\n\n## How to Save Materials\n\nFor Pieces CLI, you can save a snippet to your Pieces Drive with one command.\n\n<Steps>\n  <Step title=\"Open a Terminal\">\n    Opening a terminal on your device depends on your platform: Open your OS’ search bar and enter `terminal`(macOS/Linux) or `CMD`(Windows).\n  </Step>\n\n  <Step title=\"Find a Snippet\">\n    Select a section of code or text you want to save and copy it to your clipboard.\n\n    The pieces will use what you have copied to the clipboard as the snippet.\n  </Step>\n\n  <Step title=\"Enter Pieces Create\">\n    In your terminal, you can now enter `pieces create`, which will automatically save your clipboard as a new snippet.\n\n    If you’re within the Pieces CLI `pieces run` mode, you can enter `create`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_drive/saving_snippet/pieces_create.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## What’s Stored When You Save a Snippet\n\nWhen you save a snippet to your Pieces Drive, more than just the code is stored.\n\nThe Pieces Copilot captures several different kinds of metadata:\n\n* `Type`: Categorizes the snippet (e.g., API call, function, class) and its programming language.\n\n* `Associated Tags`: Keywords linked to the snippet for easier searching.\n\n* `Custom Description`: Specifies exactly which *lines* (by number) the snippet is from and the file it came from—handy for mind-mapping.\n\n* `Smart Description`: AI-generated summaries that explain the snippet’s purpose and function.\n\n* `Suggested Searches`: Related searches that help you find similar snippets.\n\n* `Related Links`: References to documentation, code repositories, or other relevant resources.\n\n* `Related People`: Associated collaborators or contributors.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_drive/saving_snippet/saved_snippet_displayed.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nFurthermore, the Pieces Copilot reviews stored snippets for sensitive data, including API keys, passwords, and authentication tokens, ensuring that **no confidential information** is unintentionally saved.\n\n## Where Saved Snippets Live\n\nSaved snippets are stored locally on your device, ensuring offline accessibility. This also means that any Pieces for Developers extension, plugin, or even the Pieces Desktop App, has constant, up-to-date access to your saved materials with Pieces Drive.\n\nYou can find your saved snippets via the `pieces list` command or the `pieces search` feature.\n\n[Read more about how to find your saved snippets here.](https://docs.pieces.app/products/cli/drive/search-reuse#viewing-and-reusing-saved-snippets)",
    "lastModified": "2025-06-04T17:24:57.502Z",
    "filePath": "cli/drive/saving-materials.md"
  },
  "/docs/cli/drive/search-and-reuse": {
    "slug": "/docs/cli/drive/search-and-reuse",
    "metadata": {
      "title": "Search & Reuse",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Locate Materials in Pieces Drive\n\nTo find your snippets in Pieces CLI, you can use one of two methods: searching or manually checking the Pieces Drive list.\n\n## How to Search for Saved Materials\n\nFrom the terminal, you can search for code snippets and other materials stored in your Pieces Drive. Additionally, you can use search filters to refine your results.\n\n### via Search Command\n\nIf you want to access your saved snippets directly within Pieces CLI, you can:\n\n<Steps>\n  <Step title=\"Open a Terminal\">\n    Accessing a terminal on your device varies by platform: Use your OS's search bar to type in `terminal` (for macOS/Linux) or `CMD` (for Windows).\n  </Step>\n\n  <Step title=\"Enter Search Command\">\n    Within your terminal, you can now enter `pieces search “query”`. This will start a new search using your query to search through your Pieces Drive.\n\n    Alternatively, you can launch into Pieces CLI run mode with `pieces run`. This will enable you to just enter `search “query”`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_drive/search_reuse/ncs_search_results.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nYou can optionally add `--mode` followed by the search method you prefer:\n\n* `ncs`: Performs a neural code search for your query.\n\n* `fts`: Performs a full-text search for your query.\n\nFor example, `pieces search \"query\" --mode fts` will use the full-text search on your database with your query.\n\n## Viewing and Reusing Saved Snippets\n\n[Saved snippets](https://docs.pieces.app/products/cli/drive/saving-materials) can be viewed by opening them up directly from the Pieces Drive with `pieces list`, using your scroll wheel or arrow keys, and selecting the snippet with the `return` (macOS) or `enter` (Windows/Linux) key, all from within your terminal.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_drive/search_reuse/pieces_drive_list.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nIn your terminal, you can also open snippets with the `pieces search “query” [optional: --mode ncs,fts]` command. If Pieces finds snippets that match your query, you will be presented with a list of snippets.\n\nYou can open a snippet from the list using your scroll wheel or arrow keys and select it with the `return` (macOS) or `enter` (Windows/Linux) key.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_drive/search_reuse/search_snippets.gif\" alt=\"\" align=\"middle\" fullwidth=\"true\" />\n\n***\n\n## Real-Time Snippet Streaming\n\nEvery product in the Pieces Suite uses [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os) to collect information about the context of your snippets.\n\nWhen you change a snippet in the [Pieces for Developers Desktop App](https://docs.pieces.app/products/desktop)—such as its name, description, tags, or any other metadata—those updates automatically appear in your Pieces Drive without needing to refresh.\n\n<Callout type=\"tip\">\n  If your snippets aren’t updating immediately, refer to the troubleshooting guide for guidance on refreshing your snippet list.\n</Callout>",
    "lastModified": "2025-06-04T17:24:57.506Z",
    "filePath": "cli/drive/search-and-reuse.md"
  },
  "/docs/cli/drive/sharing": {
    "slug": "/docs/cli/drive/sharing",
    "metadata": {
      "title": "Sharing Snippets",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## How to Share a Saved Snippet\n\nSharing a saved snippet is easy with the Pieces CLI. It enables you to collaborate with other developers, coworkers, and members even if they are outside of your organization or don’t have a Pieces account.\n\n### via Command\n\nRead below for detailed steps on using the `share` command within the Pieces CLI.\n\n<Steps>\n  <Step title=\"Open a Terminal\">\n    To access a terminal on your device, the method depends on your platform: use the search bar of your OS to type in `terminal` for macOS/Linux or `CMD` for Windows.\n  </Step>\n\n  <Step title=\"Enter Share Command\">\n    To share a snippet, enter the `pieces share` command.\n\n    If you’re within the Pieces CLI run mode, you can enter `share`.\n  </Step>\n\n  <Step title=\"Select a Snippet\">\n    In the new view, use your arrow keys to navigate your saved snippets. When you’ve located the snippet you’d like to share, press `return` (macOS) or `enter` (Windows/Linux).\n\n    This will begin the process of sharing the snippet using the Pieces CLI.\n  </Step>\n\n  <Step title=\"Open in Browser or Copy Link\">\n    After the snippet has been shared, its URL will appear within the terminal, and the CLI will prompt you to open the snippet in a browser.\n\n    Open it in a browser with `y` or deny it with `n`. After entering your option, press `return` (macOS) or `enter` (Windows/Linux).\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_drive/sharing/sharing_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## Enriched Sharing Experience\n\nWhen you `share` a snippet, it’s not just the code that’s included. The snippet comes with additional metadata to provide context—<a target=\"_blank\" href=\"https://docs.pieces.app/products/cli/drive/sharing#what-information-gets-shared\">you can read more about that here.</a>\n\n* `Snippet Type`: Identify the language or framework, such as Python or React.\n\n* `Tags`: Useful keywords for quick categorization.\n\n* `Description`: A summary of what the snippet does.\n\n* `Related Links`: Helpful resources or documentation tied to the snippet.\n\n* `Author Information`: A record of who created the snippet.\n\n## What Information Gets Shared\n\nWhen you save a snippet to the Pieces Cloud, the code is [enriched with valuable information](https://docs.pieces.app/products/cli/drive/save-snippets#what-happens-when-you-save-a-snippet), such as related people, links, annotations, tags, and an automatically generated description.\n\nThis information appears to the right of the code block when the shared snippet is open in your browser:\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731623145740/ec60e89f-ac2f-4396-b6a8-ad94f57d9745.png?auto=compress,format&format=webp&q=75\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Sensitive Information Watchdog\n\nThe share command does more than enable you to share snippets with your entire team and other communities effectively.\n\nYou'll see a section titled **Sensitive Information:**\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731514684555/707b0769-5b68-448c-811b-a44d2414a10d.png?auto=compress,format&format=webp&q=75\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nOur in-house ML model scans snippets for potentially sensitive information, such as API keys or passwords, and alerts you so you can make an informed decision before sharing the snippet.",
    "lastModified": "2025-06-04T17:24:57.510Z",
    "filePath": "cli/drive/sharing.md"
  },
  "/docs/cli/drive": {
    "slug": "/docs/cli/drive",
    "metadata": {
      "title": "Pieces Drive",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n### Using Pieces Drive in the Pieces CLI\n\nThe Pieces CLI boosts development productivity and saves time with features like [saving](https://docs.pieces.app/products/cli/drive/save-snippets) and [reusing](https://docs.pieces.app/products/cli/drive/search-reuse) materials, ensuring your important code is always accessible.\n\n## Use Cases & Examples\n\nLet’s take a look at some examples:\n\n| `Logging Utilities`    | A helper function for detailed server-side logging with timestamps and error levels.                        | Speeds up debugging and monitoring by inserting reliable logging methods.   |\n| ---------------------- | ----------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------- |\n| `Validation Functions` | A function to validate JSON payloads or form inputs before submission.                                      | Ensures data integrity with reusable, thoroughly tested validation logic.   |\n| `API Integration Code` | Prewritten `axios` code for making GET or POST requests, complete with error handling and response parsing. | Reduces repetitive work when integrating RESTful APIs or GraphQL endpoints. |\n| `Component Templates`  | A React functional component template with basic hooks and styling setup.                                   | Provides a consistent starting point for building new components.           |\n| `Database Queries`     | A MongoDB query to retrieve active user data filtered by last login.                                        | Streamlines database tasks by reusing optimized query patterns.             |\n\n## Boosting Productivity with Snippet Management\n\nUsing prewritten code with the Pieces CLI boosts productivity, standardizes code, and maintains clarity across teams and projects.\n\nThe Pieces CLI connects directly to your development environment, letting you focus on what truly matters—building great software—while offering tools for efficient code reuse.\n\n* **Improved Productivity:** Focus on solving new problems rather than fixing old ones.\n\n* **Contextual Awareness:** Snippets enriched with metadata, descriptions, and links to relevant searches help you recall each piece of code's origin, purpose, and best usage scenarios.\n\n* **Code Standardization:** Share best practices and reusable components to help developers keep coding practices and conventions consistent across teams and projects.\n\nBy using the Pieces CLI, capture and manage snippets in Pieces Drive to streamline daily tasks and improve your workflow in several ways:\n\n### Save & Organize\n\nEasily [save a function, script, or piece of boilerplate](https://docs.pieces.app/products/cli/drive/save-snippets) directly from the tool menu or with a keyboard shortcut. These snippets are stored in your personal Pieces Drive and include context, metadata, and tags for easy retrieval.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_drive/_MAIN/saved_snippet_displayed.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nTo save a code snippet, copy a snippet from a website or your IDE, go over to the Pieces CLI, and type `create`. If you’re not in a running Pieces CLI, you can type `pieces create` and enter the command.\n\nThis will automatically grab whatever is in your clipboard and save it to your Pieces Drive.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_drive/_MAIN/pieces_create.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Search & Reuse\n\nYou can search your collection of saved materials directly from your terminal. This lets you quickly find snippets using keywords or context.\n\nTo search, you can access the `search` action inside of the Pieces CLI.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_drive/_MAIN/pieces_search_interm.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nFrom within Pieces CLI you can enter `search “query”` to do a basic search. If you’re not within the Pieces CLI, you can enter `pieces search “query”`.\n\nYou can optionally append `--mode` followed by the search method you’d like:\n\n* `ncs`: Does a neural code search for your query.\n\n* `fts`: Does a full-text search for your query\n\nI.e., `pieces search “query” --mode fts` will use the full-text search on your database using your query.\n\n### Edit & Update\n\nYour snippets can change as your project grows, as you adapt to new project needs, or when you switch to new files in your codebase.\n\nIn the `pieces save` command of the **Pieces Drive** within Pieces Copilot, open your saved snippets, update the code to meet current needs, and save the revised version back to Pieces.\n\nThis keeps your library up-to-date, relevant, and aligned with your project's progress. Enhancing your materials makes them more efficient, which benefits you in the long run.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_drive/_MAIN/edit_command.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Reusable Scheduling Functions\n\nImagine you’re frequently working on projects that involve scheduling tasks at regular intervals.\n\nInstead of rewriting the same logic for each new project, [save an evergreen snippet to your Pieces Drive.](https://docs.pieces.app/products/cli/drive/save-snippets#save-snippets)\n\nThis allows you to reuse a well-crafted scheduling function across multiple applications, that is useful in a variety of scenarios:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\n// A reusable function to schedule tasks at a specified interval\nfunc scheduleTask(interval time.Duration, task func()) {\n\tticker := time.NewTicker(interval)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\ttask()\n\t\t}\n\t}\n}\n```\n\n### File System Monitoring\n\nSuppose you frequently work on projects that involve monitoring file system changes. In that case, you can [save a helpful snippet to your Pieces Drive](https://docs.pieces.app/products/cli/drive/save-snippets#saving-snippets) that does precisely that, using generic and reusable naming conventions:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/fsnotify/fsnotify\"\n)\n\n// A reusable function to monitor file system changes\nfunc watchFileChanges(path string) {\n\twatcher, err := fsnotify.NewWatcher()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer watcher.Close()\n\n\terr = watcher.Add(path)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfor {\n\t\tselect {\n\t\tcase event := <-watcher.Events:\n\t\t\tif event.Op&fsnotify.Write == fsnotify.Write {\n\t\t\t\tfmt.Println(\"Modified file:\", event.Name)\n\t\t\t}\n\t\tcase err := <-watcher.Errors:\n\t\t\tfmt.Println(\"Error:\", err)\n\t\t}\n\t}\n}\n```\n\n## **Additional Snippet Scenarios**\n\nCheck out more scenarios and use cases for Pieces Drive to see how the Pieces CLI can enhance your workflow.\n\n***\n\n<AccordionGroup>\n  <Accordion title=\"Testing Framework Templates\">\n    Streamline your testing process by saving snippets of your frequently used testing functions or unit test templates.\n  </Accordion>\n\n  <Accordion title=\"Command-Line Utilities\">\n    Save command-line instructions as snippets to easily access deployment commands, Docker setups, and other critical terminal operations.\n  </Accordion>\n\n  <Accordion title=\"Error Handling & Logging\">\n    You can also save standard logging functions or error-handling snippets that can be reused in different applications, promoting consistent error management.\n  </Accordion>\n\n  <Accordion title=\"Quickly Create New Projects\">\n    Import saved setup scripts, configuration files, and commonly used dependencies to set up new projects and maintain consistency quickly.\n  </Accordion>\n</AccordionGroup>",
    "lastModified": "2025-06-04T17:24:57.489Z",
    "filePath": "cli/drive.md"
  },
  "/docs/cli/get-started": {
    "slug": "/docs/cli/get-started",
    "metadata": {
      "title": "Get Started",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Pieces CLI Prerequisites\n\nBefore installation, you’ll need:\n\n* **PiecesOS:** The power engine behind the Pieces CLI and the rest of the Pieces Suite. [Learn more about PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os).\n\n* **Python 3.xx:** <a target=\"_blank\" href=\"https://www.python.org/downloads/\">Python</a> is required to be installed on your development machine.\n\n<Callout type=\"alert\">\n  PiecesOS must be installed to use the Pieces CLI and ensure it works properly.\n\n  We also suggest using the Pieces for Developers Desktop App for better functionality.\n</Callout>\n\n## Installing the Pieces CLI\n\nFollow the instructions below to install the Pieces CLI and any required dependencies.\n\n<Steps>\n  <Step title=\"Install Python\">\n    Head to [Python’s website](https://www.python.org/downloads/) and download the version that best suits your environment.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/get_started/python_download.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n    After downloading the Python version 3.xx, you will be guided through the installation process. Follow their steps until Python is installed.\n\n    <Callout type=\"tip\">\n      Make sure to allow Python to be added to your environment variables, so it’s executable via terminal.\n    </Callout>\n  </Step>\n\n  <Step title=\"Install Pieces CLI\">\n    Once Python is installed, its dependency `pip` is automatically installed. We will use this to install Pieces CLI.\n\n    Open a terminal on your device and type `pip install pieces-cli`, or if you prefer to use Conda, type `conda install pieces-cli`. As long as Python is set up correctly, Pieces CLI will install.\n\n    If you’re on macOS, you can optionally install Pieces CLI via **Homebrew**:\n\n    * `homebrew install pieces-cli`\n  </Step>\n\n  <Step title=\"Verify Installation\">\n    To verify a successful installation of the Pieces CLI, you can type `pieces version` within your terminal. This will display your Pieces OS and Pieces CLI versions.\n\n    <Callout type=\"alert\">\n      If you receive **'pieces' is not recognized as an internal or external command,** you can run pieces with `py -m pieces $command`.\n    </Callout>\n  </Step>\n\n  <Step title=\"Run Pieces CLI\">\n    To run Pieces CLI, you can enter the command `pieces run`. This will launch you into the Pieces CLI and make it so you don’t have to prefix with `pieces`.\n  </Step>\n</Steps>\n\n### Setting Up PiecesOS\n\nTo use the Pieces CLI, you must install [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os) on your working environment.\n\nClick the download buttons or follow the set-up instructions below for your operating system:\n\n<get-started-install />\n\n<Callout type=\"alert\">\n  For enhanced security and better system integration, we recommend installing the `.appinstaller` package over the `.exe` installer. The `.appinstaller` package operates in a containerized environment, providing additional security benefits.\n</Callout>\n\n## Updating\n\nFollow the steps below to update the Pieces CLI.\n\n<Steps>\n  <Step title=\"Open a Terminal\">\n    Opening a terminal on your device depends on your platform: Open your OS’ search bar and enter `terminal` (macOS/Linux) or `CMD` (Windows).\n  </Step>\n\n  <Step title=\"Update Pieces CLI\">\n    In the open terminal, type `pip install pieces-cli -U`. This will update Pieces CLI with no other interaction needed. If you’re using Conda, type `conda update pieces-cli` to update Pieces CLI.\n\n    <Callout type=\"alert\">\n      On Linux or macOS, running the command with sudo permissions may be required. To do this, run `sudo pip install pieces-cli -U`.\n    </Callout>\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/get_started/update_pieces_cli.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## Onboarding\n\nThe Pieces CLI offers a walkthrough to guide you through the steps of saving your first material and introduces you to the Long-Term Memory Engine (LTM-2), enabling you to make the most of the Pieces CLI.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/get_started/onboarding_first_step.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Save Your First Material\n\nThe onboarding will start by providing you with a snippet to copy to your clipboard. Highlight the code and press `⌘+c` (macOS) or `ctrl+c` (Windows/Linux).\n\nAfter copying the snippet, you can select any key on your keyboard to proceed.\n\n<Callout type=\"info\">\n  If you haven’t copied the snippet, Pieces won’t allow you to paste.\n</Callout>\n\nAfter pressing any key, Pieces will prompt you to type `pieces create` into your terminal. With the snippet still copied, enter `pieces create`, and Pieces will ask if you want to save the snippet.\n\nType `y` and press `return`(macOS) or `enter`(Windows/Linux) to confirm to save the snippet to your [Pieces Drive](https://docs.pieces.app/products/cli/drive).\n\n### Finding your Saved Materials\n\nIn this step, you'll learn how to open your saved materials. Start by typing `pieces list` in your terminal and pressing `enter`.\n\nThis will display a list of all your saved materials. You can navigate through them using the arrow keys on your keyboard.\n\nSelect the material you're highlighting by pressing `return`(macOS) or `enter`(Windows/Linux).\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/get_started/selecting_pieces_list_onboarding.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Start a Session\n\nAfter selecting a snippet, Pieces CLI will boot you out to the terminal to prompt you to start a new session.\n\nTyping `pieces run` will open a new session, allowing you to enter Pieces commands without prefixing with `pieces`.\n\nAfter the session, you can type exit and press `return`(macOS) or `enter`(Windows/Linux) to return to the onboarding.\n\n### Chat with the Copilot\n\nThis section will walk you through how to ask [Pieces Copilot](https://docs.pieces.app/products/cli/copilot) its first question. You can begin in your terminal by typing `pieces ask 'How to print I love Pieces CLI in Python and Java'` and pressing `return`(macOS) or `enter`(Windows/Linux).\n\nAfter typing your question and running the command, Pieces Copilot will quickly generate and display the best response for your query.\n\nIt will then prompt you to do it with the Pieces CLI running by typing `pieces run` entering the command and then entering `ask $question`, `$question` being the question you’d like to ask Pieces Copilot.\n\n<Callout type=\"info\">\n  Your question must be encased in quotations or Pieces won’t capture your full question.\n</Callout>\n\n### More Resources\n\nYour feedback is **vital** to us. This onboarding step will prompt you to enter `pieces feedback` where you can optionally open the GitHub discussion board related to Pieces CLI to leave helpful feedback.\n\nIf you enter `y` it will open the GitHub discussion board in a new tab in your browser, otherwise it will skip this step.\n\nAfter completing the <a target=\"_blank\" href=\"https://github.com/pieces-app/cli-agent/discussions/194\">feedback</a>, Pieces will prompt you to type `pieces contribute` and then ask if you’d like to open the <a target=\"_blank\" href=\"https://github.com/pieces-app/cli-agent\">source code for Pieces CLI on GitHub</a> to improve it. You can optionally say yes by entering `y`; otherwise, enter `n`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/get_started/pieces_feedback_onboarding.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Uninstalling\n\nFollow the steps below to uninstall the Pieces CLI.\n\nIf you also want to uninstall PiecesOS, [follow these steps](https://docs.pieces.app/products/core-dependencies/pieces-os/manual-installation#uninstalling-piecesos).\n\n<Steps>\n  <Step title=\"Open a Terminal\">\n    Opening a terminal on your device depends on your platform: Open your OS’ search bar and enter `terminal`(macOS/Linux) or `CMD`(Windows).\n  </Step>\n\n  <Step title=\"Run Uninstall Command\">\n    If you installed Pieces CLI using PIP, you can type `pip uninstall pieces-cli` to remove the CLI. If you used Conda, you can type `conda remove pieces-cli`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/get_started/pip_uninstall.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>",
    "lastModified": "2025-06-04T17:24:57.512Z",
    "filePath": "cli/get-started.md"
  },
  "/docs/cli/troubleshooting": {
    "slug": "/docs/cli/troubleshooting",
    "metadata": {
      "title": "Troubleshooting",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Having Trouble with Pieces CLI?\n\nIf the Pieces CLI isn't working as expected, follow these steps:\n\n### Update the Package Version(s)\n\nConfirm you’re using the latest version of the Pieces CLI using the **PIP** or **Conda** package manager:\n\n<Tabs>\n  <TabItem title=\"PIP\">\n    1. Opening a terminal on your device depends on your platform: Open your OS's search bar and enter `terminal` for macOS/Linux or `CMD` for Windows. Open the recommendation.\n\n    2. In the new terminal, type: `pip install pieces-cli -U` to update the Pieces CLI with Python’s PIP package manager.\n  </TabItem>\n\n  <TabItem title=\"Conda\">\n    1. To open a terminal on your device, search for a terminal on macOS/Linux or CMD on Windows, then select the suggested option.\n\n    2. In the newly opened terminal, enter: `conda update pieces-cli`. Conda will install the newest version of Pieces CLI.\n  </TabItem>\n</Tabs>\n\nAn outdated version of PiecesOS might be causing the problems. Be sure to update it, too. When you start PiecesOS, it will prompt you to update.\n\nIf not, you can [reinstall it to fix any remaining issues](https://docs.pieces.app/products/core-dependencies/pieces-os/manual-installation#manual-download--installation).\n\n## Restart your System After Updates\n\nIf you've recently installed or updated PiecesOS or the Pieces CLI, restart your system. This can help apply any system variables that may have been set up during installation.\n\nContact the [Pieces support team](https://getpieces.typeform.com/to/mCjBSIjF#docs-vscode) if the issue persists.\n\n## Pieces-Specific Fixes\n\nMake sure to check the health and status of PiecesOS. Review the items below if you are having problems with Pieces Drive or Pieces Copilot within the Pieces CLI.\n\n### Check PiecesOS Status\n\nCheck to make sure PiecesOS is running.\n\n<pos-check />\n\n*PiecesOS must be running for the Pieces CLI to work.*\n\n### Refreshing Copilot Chats\n\nYou may need to restart or refresh the Pieces Copilot chat, especially if you’re using a cloud LLM and disconnect from WiFi.\n\nThese scenarios can occasionally cause the LLM to ‘hang’—to appear as if generating a response but eventually timing out, entering an infinite response loop, or experiencing other issues.\n\nTo do this, exit the current chat by pressing `⌘+c` (macOS) or `ctrl+c` (Windows/Linux) to force stop the active chat. Then you can re-enter the `ask “query”` command.",
    "lastModified": "2025-06-04T17:24:57.516Z",
    "filePath": "cli/troubleshooting.md"
  },
  "/docs/cli": {
    "slug": "/docs/cli",
    "metadata": {
      "title": "Pieces CLI",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/CLI_MAIN/pieces_cli_banner.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Pieces CLI\n\nThe Pieces CLI offers users a straightforward way to manage and utilize saved code snippets through the Pieces Drive. It uses the AI-powered features of the [Pieces Copilot](https://docs.pieces.app/products/cli/copilot), all directly within your terminal.\n\n* [Pieces Copilot](https://docs.pieces.app/products/cli/copilot): Utilize AI-driven conversations to enhance productivity by offering contextual assistance for your projects. It facilitates understanding of code, writing of comments, troubleshooting, and more by incorporating files and folders as context, with or without the powerful Long-Term Memory Engine (LTM-2).\n\n* [Pieces Drive](https://docs.pieces.app/products/cli/drive): Effortlessly save, find, and share your frequently used code snippets in your Pieces Drive. This makes organizing your work easy, allows for quick access to the code you need, and facilitates effective collaboration with others.\n\n<CardGroup cols={2}>\n  <Card title=\"Getting Started\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745331342247/687c66b0-ac65-412f-a9e0-39e6ac00c93b.png\">\n    Follow [these instructions](https://docs.pieces.app/products/cli/get-started) on how to download and install the Pieces CLI.\n  </Card>\n\n  <Card title=\"Support & Troubleshooting\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745331350108/c3c9ac64-c629-447a-a8fc-307d1f8f297b.webp\">\n    Explore [troubleshooting options](https://docs.pieces.app/products/cli/troubleshooting), navigate to our support page, or <a target=\"_blank\" href=\"https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr\">directly book a call</a> with our engineers.\n  </Card>\n</CardGroup>\n\n<Card title=\"Learn More with Quick Guides\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1747065928779/0f8466fc-9daf-4c91-87ba-f596cd1cd6d3.png\">\n  Pieces Quick Guides help you quickly understand and effectively utilize powerful features like the Long-Term (LTM-2) Memory Engine and Pieces Copilot. [Click here to get started.](https://docs.pieces.app/products/quick-guides/overview)\n</Card>\n\nThis software is designed to provide **two main features**: AI Assistance with the Pieces Copilot and developer material management within the Pieces Drive.\n\n### Enhanced AI Assistance\n\nThrough the Pieces CLI, developers can boost productivity by having AI-driven conversations that use [relevant notes and folders as context](https://docs.pieces.app/products/cli/copilot/chat), all within their terminal.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/pieces_copilot/chat/pieces_context_chat.gif\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Integrated Snippet Management\n\nWith Pieces Drive and PiecesOS in their terminal, developers can [save, search, and share their code snippets](https://docs.pieces.app/products/cli/drive). This enhances productivity by making reusable code accessible and organized within their notes and project files.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/CLI_MAIN/pieces_drive_list.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Using Pieces Copilot\n\nThe Pieces CLI enhances your workflow by letting you save, manage, and share snippets in the terminal. It offers features like snippet enrichment, sharing via custom links, and seamless integration with your development environment.\n\nTo explore available options, run `pieces help` within your terminal.\n\nFrom here, you’ll find several actions, including:\n\n* `Edit`: [Change the name and classification of the material](https://docs.pieces.app/products/cli/drive/edit-and-update) within Pieces Drive from directly within the terminal.\n\n* `Create and Delete`: Pieces CLI allows you to [manage your snippets easily from within your terminal](https://docs.pieces.app/products/cli/drive/saving-materials), allowing you to create and delete snippets.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/CLI_MAIN/edit_command.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Managing Your Code Snippets\n\nSaving and managing materials with the Pieces CLI is done with lightweight and familiar terminal-style commands.\n\nTo save a snippet, copy a section of text or code to your clipboard, head over to Pieces CLI, and type `pieces create`. If you’re in `pieces run` mode, you can just type `create`.\n\n<Callout type=\"tip\">\n  Common snippet types include utility functions, API requests, and reusable code blocks.\n</Callout>\n\nWhen you save snippets to your Pieces Drive with Pieces CLI, they get AI-generated metadata like [tags, titles, authorship details, and descriptions](https://docs.pieces.app/products/cli/drive/save-snippets#whats-stored-when-you-save-a-snippet). This keeps everything organized and easy to access and use at any point.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/CLI_MAIN/snippet_content.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Referencing & Reusing\n\nPieces CLI provides you with powerful search tools to quickly find and access your snippets that you previously saved to Pieces Drive.\n\nThere are three different search methods: *Fuzzy Search*, *Neural Code Search*, and *Full Text Search.*\n\nTo search for snippets, while Pieces CLI is open, type `search “query”`.\n\nYou can also opt-in to using Neural Code Search with `—mode ncs` or Full Text Search with `—mode fts`.\n\n<Callout type=\"info\">\n  Your query must be encapsulated in quotations for Pieces CLI to capture your full prompt\n</Callout>\n\nA new terminal window will open and you’ll be presented with a list of materials that closely match your query.\n\nScroll down or up with the `arrow keys` and select the material by pressing `enter`. The material will display with its attributes and the code that was stored in the material.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/cli_assets/CLI_MAIN/ncs_search_results.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\nDownload the Pieces CLI and follow our [installation guide](https://docs.pieces.app/products/cli/get-started) to start streamlining your workflow!",
    "lastModified": "2025-06-04T17:24:57.461Z",
    "filePath": "cli.md"
  },
  "/docs/core-dependencies/ollama/manual-installation": {
    "slug": "/docs/core-dependencies/ollama/manual-installation",
    "metadata": {
      "title": "Ollama | Manual Installation",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Manual Installation Guide\n\nOllama is an *optional* dependency that enables local AI inference for Pieces Copilot and other AI-powered features in Pieces for Developers.\n\nIf you prefer to run LLMs on-device instead of using cloud-based AI, you will need to install Ollama manually.\n\nThis guide will walk you through the download, installation, and verification process for Ollama across Windows, macOS, and Linux.\n\n## Minimum Version Requirement\n\nPiecesOS requires a **specific minimum version** of Ollama to ensure compatibility, which is **0.5.5.**\n\nAlways install the latest stable release.\n\n## Download Ollama\n\nVisit the <a target=\"_blank\" href=\"https://ollama.com/download\">official Ollama website</a> to download the latest version, then install using the platform-specific instructions below.\n\n<Tabs>\n  <TabItem title=\"macOS\">\n    **Ollama | macOS Installation**\n\n    Follow the steps below to manually install Ollama for your macOS device.\n\n    1. Download the **macOS installer (**`.pkg`**)** from the <a target=\"_blank\" href=\"https://ollama.com/download\">Ollama website.</a>\n\n    2. Double-click the `.pkg` file and follow the installation steps.\n\n    3. After installation, verify the setup in **Terminal** by running `ollama --version`.\n  </TabItem>\n\n  <TabItem title=\"Windows\">\n    **Ollama | Windows Installation**\n\n    Follow the steps below to manually install Ollama for your Windows device.\n\n    1. Download the **Windows installer (.exe)** from the <a target=\"_blank\" href=\"https://ollama.com/download\">Ollama website.</a>\n\n    2. Double-click the installer to launch the setup.\n\n    3. Follow the on-screen instructions, accepting any security prompts.\n\n    4. Once installed, open **Command Prompt** and verify the installation by running `ollama --version`.\n  </TabItem>\n\n  <TabItem title=\"Linux\">\n    **Ollama | Linux Installation**\n\n    Follow the steps below to manually install Ollama for your Linux device.\n\n    1. Open a terminal window and run `curl -fsSL https://ollama.ai/install sh | sh`.\n\n    2. If using a package manager, manually install it with `sudo apt update && sudo apt install ollama`.\n\n    3. Verify the installation with `ollama --version`.\n  </TabItem>\n</Tabs>\n\n### Verify Ollama Integration\n\nOnce installed, ensure PiecesOS can detect and use Ollama.\n\n1. Open the **Pieces Quick Menu** from your system tray or menu bar.\n\n2. Navigate to `ML Processing`.\n\n3. If Ollama is installed and recognized, it will appear under `Local AI Models`.\n\nIf it does not appear, restart PiecesOS and try again.\n\nIf PiecesOS **still doesn’t detect Ollama**, refer to [troubleshooting.](https://docs.pieces.app/products/core-dependencies/ollama/troubleshooting)\n\n### Update Ollama\n\nTo update or uninstall Ollama on macOS or Windows, you can either download the latest version from the official Ollama website, update it through the Pieces Desktop App (if installed) or update it directly from the background Ollama process on your device.\n\nFor Linux, open your terminal and run `sudo apt update && sudo apt upgrade ollama`.\n\n## Uninstall Ollama\n\nIf you no longer need local AI models or wish to remove the Ollama wrapper from your system, follow the instructions below specific to your platform.\n\n<Tabs>\n  <TabItem title=\"macOS\">\n    **Ollama | macOS Uninstallation**\n\n    1. Open your terminal and run `sudo rm -rf /[username]/local/bin/ollama`.\n  </TabItem>\n\n  <TabItem title=\"Windows\">\n    **Ollama | Windows Uninstallation**\n\n    1. Open `Settings`, navigate to `Apps`, then to `Installed Apps`.\n\n    2. Search for `Ollama` and left-click the three dots next to the installed Ollama client, and click `Uninstall`.\n\n    3. Restart your device to complete the uninstallation process.\n  </TabItem>\n\n  <TabItem title=\"Linux\">\n    **Ollama | Linux Uninstallation**\n\n    1. Open your terminal and run `sudo apt remove ollama`.\n  </TabItem>\n</Tabs>\n\n## Next Steps\n\nYou can read documentation about what [local LLMs are currently available](https://docs.pieces.app/products/core-dependencies/ollama/supported-models) on Ollama and are supported by PiecesOS, or [click here for troubleshooting](http://docs.pieces.app/products/core-dependencies/ollama/troubleshooting) if you’re experiencing installation issue.",
    "lastModified": "2025-06-04T17:24:57.532Z",
    "filePath": "core-dependencies/ollama/manual-installation.md"
  },
  "/docs/core-dependencies/ollama/supported-models": {
    "slug": "/docs/core-dependencies/ollama/supported-models",
    "metadata": {
      "title": "Pieces-Compatible Local LLMs",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "<pieces-local-models />",
    "lastModified": "2025-06-04T17:24:57.537Z",
    "filePath": "core-dependencies/ollama/supported-models.md"
  },
  "/docs/core-dependencies/ollama/troubleshooting": {
    "slug": "/docs/core-dependencies/ollama/troubleshooting",
    "metadata": {
      "title": "Ollama | Troubleshooting",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Initial Checks\n\nPiecesOS uses Ollama as a wrapper for running local large language models, which allows developers to experiment with local models while leveraging PiecesOS features.\n\nHowever, issues may arise from configuration mismatches, dependency updates, or environmental factors. \n\nFor starters, make sure your machine meets the minimum system specifications and you have the latest version of PiecesOS and Ollama.\n\n* **System Requirements:** Confirm your machine meets the minimum hardware and software requirements for running Ollama and your selected language model.\n\n* **Latest Version:** Make sure you are using the latest version of both PiecesOS and Ollama.\n\n<Callout type=\"info\">\n  Simple updates often resolve known bugs.\n</Callout>\n\n## Common Issues & Fixes\n\nIf Ollama fails to install or update, or if you encounter any dependency errors during installation, try the following steps to resolve the issue(s):\n\n* **Verify Dependencies:** Ensure all required libraries and tools are installed on your system. Refer to the installation guide for the list of prerequisites.\n\n* **Reinstall:** Uninstall any previous version of Ollama and perform a clean installation.\n\n* **Network Issues:** If downloading fails, check your internet connection or proxy settings.\n\n* **Error Messages:** Look for specific error messages during installation and consult the <a target=\"_blank\" href=\"https://github.com/ollama/ollama/blob/main/docs/faq.md\">Ollama FAQ</a> or official installation troubleshooting docs for guidance.\n\n### Performance Problems\n\nWhen running PiecesOS and using local models for generative AI use, you may experience slow response times or high CPU and RAM usage that causes your overall system to slow down.\n\nYou may need to:\n\n* **Switch to Cloud Models:** You may need to acquire or switch over to a device with more RAM, a newer CPU with more cores, or a dedicated GPU with more VRAM.\n\n* **Use a Lighter Model:** You may need to use a parameterized or more lightweight model if available.\n\n* **Cut Down Instances:** If you are running multiple instances or flooding the LLM with queries and prompts, reduce the number of concurrent processes.\n\n## Using Local Models\n\nOlder devices, regardless of operating system, may struggle to meet the hardware demands of heavy-duty LLMs, even with Ollama's streamlined setup.\n\n### Minimum System Requirements\n\nLocal models demand more from your system than their cloud-hosted counterparts.\n\nTo ensure a stable, responsive experience—make sure your device fits these general minimum device specifications, pulled from Ollama documentation and other experience-tested public sources.\n\n<Steps>\n  <Step title=\"Operating System\">\n    Ollama is supported on macOS, Windows, and Linux devices—but you need to make sure your operating system is running at the correct minimum version to avoid compatibility issues.\n\n    * **macOS:** macOS 11.0 (Big Sur) or later.\n\n    * **Windows:** Windows 10 or later.\n\n    * **Linux:** Ubuntu 18.04 or later.\n  </Step>\n\n  <Step title=\"RAM\">\n    Your system should have a minimum amount of RAM depending on the local model you’re trying to run.\n\n    More RAM may further improve performance and reduce bottlenecks.\n\n    * **3B Models:** 8GB of RAM\n\n    * **7B Models:** 16GB of RAM\n\n    * **13B Models:** 32GB of RAM\n  </Step>\n\n  <Step title=\"CPU\">\n    If your system doesn’t have a dedicated or otherwise capable GPU, running a CPU-tuned model may be in your best interests.\n\n    * **Recommended:** Any modern CPU with at least 4 cores.\n\n    * **13B Models:** Any modern CPU with at least 8 cores.\n  </Step>\n\n  <Step title=\"GPU\">\n    While you don’t need a GPU to run a local Ollama model as long as the LLM is CPU-tuned, a GPU can significantly speed up inference and the training of custom models.\n\n    * **Recommended:** Any modern GPU with at least 6GB of VRAM.\n  </Step>\n\n  <Step title=\"Storage Space\">\n    Local large language models can occupy significant disk space, so ensure you have enough capacity for both the core installation and any custom models you plan to download or train.\n\n    * **Minimum:** At least 12GB of free storage space for installing Ollama and other base models.\n\n    * **Additional Storage:** Required for larger models that have additional dependencies\n  </Step>\n</Steps>\n\n### Choosing the Right Model\n\nPick a model that fits your system's capabilities and performance limits, especially if you're using an older or less powerful device.\n\n* **Lightweight Models:** Choose smaller or **quantized models** if you're using older hardware or have limited VRAM. Quantized models use less memory, making them easier to run without greatly affecting output quality for general tasks.\n\n* **GPU-Tuned Models:** If you have a powerful GPU with enough VRAM, GPU-accelerated models usually run faster and deliver results more efficiently.\n\n* **CPU-Tuned Models:** If you don't have a dedicated GPU or have low GPU memory, CPU-tuned models are a good alternative. Though slower, they can still offer reliable performance.\n\n### Local Model Crashing\n\nIf you encounter 'hanging' or crashing issues when trying to run Pieces with a local LLM, it might be due to your system's hardware.\n\nInsufficient system resources like RAM or VRAM can cause hiccups, slowdowns, and other glitches.\n\nHere are some troubleshooting options:\n\n1. **Check Hardware:** Ensure you have enough RAM, VRAM, and CPU capacity as recommended by the model.\n\n2. **Update Drivers:** Use `vulkaninfo` (or a similar tool) to check for GPU or Vulkan-related errors if you have a Vulkan-based GPU. Update your GPU drivers if you find compatibility issues.\n\n3. **Model Switching:** If you experience crashes or slowdowns, try switching to a less resource-intensive local model. Reducing complexity can help stabilize performance.\n\nIf you've tried all these troubleshooting steps but still face crashes, hanging, or other instabilities, you may need to switch to a cloud-based LLM.\n\n### Vulkan-based GPUs\n\nNVIDIA and AMD both use the Vulkan API framework in their GPUs, but there are known issues when using Vulkan GPUs for AI and LLM-focused tasks. For instance, a corrupted or outdated Vulkan API can lead to crashes.\n\nIf you encounter this problem, check Vulkan health in your terminal or command line by scanning for errors or warning messages. If any issues are found, **update your GPU drivers.**\n\n### Checking Vulkan\n\nTo check your Vulkan health status, run `vulkaninfo` in your terminal or command line and look for errors or warnings.\n\n### Updating GPU Drivers\n\nIf issues are detected, update your GPU drivers to ensure Vulkan compatibility and stability.",
    "lastModified": "2025-06-04T17:24:57.542Z",
    "filePath": "core-dependencies/ollama/troubleshooting.md"
  },
  "/docs/core-dependencies/ollama": {
    "slug": "/docs/core-dependencies/ollama",
    "metadata": {
      "title": "Understanding Ollama",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## What Is Ollama?\n\nOllama is an *optional* but powerful dependency that allows PiecesOS to run Large Language Models (LLMs) directly on your device instead of relying on cloud-based AI processing. \n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/figma_mockups/ollama_core_dependencies.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nUnlike PiecesOS—which is required for all Pieces functionality—Ollama is only needed if you want to use local AI models with Pieces Copilot.\n\n<Callout type=\"tip\">\n  Using Ollama for local generative AI is *a separate process* from how PiecesOS uses local, in-house LoRA models for processing data with the LTM-2 Engine.\n</Callout>\n\n## Why Use Ollama?\n\nOllama acts as a wrapper around `llama.cpp`, making local AI processing faster, more stable, and easier to use.\n\nIt simplifies model deployment and ensures compatibility with [Pieces for Developers’ supported LLMs](https://docs.pieces.app/products/core-dependencies/ollama/supported-models) and allows for new local models to be integrated soon after they are released.\n\nAdditionally, many developers and organizations prefer local LLMs over cloud-hosted models for reasons such as:\n\n* **Stronger data security,** as it keeps proprietary code and sensitive queries 100% local.\n\n* **Faster response times** with no network delays during generative AI processing and local inference.\n\n* **Offline accessibility** for use even when no internet connection is present.\n\n* **Enterprise compliance** so all AI queries remain within company-managed environments.\n\n### How It Works\n\nOllama is integrated with PiecesOS to enable local modal inference and generative AI capabilities.\n\nHere’s how Ollama works alongside PiecesOS:\n\n* **Serves on-device LLMs**, reducing cloud dependency and enhancing privacy.\n\n* **Automatically detects existing Ollama installations**, so if you’ve already installed it for other purposes, Pieces can use it without requiring a reinstallation.\n\n* **Supports a curated set of models**, all using `Q4_K_S` quantization for performance optimization.\n\n* **Ensures compatibility** with PiecesOS through minimum version requirements to avoid stability issues.\n\n<Callout type=\"tip\">\n  Since Ollama is several GBs in size, it is **not installed by default**. Users must opt in during the PiecesOS setup process if they want local model support.\n</Callout>\n\n### Using Local vs Cloud Models\n\nPiecesOS primarily uses cloud-based AI models for Pieces Copilot.\n\nHowever, users who prefer on-device AI for speed, privacy, or offline access can install Ollama to enable local models.\n\n[You can read about the system requirements for Ollama here.](https://docs.pieces.app/products/core-dependencies/ollama/troubleshooting#using-local-models)\n\n***\n\n| **Feature**              | **Cloud AI (Default)**                                                                                      | **Local AI (Ollama)**                                  |\n| ------------------------ | ----------------------------------------------------------------------------------------------------------- | ------------------------------------------------------ |\n| **Processing Location**  | Cloud-based (requires internet)                                                                             | On-device (runs locally)                               |\n| **Performance**          | Dependent on internet speed                                                                                 | Potentially faster response times (no network latency) |\n| **Data Privacy**         | Data only sent to cloud if included as context in a Copilot Chat—reverts on OpenAI, Gemini Privacy Policies | 100% local (no data transmission from local device)    |\n| **Model Availability**   | Uses several cloud-hosted models                                                                            | Uses user-installed local models                       |\n| **Storage Requirements** | Minimal outside of the PiecesOS installation                                                                | Several GBs (model storage)                            |\n| **Offline Support**      | No                                                                                                          | Yes                                                    |\n\n***",
    "lastModified": "2025-06-04T17:24:57.524Z",
    "filePath": "core-dependencies/ollama.md"
  },
  "/docs/core-dependencies/on-device-storage": {
    "slug": "/docs/core-dependencies/on-device-storage",
    "metadata": {
      "title": "On-Device Storage",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Why it Matters\n\nPieces for Developers was designed with a **local-first architecture**—which is why all processing—code analysis, secret detection, and tag generation—runs completely offline by **default**:\n\n* **What stays Local:** Snippets, tags, embeddings, LTM-2 memory, user settings, preferences, activity logs, diagnostic logs, and Pieces Copilot Chat history.\n\n* **When it can move to the Cloud:** Only if you explicitly enable **Personal Cloud** or use a cloud-based model provider like OpenAI. In those cases, data is handled according to the provider’s privacy policy—not ours.\n\nThis architecture puts you in full control of your data, simplifies backup and restore, and minimizes your exposure to risk.\n\nCloud features are not required, are opt-in only, are isolated per user (`<your-subdomain>.pieces.cloud`).\n\nWe never use your data to train third-party models. You can delete your entire database, logs, and backups at any time by removing the `com.pieces.os` folder—more on that below.\n\n<Callout type=\"tip\">\n  We’re **SOC 2 Type II** certified and never use your private data to train models.\n</Callout>\n\n## Where your Database Lives\n\nPieces stores all snippet metadata, embeddings, tags, and workflow context captured by LTM-2 in a single folder inside the `com.pieces` directory on your machine.\n\n| **Platform** | **Default path\\***                             |\n| ------------ | ---------------------------------------------- |\n| *macOS*      | `/Users/<username>/Library/com.pieces.os/`     |\n| *Windows*    | `C:/Users/<username>/Documents/com.pieces.os/` |\n| *Linux*      | `/home/<username>/.local/share/com.pieces.os/` |\n\n<Callout type=\"tip\">\n  Replace `<username>` with your OS account name.\n</Callout>\n\nInside `com.pieces.os`, you’ll see `production`, which contains several folders that store broken down LTM-2 context and the rest of your data.\n\nYou are free to **copy, compress,** or **relocate** the entire `production` folder—for example, to sync via OneDrive or to migrate to another machine.\n\n### Finding your Logs\n\nWhen you open a GitHub issue or contact **Pieces Support**, attaching the most recent logs helps us diagnose problems in *minutes* instead of *hours*.\n\n| **Platform** | **Log Directory**                                                     |\n| ------------ | --------------------------------------------------------------------- |\n| *macOS*      | `/Users/<username>/Library/com.pieces.os/production/support/logs/`    |\n| *Windows*    | `C:/Users/<username>/Documents/com.pieces.os/production/support/logs` |\n| *Linux*      | `/home/<username>/.local/share/com.pieces.os/logs/`                   |\n\nLogs rotate daily and are timestamped (`log-05062025`).\n\nZip the latest two or three files and drag them into your <a target=\"_blank\" href=\"https://github.com/pieces-app/support/issues\">GitHub issue</a> or Discord DM with our engineers.\n\n## Backup, Restore, or Reset\n\nThere are several options to backup, restore or reset your database from within the `com.pieces.os` folder.\n\n| **Task**                                           | **Quick Steps**                                                                                                                                              |\n| -------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| *Create a Manual Backup*                           | Quit all Pieces apps. Copy the entire `com.pieces.*` folder to your backup location, such as a USB drive, NAS, or cloud storage.                             |\n| *Restore Database on a New Machine*                | Install Pieces OS. Replace the newly created `com.pieces.*` folder with your backup. Then, restart Pieces.                                                   |\n| *Start Fresh or Troubleshoot a Corrupted Database* | Quit Pieces. Rename the `production` folder to something else, then relaunch. Pieces will create a brand-new, empty database (keep the backup just in case). |\n\n## Need Help?<a target=\"_blank\" href=\"https://docs.pieces.app/extensions-plugins/sublime#get-support-or-share-feedback\">**​**</a>\n\nYou can open GitHub issues for PiecesOS, the Pieces Desktop App, or any other Pieces plugin or extension by <a target=\"_blank\" href=\"https://github.com/pieces-app/support/issues\">opening an issue in our GitHub repository.</a>\n\nIf you would prefer not to use GitHub, you can still <a target=\"_blank\" href=\"https://getpieces.typeform.com/to/mCjBSIjF#page=docs-support\">leave feedback or report a bug here.</a>",
    "lastModified": "2025-06-04T17:24:57.546Z",
    "filePath": "core-dependencies/on-device-storage.md"
  },
  "/docs/core-dependencies/pieces-os/manual-installation": {
    "slug": "/docs/core-dependencies/pieces-os/manual-installation",
    "metadata": {
      "title": "PiecesOS | Manual Installation",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Installing PiecesOS\n\nTo get started, you’ll need to make sure your device is compatible with Pieces and has the minimum device recommendations.\n\n## System Requirements\n\nFor macOS, Windows, and Linux devices, we recommend meeting these minimum device specifications:\n\n***\n\n| **Minimum**          | **Recommended**        | **Additional Information**                                                                                               |\n| -------------------- | ---------------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| Any modern CPU       | A multi-core CPU       | PiecesOS supports multithreading for different operations and processes, making it faster the more CPU cores it can use. |\n| 8GB of RAM           | 16GB+ of RAM           | At least 1GB of free RAM if running in cloud mode, or 2GB if running in local mode.                                      |\n| 6GB of storage space | 10GB+ of storage space | At least 2GB for PiecesOS and the Pieces Desktop App with at least 4GB of free space for LTM data.                       |\n\n***\n\nPiecesOS and the Pieces Desktop App are lightweight, but you want to ensure you’ve got at least the above specifications to ensure a seamless user experience.\n\n### Checking OS Version\n\nPiecesOS is designed for macOS, Windows, and Linux, so you have the power of Pieces are your fingertips regardless of your device’s operating system.\n\n<Callout type=\"alert\">\n  For Linux users, please note that PiecesOS is tested and currently compatible with Ubuntu 22+ and other Ubuntu-based distributions **only.**\n</Callout>\n\nStill, you need to be running a minimum version of that OS to ensure compatibility.\n\n***\n\n| **macOS**                       | **Windows**                   | **Linux**  |\n| ------------------------------- | ----------------------------- | ---------- |\n| macOS 12.0 (Monterey) or higher | Windows 10 (v.1809) or higher | Ubuntu 22+ |\n\n***\n\nIf you need help determining your device’s OS version or system specifications, [read this documentation on the Troubleshooting page.](https://docs.pieces.app/products/core-dependencies/pieces-os/troubleshooting#common-installation-issues)\n\n## Why Install PiecesOS Manually?\n\nPiecesOS is installed by default when installing the Pieces Desktop App as a core dependency, but it can be installed manually for use with a Pieces plugin or extension if you’re not ready to dive into the entire Pieces ecosystem.\n\nLTM, Pieces Drive, and Pieces Copilot will still be available to you.\n\n### Installing via Pieces Desktop App\n\nIf you want to install PiecesOS automatically alongside the Pieces Desktop App, you can check out [these installation guides.](https://docs.pieces.app/products/desktop/download)\n\n## Manual Download & Installation\n\nThere are different ways to install PiecesOS as a standalone entity, separate from the Pieces Desktop App.\n\nTo install, download the appropriate link for your device’s OS and architecture (if using a macOS device) and open the file, then walk through the guided installation steps as necessary.\n\n## Windows\n\nClick the download buttons below to install PiecesOS via `.exe` or `.appinstaller`.\n\n<CardGroup cols={2}>\n  <Card title=\"Download — Windows (.exe)\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741278772635/8eb6e27d-92f4-4f0a-9108-54f78d55869c.webp\" href=\"https://builds.pieces.app/stages/production/os_server/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE?download=true&product=DOCUMENTATION_WEBSITE&ga_visitor=286281413.1724689222\">\n    *Windows 10 (1809) or higher*\n  </Card>\n\n  <Card title=\"Download — Windows (.appinstaller)\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741278775019/5698a601-e779-4e66-86e2-78600fd02341.webp\" href=\"https://builds.pieces.app/stages/production/appinstaller/os_server.appinstaller?download=true&product=DOCUMENTATION_WEBSITE&ga_visitor=286281413.1724689222\">\n    *Windows 10 (1809) or higher*\n  </Card>\n</CardGroup>\n\n### Updating PiecesOS (AppInstaller)\n\nNote that currently, updating PiecesOS if installed via the `.appinstaller` (currently the *Recommended* installation method) files requires that you **quit the Pieces Desktop App**, then proceed with updating PiecesOS.\n\nIf this fails, make sure that the Pieces Desktop App is fully quit, as well as PiecesOS—then relaunch PiecesOS and proceed to download and install the update.\n\n## macOS\n\nClick the download buttons below to install PiecesOS for your ARM or Intel-based macOS device, or use the Homebrew instructions below.\n\n<CardGroup cols={2}>\n  <Card title=\"Download — ARM (.DMG)\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741278778335/5e8536c4-ec50-4050-9b95-314d7eb52a2c.webp\" href=\"https://builds.pieces.app/stages/production/os_server/dmg-arm64/download?download=true&product=DOCUMENTATION_WEBSITE&ga_visitor=286281413.1724689222\">\n    *macOS 12.0 (Monterey) or higher*\n  </Card>\n\n  <Card title=\"Download — Intel (.DMG)\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741278781040/5556905b-856d-4ccd-b429-06c8b628e3bf.webp\" href=\"https://builds.pieces.app/stages/production/os_server/dmg/download?download=true&product=DOCUMENTATION_WEBSITE&ga_visitor=286281413.1724689222\">\n    *macOS 12.0 (Monterey) or higher*\n  </Card>\n</CardGroup>\n\n<Card title=\"Installing via Homebrew\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741278788730/10f164ce-cf9a-4260-9dd0-f92e23458ef9.png\">\n  You can also install PiecesOS manually using Homebrew from your device’s terminal.\n\n  To do so:\n\n  1. Ensure Homebrew is installed on your system.\n\n  2. Run `brew install --cask pieces-os` in your terminal to install the Pieces `brew` package.\n</Card>\n\n## Linux\n\nThere are (2) requirements that must be met to download and install PiecesOS on your Linux device.\n\n1. **Snap Support:** Ensure `snapd` is installed and enabled on your system. Most recent Ubuntu releases include `snapd` by default. If needed, install `snapd` by following official `snapd` documentation.\n\n2. **Administrator Access:** You’ll need `sudo` privileges to install `snap` packages.\n\n<Card title=\"Download — Linux\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741278623090/598e61f4-9d33-4ce0-919d-781762b3b0f9.webp\">\n  *Ubuntu 22+ required.*\n\n  ***\n\n  Run these commands **in order** to install and properly set up PiecesOS.\n\n  1. **Open Terminal:** Open the Command-Line Interface (CLI) using `ctrl+alt+t`.\n\n  2. Run `sudo snap install pieces-os` to install PiecesOS. You will be prompted to enter your local account’s password.\n\n  3. Enter and run `sudo snap connect pieces-os:process-control :process-control` to enable offline and on-device machine learning and LLM functionality.\n\n  4. To launch the PiecesOS, type `pieces-os` in your terminal and press `enter`.\n</Card>\n\n## Uninstalling PiecesOS\n\nSelect your operating system below to platform-specific steps to uninstalling PiecesOS.\n\n<Tabs>\n  <TabItem title=\"macOS\">\n    **On macOS Devices**\n\n    On your macOS device, navigate to **Finder,** then select **Applications.**\n\n    Scroll or search until you find `PiecesOS.` Right-click on these two applications and select `Move to Trash`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/get_started/macos/macos_how_to_uninstall_pfd.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </TabItem>\n\n  <TabItem title=\"Windows\">\n    **On Windows Devices**\n\n    Open **Settings,** then find **Apps** and search `Pieces.`\n\n    The **PiecesOS application** will appear after that query. Click the three dots to the right of the application title, and click `Uninstall`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/get_started/windows/uninstalling_on_windows.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </TabItem>\n\n  <TabItem title=\"Linux\">\n    **On Linux Devices**\n\n    Uninstallation of PiecesOS on Linux is done via the CLI.\n\n    To remove **PiecesOS,** type `sudo snap remove pieces-os` and press `enter`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/get_started_linux/uninstall_pfd_from_terminal.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </TabItem>\n</Tabs>\n\n## Troubleshooting\n\nIf you’re experiencing issues related to the manual installation of PiecesOS, see the [troubleshooting guide](https://docs.pieces.app/products/core-dependencies/pieces-os/troubleshooting#piecesos--troubleshooting) for quick fixes or access the [support page](https://docs.pieces.app/products/support) for helpful resources.\n\n<Callout type=\"info\">\n  Want to install PiecesOS automatically with the Pieces Desktop App? [Click here.](https://docs.pieces.app/products/core-dependencies/pieces-os/manual-installation#installing-via-pieces-desktop-app)\n</Callout>",
    "lastModified": "2025-06-04T17:24:57.558Z",
    "filePath": "core-dependencies/pieces-os/manual-installation.md"
  },
  "/docs/core-dependencies/pieces-os/quick-menu": {
    "slug": "/docs/core-dependencies/pieces-os/quick-menu",
    "metadata": {
      "title": "PiecesOS | Quick Menu",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Overview\n\nThe **Quick Menu** is a lightweight interface for interacting with PiecesOS, located in your menu bar (macOS & Linux) or system tray (Windows).\n\nThis popover lets you manage your PiecesOS settings, Long-Term Memory (LTM-2) Engine configurations, and application integrations.\n\nIt enables you to monitor PiecesOS status, toggle memory and AI processing settings, and access critical resources without launching a separate application, among other features.\n\n[For Linux users, available options are currently more limited.](https://docs.pieces.app/products/core-dependencies/pieces-os/quick-menu#linux)\n\n## Quick Menu Actions\n\nThere are several views and buttons you can click to expand or enter in the PiecesOS Quick Menu on macOS and Windows:\n\n***\n\n| **View / Button**                 | **Explanation**                                                                                                                            |\n| --------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| *Account*                         | You can log in or log out of your Pieces Account.                                                                                          |\n| *Version*                         | Check for and automatically install available PiecesOS updates.                                                                            |\n| *Long-Term Memory Engine*         | Enable or disable LTM.                                                                                                                     |\n| *Long-Term Memory Access Control* | Enable or disable sources from which LTM captures contextual workflow data.                                                                |\n| *Settings*                        | Adjust settings like launch on login, enabled Pieces products, ML processing configurations, telemetry permissions, or optimize RAM usage. |\n| *Activity*                        | View recent LTM activity, like most recent Copilot Chats, people, and related websites.                                                    |\n| *Resources*                       | Find links to documentation and Pieces for Developers social accounts.                                                                     |\n\n***\n\n*PiecesOS Quick Menu on macOS*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/pieces_os_main/quick_menu/macos_quickmenu_new.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"alert\">\n  The PiecesOS Quick Menu shares the same user interface (UI) as the Quick Menu on Windows.\n\n  Media for this Quick Menu documentation has been **captured exclusively on macOS.**\n</Callout>\n\n### Logging In & Out\n\nAt the top of the Quick Menu, you can **log in or log out** of your Pieces account. Logging in allows access to cloud-connected features, such as:\n\n* Syncing preferences across devices\n\n* Cloud model processing (if enabled)\n\n* Accessing saved snippets across devices\n\nIf you log out, PiecesOS will continue running locally with saved configurations but will not sync to the cloud.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/pieces_os_main/quick_menu/macos_account_menu.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Checking for Updates\n\nDirectly under your account information, the Quick Menu displays your current PiecesOS version and whether it is up to date.\n\n* If a new update is available, you will see an `Update Available` button. Clicking it will initiate the update process.\n\n* If PiecesOS is up to date, the menu will display a green check mark and show the active version—i.e., 11.0.4.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/pieces_os_main/quick_menu/macos_checking_for_updates.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## LTM-2 Engine\n\nLTM is PiecesOS’s core memory engine, capturing workflow context locally to enhance productivity.\n\nYou can toggle it on or off from the Quick Menu.\n\n### Enabling, Pausing & Disabling LTM\n\nYou can toggle the LTM engine **On** or **Off** from the Quick Menu.\n\nTo do so, click the `Pieces` logo in your taskbar or toolbar, and click `Enable Long-Term Memory Engine` to enable it.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/temp/enabling_LTM.gif\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\nConversely, you can click the green `On` button to display a drop-down menu that lets you disable the LTM temporarily in minute increments or altogether.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/temp/closing_down_LTM.gif\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Long-Term Memory Access Control\n\nThis section allows you to manage which applications and sources LTM captures data from through two menus:\n\n1. **Enabled Sources**\n\nThis view displays a list of apps from which LTM is actively gathering data (e.g., Google Chrome, ChatGPT).\n\nClicking on an enabled source opens a window where you can choose to disable it.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/pieces_os_main/quick_menu/macos_view_enabled_sources.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n2. **Disabled Sources**\n\nApps or sources that LTM is blocked from accessing appear here.\n\nClick the `Add` button to open a Finder (macOS) or Folder (Windows) window, where you can manually select additional applications to allow memory capture.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/pieces_os_main/quick_menu/macos_disable_a_ltm_source.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## MCP Menu\n\nPieces is fully integrated with MCP functionality and now ships with an in-house MCP protocol that passes workflow context captured by Long-Term Memory to your favorite IDEs, such as Cursor, VS Code, and more.\n\nYou can find the SSE endpoint URL for creating your own Pieces MCP instances, as well as links to related documentation, in the `Model Context Protocol (MCP) Servers` menu.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_pos_new.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Settings\n\nThe `Settings` menu allows you to configure PiecesOS to best suit your workflow.\n\n### Optimize Memory Usage\n\nAdjusts memory allocation for PiecesOS to reduce resource consumption while maintaining performance.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/pieces_os_main/quick_menu/macos_settings_page.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Launch on Login\n\nYou can enable or disable automatic startup for PiecesOS when your computer boots up.\n\n### Enabled Apps\n\nView a list of applications that have Pieces plugins and extensions installed.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/pieces_os_main/quick_menu/macos_enabled_apps.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Telemetry Sharing\n\nEnable or disable telemetry data collection on an individual application, plugin, or extension basis.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/pieces_os_main/quick_menu/macos_telemetry_settings.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### ML Processing\n\nThis menu controls how PiecesOS manages AI model inference. You can use `Blended Mode` or `Local Mode` to switch between using a combination of local and cloud-based LLMs for performance, or purely on-device processing with no cloud dependencies.\n\nYou can also make changes to the enrichment to level and type to individual applications for more fine-tuned control.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/pieces_os_main/quick_menu/macos_choose_blended_or_local_per_app_ltm_enrichment.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Activity\n\nThe `Activity` menu provides a log of recent actions and interactions within PiecesOS, such as:\n\n1. **Most Recent Copilot Chat:** Displays the last Copilot conversation timestamp.\n\n2. **Most Recent People:** Lists recognized people based on saved materials and shared code.\n\n   **Most Recent Websites:** Shows the last visited web pages that PiecesOS captured. Each website is listed with a clickable URL\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/pieces_os_main/quick_menu/macos_activity_menu.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Resources\n\nThe `Resources` provides quick access to documentation, support, and community links:\n\n<Tabs>\n  <TabItem title=\"Links\">\n    * <a target=\"_blank\" href=\"https://pieces.app/about\">About</a>\n\n    * <a target=\"_blank\" href=\"https://docs.pieces.app/\">Documentation</a>\n\n    * <a target=\"_blank\" href=\"https://docs.pieces.app/products/support\">Support</a>\n  </TabItem>\n\n  <TabItem title=\"Follow Us\">\n    * <a target=\"_blank\" href=\"https://discord.com/invite/ubn8JFAXQ7\">Discord</a>\n\n    * <a target=\"_blank\" href=\"https://x.com/getpieces\">X</a>\n\n    * <a target=\"_blank\" href=\"https://www.linkedin.com/company/getpieces\">LinkedIn</a>\n\n    * <a target=\"_blank\" href=\"http://github.com/pieces-app\">GitHub</a>\n\n    * <a target=\"_blank\" href=\"https://www.youtube.com/@getpieces\">YouTube</a>\n  </TabItem>\n</Tabs>\n\n***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/pieces_os_main/quick_menu/macos_resources.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Linux\n\nThe Pieces Quick Menu on Linux contains several helpful resources and links, such as:\n\n* **Discoverer Integrations:** Opens the Pieces website, where you can find all <a target=\"_blank\" href=\"https://pieces.app/plugins\">Pieces for Developers browser and IDE extensions and plugins</a>.\n\n* **About:** Launches the <a target=\"_blank\" href=\"https://pieces.app/about\">About</a> page for Pieces for Developers.\n\n* **Documentation:** Brings you to the official <a target=\"_blank\" href=\"https://docs.pieces.app/\">Pieces for Developers documentation</a>, where you can browse through guides and troubleshooting information for the entire Pieces Suite.\n\n* **Submit Feedback or Issues:** If you're experiencing an issue, click this button to open a webpage with a form for submitting bug reports or providing feedback. <a target=\"_blank\" href=\"https://docs.pieces.app/products/support\">You can also</a>[ visit our Support page here to do so.](https://docs.pieces.app/products/support)\n\n* **Optimize Memory Usage:** Adjusts memory allocation for PiecesOS to reduce resource consumption while maintaining performance.\n\n* **Quit:** Quits PiecesOS. To relaunch, open your terminal and type `pieces-os` and press `enter` or find the PiecesOS launcher from your application tray.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/pieces_os_main/quick_menu/linux_quick_menu.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nAs a background resource task, there are currently fewer adjustable actions, but LTM Pieces Drive and Pieces Copilot can still be accessed and utilized within Pieces plugins and extensions on Linux.",
    "lastModified": "2025-06-04T17:24:57.563Z",
    "filePath": "core-dependencies/pieces-os/quick-menu.md"
  },
  "/docs/core-dependencies/pieces-os/troubleshooting": {
    "slug": "/docs/core-dependencies/pieces-os/troubleshooting",
    "metadata": {
      "title": "PiecesOS | Troubleshooting",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Common Installation Issues\n\nFind information on troubleshooting common installation and update issues for PiecesOS.\n\n<on-device-storage />\n\n### Checking System Specifications\n\nNavigate between the grouped tabs below to find information on several common installation issues users experience when downloading and installing PiecesOS.\n\n<Tabs>\n  <TabItem title=\"macOS\">\n    **macOS | Checking System Specifications**\n\n    It is imperative to install the right version of PiecesOS depending on whether your chip is ARM or Intel-powered.\n\n    Intel and Apple Silicon (ARM) devices run on entirely separate CPU architectures, so downloading the wrong package for your Apple device can cause apps from the Pieces Suite to be rendered useless.\n\n    To determine what CPU architecture your Apple device utilizes:\n\n    1. Click the **Apple () icon** in the top-left corner of your screen.\n\n    2. Select **About This Mac**, and look for the **Overview section.** The first line will contain your CPU type:\n\n    * **Apple Silicon / ARM:** You will see an M-Series processor, e.g., `Apple M3`\n\n    * **Intel:** You will see an Intel processor, e.g., `2.6 GHz Intel Core i7`\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_checking_about_mac.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </TabItem>\n\n  <TabItem title=\"Windows\">\n    **Windows | Checking System Specifications**\n\n    It may be necessary to verify your system’s specifications if you experience ongoing issues, especially when attempting to utilize local LLMs.\n\n    To check your device specifications on Windows:\n\n    * Press the `Windows` key on your keyboard, or the `Windows` icon in the task bar\n\n    * Type `run` and hit `enter`\n\n    * Type `dxdiag` and press enter on, or click, the blue `OK` button\n\n    The **System** tab will display your processor, number of CPU cores, and memory (RAM), while the **Display** tab will list your GPU, it’s maker (NVIDIA, AMD, Intel, etc.) and the available video memory (VRAM).\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/windows_checking_hardware_specs.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </TabItem>\n\n  <TabItem title=\"Linux\">\n    **Linux | Checking System Specifications**\n\n    You can verify your system’s hardware configuration and ensure it meets recommended specifications by running specific commands in your terminal.\n\n    **Checking CPU Information**\n\n    To determine your CPU type and find other important information, type `lscpu` in your terminal and press `Enter`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/lscpu_UBUNTU.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n    **Checking GPU Information**\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/lscpi_UBUNTU.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n    Confirm that your CPU, GPU, and memory resources are sufficient for running PiecesOS and local AI models (if applicable).\n  </TabItem>\n</Tabs>\n\n<Callout type=\"tip\">\n  Once you’ve determined your CPU architecture, [download the correct PiecesOS file accordingly.](https://docs.pieces.app/products/core-dependencies/pieces-os/manual-installation#piecesos-download-links)\n</Callout>\n\n### Versions & Updates\n\nMany issues can stem from out-of-date plugins, extensions, or PiecesOS itself.\n\n<Tabs>\n  <TabItem title=\"macOS\">\n    **macOS | Updating PiecesOS**\n\n    To restart and check for updates to PiecesOS on macOS:\n\n    1. Restart PiecesOS\n\n    2. Ensure PiecesOS is running (look for the **Pieces Icon** in your system tray)\n\n    3. Check for and install available updates\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_checking_piecesos_for_updates.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </TabItem>\n\n  <TabItem title=\"Windows\">\n    **Windows | Updating PiecesOS**\n\n    To restart and check for updates to PiecesOS on Windows:\n\n    1. Locate the Pieces Icon (`P`) in your taskbar\n\n    2. Click the icon to view your update status\n\n    3. If an update is available, follow the on-screen prompt to download and install it.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/windows_checking_pieces_os_for_updates.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n    ### Updating PiecesOS (AppInstaller)\n\n    Note that currently, updating PiecesOS if installed via the `.appinstaller` (currently the *Recommended* installation method) files requires that you **quit the Pieces Desktop App**, then proceed with updating PiecesOS.\n\n    If this fails, make sure that the Pieces Desktop App is fully quit, as well as PiecesOS—then relaunch PiecesOS and proceed to download and install the update.\n  </TabItem>\n\n  <TabItem title=\"Linux\">\n    **Linux | Updating PiecesOS**\n\n    On Linux, PiecesOS and the Pieces Desktop App are distributed via snaps (for Ubuntu-based systems).\n\n    To update PiecesOS on Linux:\n\n    1. Run `snap info pieces-os` to check the current version of PiecesOS\n\n    2. Run `sudo snap refresh` to update PiecesOS if a newer version is available\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/snap_refresh_POS.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </TabItem>\n</Tabs>\n\n***\n\n### Checking OS Version\n\nHaving an out-of-date operating system version can cause a range of installation issues with PiecesOS, including scenarios in which the entire application refuses to run.\n\n<Tabs>\n  <TabItem title=\"macOS\">\n    **macOS | Checking OS Version**\n\n    Pieces Suite applications require a minimum macOS version of **macOS Ventura.** If you’re experiencing installation issues, you should check your OS version to ensure it’s up-to-date.\n\n    To determine your Apple device’s version of macOS:\n\n    1. Click the **Apple** icon in the top-left corner of your screen\n\n    2. Select `About This Mac`\n\n    3. Under your device name (i.e., MacBook Air), look for the last line on the list, titled `macOS`\n\n    The `macOS` line will report what version of macOS installed, e.g., `Sequoia 15.1.1`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_checking_about_mac.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </TabItem>\n\n  <TabItem title=\"Windows\">\n    **Windows | Checking OS Version**\n\n    Windows users may encounter installation issues for various reasons, such as out-of-date OS components or incomplete dependencies.\n\n    Before installing PiecesOS, ensure your Windows system is fully updated:\n\n    1. Click the **Start** button, then select `Settings`\n\n    2. Click `Windows Update`\n\n    3. Install any pending updates and restart your computer\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/checking_windows_ver.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </TabItem>\n\n  <TabItem title=\"Linux\">\n    **Linux | Checking OS Version**\n\n    If the Pieces Installer is not working as intended, you could have an outdated version of Ubuntu.\n\n    The minimum Ubuntu version that Pieces will run on is **Ubuntu 22.04 and above**.\n\n    To check what version of Ubuntu you’re running:\n\n    * Open **Settings** on Ubuntu\n\n    * Locate the **System** section at the bottom of the left-hand side menu and click it\n\n    * Open the **About** section and locate the **Operating System** label\n\n    This section will will display your Ubuntu version information.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/settings_about_system.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </TabItem>\n</Tabs>\n\n***\n\n### Issues Launching PiecesOS (Windows)\n\nSome users who have enabled Controlled Folder Access (CFA) as a security measure may receive a notification that Pieces is attempting to bypass this security wall.\n\nTo work around this issue, you must *add the executable path for PiecesOS* to your allowlist.\n\n<Callout type=\"alert\">\n  PiecesOS fails to launch when CFA is enabled because the executable path for the application writes data to the Documents folder.\n\n  CFA disables and blocks any request to modify files (in this case, writing & saving data), so PiecesOS cannot launch itself.\n</Callout>\n\nKeep in mind that this path references the specific PiecesOS version and will change over time as you continue to update the software.\n\nYou can also disable CFA as a security measure if you do not require it as part of an enterprise scenario or for any other reason.\n\nTo decide which apps PiecesOS has access to, you can [easily enable and disable specific sources from the Long-Term Memory Access Control](https://docs.pieces.app/products/core-dependencies/pieces-os/quick-menu#long-term-memory-access-control) panel.\n\n## Contact Support\n\nIf you’ve ensured your device meets the recommended *and* minimum specifications, you’ve performed a clean installation, updated your OS, and checked PiecesOS for updates, and you’re still experiencing issues, <a target=\"_blank\" href=\"https://docs.pieces.app/products/support\">visit our support page for more resources.</a>",
    "lastModified": "2025-06-04T17:24:57.568Z",
    "filePath": "core-dependencies/pieces-os/troubleshooting.md"
  },
  "/docs/core-dependencies/pieces-os": {
    "slug": "/docs/core-dependencies/pieces-os",
    "metadata": {
      "title": "Understanding PiecesOS",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## What is PiecesOS?\n\nPiecesOS is a background service that runs on your machine. It orchestrates local data processing and manages the house-made machine learning (ML) models used within Pieces software.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/figma_mockups/longtermmemory_piecesdrive_piecescopilot.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThere are three core pillars of Pieces functionality powered by PiecesOS: [\\[1\\] LTM-2,](https://docs.pieces.app/products/core-dependencies/pieces-os#ltm-2) [\\[2\\] Pieces Drive,](https://docs.pieces.app/products/core-dependencies/pieces-os#pieces-drive) and [\\[3\\] Pieces Copilot.](https://docs.pieces.app/products/core-dependencies/pieces-os#pieces-copilot)\n\nThese components make up the Pieces experience and are essential to the modern AI-powered workflow.\n\n## The Role of PiecesOS\n\nPiecesOS provides the intelligence and power behind Pieces software in two key ways: by (1) supplying the essential components of the Pieces infrastructure and supporting various processes, and (2) powering standalone Pieces plugins and extensions when used without the Pieces Desktop App.\n\nThis ‘brain’ is required to enable the 3 fundamental features of the Pieces development experience.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/figma_mockups/piecesos_bridging_all_products.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### How Does PiecesOS Work?\n\nPowered by PiecesOS, the Long-Term Memory (LTM-2) Engine tracks your development and workflow context using the Pieces Drive, allowing you to import and export materials as needed.\n\nThen, with Pieces Copilot, you can use cloud-based or local LLMs through Ollama to start chats that include the context you need.\n\nThis way, all AI-powered elements work together to enhance your context and creativity, especially when you need a memory boost.\n\n## Fundamental Components\n\nUsing the Pieces Desktop App or a Pieces plugin or extension for your favorite IDE requires PiecesOS, as it is a required dependency for memory and context preservation, storing and accessing materials, and interacting with generative AI.\n\n## LTM-2\n\nThe **Long-Term Memory (LTM-2) Engine** is a powerful evolution of the original LTM system, designed to store and surface workflow context from up to **nine months** in the past.\n\n<Card title=\"Want a Sneak Peak?\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745425239243/516a20d3-2664-4f22-9b32-f0f14924a87a.webp\">\n  Here’s a <a target=\"_blank\" href=\"https://tsavo.hashnode.dev/temporal-nano-model-breakthrough\">quick read on some of the nano-models</a> we develop that layer into the data retrieval pipeline for LTM-2 and the coming *LTM-2.5*\n</Card>\n\nBy combining automatic “roll-ups” with flexible “memories” browsing, LTM-2 ensures you don’t lose track of code, discussions, or references—even if you return to a project weeks or months later.\n\nThese workflow summaries can be found within the [Workstream Activities](https://docs.pieces.app/products/desktop/workstream-activity) view in the [Pieces Desktop App](https://docs.pieces.app/products/desktop).\n\n***\n\n*Pieces Copilot with LTM-2 Context —* Pieces Desktop App\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734028488469/d128a760-7e91-4dbf-8cfc-e7fc257488b7.png?auto=compress,format&format=webp&q=75\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n### Grounded Assistance\n\nLong-Term Memory is designed to boost developer productivity by providing assistance that’s temporally grounded within the concrete context of your actual workflow, allowing the Pieces Copilot to better understand your development process over time.\n\nThis helps it offer more relevant and timely responses to queries, as it has a *local database* of information to work from.\n\nSince LTM has a local database of information to work from, it can offer **relevant, timely** responses to your queries:\n\n* Recall details from older tasks or code reviews without requiring you to re-describe them.\n\n* Understand ongoing projects more holistically, anticipate next steps, and offer suggestions aligned with your actual workflow.\n\n### How Context is Captured\n\nUnder the hood, LTM monitors your workflow at the operating system level, capturing data from:\n\n* **IDEs** (e.g., changes, commits, open files)\n\n* **Browsers** (e.g., opened tabs, reference links)\n\n* **Collaboration tools** (e.g., messaging apps, file-sharing platforms)\n\nLTM (through PiecesOS) extends your ability to [enable or disable specific sources](https://docs.pieces.app/products/core-dependencies/pieces-os/quick-menu#quick-menu-actions) for data capture—this way, you can decide exactly what gets tracked and stored, providing flexibility if you have sensitive or personal workflows.\n\n<Callout type=\"tip\">\n  The data captured by LTM is processed and stored entirely on your device, so you don’t need to worry about privacy and security—[which you can read more about here.](https://docs.pieces.app/products/privacy-security-your-data)\n</Callout>\n\n### Less Context Switching\n\nTraditionally, AI tools require you to restate your environment—what project you’re working on, the code you just wrote, or the documentation you’ve referenced.\n\nHowever, with LTM-2’s temporal grounding, you have:\n\n* **Reduced Manual Input**: No more duplicating the same context or re-pasting large code blocks.\n\n* **Enhanced Continuity**: Your interactions flow seamlessly from one coding session to the next, letting you pick up exactly where you left off.\n\n* **Intuitive Interactions**: Ask questions like “What was I working on with John last week?” or “How do I fix that same CocoaPods issue from last Tuesday?”\n\nPieces Copilot can reference stored LTM data to give you real-time, **context-aware** answers.\n\n### Use Cases\n\nLearn [how to use Pieces Long-Term Memory](https://docs.pieces.app/products/quick-guides/ltm-context) to capture information from your browser and retrieve it later with a simple prompt to the Pieces Copilot:\n\n1. **Capture Website Content for Later Reference:** Automatically store information from webpages or browser tabs you’re viewing, without needing to copy-paste anything.\n\n2. **Recall Important Details with a Single Prompt:** [Ask the Pieces Copilot to retrieve content it previously saw](https://docs.pieces.app/products/quick-guides/copilot-with-context#prompt-pieces-copilot)—like secret messages, documentation, or key details from web apps.\n\n3. **Track and Summarize Research Across Multiple Sites:** Let Pieces Long-Term Memory log what you’ve read across different websites and use that context to generate summaries or next steps.\n\n4. **Simplify Context Sharing with Teammates:** Capture context once, then have the Pieces Copilot summarize it or export it for others—great for asynchronous collaboration or hand-offs.\n\n5. **Bridge Gaps Between Tools:** Pull in information from any browser-based tool or document viewer, and make it accessible directly inside Pieces Copilot chats.\n\n<Card title=\"Pieces + MCP\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744828766164/e0d722d2-f173-48e4-8de1-ec13d00769a3.png\">\n  Here’s another use case for you—try combining the power of Pieces Long-Term Memory with Model Context Protocol (MCP) servers with the brand new [Pieces MCP.](https://docs.pieces.app/products/mcp/get-started)\n</Card>\n\n## MCP Support\n\nThe Model Context Protocol (MCP) is an open framework that lets Large Language Models (LLMs) access relevant data from your device.\n\nCreated by Anthropic, MCP removes the need for custom integrations by enabling tools like Claude, ChatGPT, GitHub Copilot, and Cursor to request and receive detailed, structured context.\n\n[MCP is fully supported within the Pieces ecosystem](https://docs.pieces.app/products/mcp/get-started) and acts as the link between PiecesOS and external applications that need real-time, local context.\n\n***\n\n*Pieces MCP —> Cursor*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/pieces_os_main/cursor_change_documentation_from_conversation_2_agentic_demo_screenshot.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Workstream Activity\n\nIn the [Pieces Desktop App](https://docs.pieces.app/products/desktop), the 2nd-generation LTM comes with an incredibly powerful feature called [Workstream Activity](https://docs.pieces.app/products/desktop/workstream-activity).\n\nThe Workstream Activity view is a dedicated interface in the Pieces Desktop App that provides a continuous snapshot of your recent tasks, discussions, and code or document reviews, captured by the **Long-Term Memory (LTM-2)** **Engine.**\n\nEvery 20 minutes, LTM generates a *roll-up* that summarizes your workflow context for that period, highlighting details such as major tasks, key decisions, and follow-up actions.\n\n***\n\n*Reviewing a LTM Roll-up —* Pieces Desktop App\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1740758250747/b98dc42a-21f8-4282-b45b-4b1d7afe8573.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\nIn addition to offering a timeline of roll-ups, the Workstream Activity view [lets you search for keywords, open references or links, and even launch Pieces Copilot Chats](https://docs.pieces.app/products/desktop/workstream-activity#interacting-with-roll-ups) directly from a summarized entry.\n\nBy surfacing relevant data right when you need it, the Workstream Activity feature [eliminates the frustration of recounting your background](https://docs.pieces.app/products/quick-guides/ltm-prompting/workstream-activity) or re-pasting massive prompts every time you want AI assistance—empowering you to focus on high-value work instead.\n\n### Use Cases\n\nExplore real-world scenarios that highlight how Workstream Activities can make collaboration easy, enhance product documentation, and simplify project context sharing:\n\n1. **Capture and Share Project Contexts:** Filter activities by project keyword to create a history of actions and conversations. Share as text, markdown, or use Pieces Copilot for a summary.\n\n2. **Generate Documentation from Workflow:** Use Workstream Activity Rollups to log your process and export a searchable summary with links and context.\n\n3. **Build Standup Reports or PR Summaries:** Log ticket reviews, create an activity with links and context, and use Copilot to summarize it for updates.\n\n4. **Collaborate Asynchronously with Markdown Snapshots:** Export activities as markdown for teammates to load into their Pieces Copilot with full context.\n\n5. **Use Filtered Snapshots in Copilot Chats:** Filter activities by keyword or task and inject them into a chat for insights and documentation help.\n\n<Callout type=\"tip\">\n  This means you can revisit precisely what you worked on in the past, even if you step away from a project for *weeks* or *months.*\n\n  Check out some of the [additional use cases for the Workstream Activity view.](https://docs.pieces.app/products/quick-guides/ltm-prompting/workstream-activity)\n</Callout>\n\n### On-Device Data Storage\n\nAll data captured by the LTM is stored locally on your device. It never leaves your device or becomes accessible to anyone, including the Pieces team, unless you choose to share it.\n\nLTM applies on-device machine learning algorithms to filter out sensitive information and secrets, maintaining high levels of performance, security, and privacy.\n\nFor advanced components that require blended processing, user preferences can be set to leverage a cloud-powered Large Language Model as the Copilot’s runtime. \n\n## Pieces Drive\n\nPieces Drive is an intelligent and interactive material manager baked into PiecesOS that allows you to save, manage, and share important developer resources such as notes, useful code snippets, links, and more within your personal local repository.\n\nYou can view, edit, reuse, and share these materials via Pieces Shareable Links from this repository. \n\n***\n\n*Viewing Saved Materials with Pieces Drive —* Pieces Desktop App\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734026181487/e947ec50-4346-49f1-a967-62b218aafc47.png?auto=compress,format&format=webp&q=75\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n### Multi-Tool Integration\n\nWith PiecesOS, you can use Pieces Drive in tools like [Obsidian](https://docs.pieces.app/products/obsidian) and [Raycast](https://docs.pieces.app/products/raycast), as well as your favorite code editors, such as <a target=\"_blank\" href=\"https://docs.pieces.app/products/extensions-plugins/jetbrains\">IntelliJ</a>, <a target=\"_blank\" href=\"https://docs.pieces.app/products/extensions-plugins/visual-studio-code\">Visual Studio Code</a>, and <a target=\"_blank\" href=\"https://docs.pieces.app/products/extensions-plugins/sublime\">Sublime Text</a>.\n\nYou can also view and adjust metadata saved with your materials in the Applet View of Pieces plugins or the Pieces Desktop App.\n\n### AI-Powered Enrichment\n\nWhen you save code or other useful materials to Pieces Drive, AI automatically enriches them with a wide variety of useful metadata.\n\nThe enrichment process, powered by on-device ML models, provides:\n\n* annotations\n\n* anchors\n\n* shareable links\n\n* related links\n\n* related people\n\n* suggested searches\n\n* tags\n\n* sensitive information\n\n* date created\n\n* source of origin\n\n<Callout type=\"alert\">\n  Pieces will also identify and flag any sensitive information, like API keys or personal data, and flag this information under **Sensitive Information.**\n</Callout>\n\n## Pieces Copilot\n\nLike Pieces Drive, Pieces Copilot can be found nested within Pieces plugins and extensions or the Pieces Desktop App.\n\nIt can generate code, answer questions, add code documentation, and serve as the bridge between you and your workflow context, as captured by the LTM-2.\n\n***\n\n*Pieces Copilot for Code Generation —* Pieces Desktop App\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734028533289/f37f7075-f2d2-4a99-b948-c23fd70e7257.png?auto=compress,format&format=webp&q=75\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n### Introducing Context to Chats\n\nIf you encounter a scenario where you need to recall a specific URL to a Firestore database that was used during a live demo with another coworker, you can use Pieces Copilot (with LTM enabled) to recall that *exact link.*\n\n### Understanding Code\n\nPieces Copilot helps you comprehend complex code snippets by providing explanations, detailing how specific functions work, and suggesting alternative implementations for that code.\n\nTry asking it alternative ways to handle logging, or more robust methods of error handling—give it an entire file, an entire *project,* or just a function.\n\n### Code Generation\n\nBy specifying your requirements for a function or script, Pieces Copilot can generate code that seamlessly fits into your active file.\n\nUse Pieces Copilot and Pieces Drive together to generate boilerplate code or adjust a function. Then, save it to the Pieces Drive with enriched metadata for future use, saving time.\n\n### Error Handling\n\nDebugging, checking logs, and handling errors are often the toughest parts of coding. But with Pieces Copilot, you can debug code thoroughly using the Pieces Desktop App or your preferred plugin.\n\nContext-based debugging is powerful because generative AI, whether cloud-based or local, can understand code semantics beyond what's visible and within the project's scope to find solutions and fixes.\n\nYou might even be able to finally center that `div`—seriously, we’ve actually done it.",
    "lastModified": "2025-06-04T17:24:57.551Z",
    "filePath": "core-dependencies/pieces-os.md"
  },
  "/docs/core-dependencies": {
    "slug": "/docs/core-dependencies",
    "metadata": {
      "title": "Core Dependencies",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/figma_mockups/core_dependencies.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## What Are Core Dependencies?\n\nPieces for Developers products, including the [Pieces for Developers Desktop Application](https://docs.pieces.app/products/desktop), utilize *two core dependencies* to provide a local, secure, and efficient development experience—[PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os) and [Ollama](https://docs.pieces.app/products/core-dependencies/ollama)**.**\n\n## What Are They?\n\nTo run any Pieces software, you will need **\\[1] PiecesOS,** the backbone of the Pieces Suite. This lightweight application runs in the background of your device.\n\nIt powers the [Long-Term Memory (LTM-2) Engine](https://docs.pieces.app/products/core-dependencies/pieces-os#ltm-2), [Pieces Drive,](https://docs.pieces.app/products/desktop/drive) and the [Pieces Copilot.](https://docs.pieces.app/products/desktop/copilot)\n\nRunning local LLMs requires downloading and installing the **\\[2] Ollama** wrapper to power on-device AI capabilities, such as querying Pieces Copilot or the local inference required by the LTM-2 Engine.\n\n1. **PiecesOS**: The backbone of the Pieces suite, managing local memory, AI-driven workflow enhancements, [Pieces MCP](https://docs.pieces.app/products/mcp/get-started), and other integrations within your development environment.\n\n2. **Ollama**: A specialized wrapper that enables local AI inference, allowing Pieces Copilot and other features to leverage machine learning models *directly on your device.*\n\n## What Do They Do?\n\nThese dependencies—**PiecesOS and Ollama**—are lightweight services and engines that handle everything from local model management and context storage to advanced local inference for AI-assisted workflows.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/figma_mockups/pfd_x_piecesos_and_ollama.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nPiecesOS is **required** for all Pieces products, including:\n\n* Pieces for Developers Desktop App\n\n* Plugins & Extensions for [JetBrains](https://docs.pieces.app/products/extensions-plugins/jetbrains), [VS Code](https://docs.pieces.app/products/extensions-plugins/visual-studio-code), [Sublime Text](https://docs.pieces.app/products/extensions-plugins/sublime), [JupyterLab](https://docs.pieces.app/products/extensions-plugins/jupyterlab), [Azure Data Studio](https://docs.pieces.app/products/extensions-plugins/azure-data-studio), [Neovim](https://docs.pieces.app/products/extensions-plugins/neovim-plugin), [Raycast](https://docs.pieces.app/products/raycast), [Obsidian](https://docs.pieces.app/products/obsidian), [the Pieces CLI](https://docs.pieces.app/products/extensions-plugins/cli), and more.\n\n## Why Do We Need Them?\n\nPieces for Developers is designed with **speed and efficiency** in mind, so PiecesOS acts as the end-all between different Pieces products to minimize client-side overhead and additional code while also being secure and highly configurable.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/figma_mockups/performance_privacy_flexibility.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nOur focus on **security and flexibility** is why we’ve introduced the Ollama wrapper for local large language models—users can switch entirely to on-device generative AI, and by offloading most operations locally, the user experience benefits from:\n\n* **Instant AI-powered assistance** without cloud latency.\n\n* **100% local memory storage** with full control over data.\n\n* **Offline functionality**, ensuring a seamless experience even when disconnected from the internet.\n\n* **Lightweight, background operation**, consuming minimal system resources.\n\nHowever, you don't have to install Ollama if you don't want to use it.\n\nYou can install it if you want to use local models, which is especially useful in enterprise settings where strong device security is important.\n\n***\n\n| **Dependency** | **Purpose**                                                           | **Required?**                                     |\n| -------------- | --------------------------------------------------------------------- | ------------------------------------------------- |\n| *PiecesOS*     | Manages memory, developer material storage, and plugin communication. | Yes — this is required for all Pieces products.   |\n| *Ollama*       | Enables locally powered generative AI queries and model execution.    | No — but this is required for local AI inference. |\n\n***",
    "lastModified": "2025-06-04T17:24:57.518Z",
    "filePath": "core-dependencies.md"
  },
  "/docs/desktop/actions/keyboard-shortcuts": {
    "slug": "/docs/desktop/actions/keyboard-shortcuts",
    "metadata": {
      "title": "Keyboard Shortcuts",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Overview\n\nYou can browse the list of keyboard shortcuts below as a reference guide, or you can open the **Keyboard Shortcuts** modal by navigating to **Settings,** and scrolling to **Support** or use `⌘+;` (macOS) or `ctrl+;` (Windows/Linux).\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/extras/keyboard_shortcuts.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n## Use a Piece\n\nThese shortcuts let you quickly interact with saved material in your workspace, making it easy to download, duplicate, or copy it with context.\n\n***\n\n| **Command**         | **Windows/Linux** | **macOS**    |\n| ------------------- | ----------------- | ------------ |\n| *Download a Piece*  | `shift+ctrl+d`    | `shift+⌘+d`  |\n| *Duplicate a Piece* | `ctrl+d`          | `⌘+d`        |\n| *Copy with Context* | `ctrl+alt+c`      | `⌘+option+c` |\n\n***\n\n## Add a Piece\n\nUse these shortcuts to seamlessly add new materials into Pieces—whether you're importing files, creating new snippets, or adding collections.\n\n***\n\n| **Command**                           | **Windows/Linux**             | **macOS**   |\n| ------------------------------------- | ----------------------------- | ----------- |\n| *Add Code file to Pieces*             | `ctrl+v`                      | `⌘+v`       |\n| *Add Collections to Pieces*           | `ctrl+shift+c`                | `⌘+shift+c` |\n| *Add Code Snippet to Pieces from IDE* | `ctrl+c `*(in IDE),* `ctrl+v` | `⌘+c,⌘+v`   |\n| *Create New Material from Scratch*    | `ctrl+n`                      | `⌘+n`       |\n\n***\n\n## Manage a Saved Material\n\nThese keyboard shortcuts help you organize your content by renaming, editing, reclassifying, or even deleting a piece as needed.\n\n***\n\n| **Command**                       | **Windows/Linux**           | **macOS**             |\n| --------------------------------- | --------------------------- | --------------------- |\n| *Rename*                          | `ctrl+r`                    | `⌘+r`                 |\n| *Open quick menu*                 | `ctrl+o`                    | `⌘+o`                 |\n| *Reclassify*                      | `ctrl+y`                    | `⌘+y`                 |\n| *Delete*                          | `del`                       | `del`                 |\n| *Edit piece description*          | `shift+ctrl+n/shift+ctrl+p` | `shift+⌘+n/shift+⌘+p` |\n| *Add related links*               | `ctrl+k (if shown)`         | `⌘+k (if shown)`      |\n| *Add tags*                        | `ctrl+t (if shown)`         | `⌘+t (if shown)`      |\n| *Toggle information view*         | `ctrl+i (if shown)`         | `⌘+i (if shown)`      |\n| *Highlight sensitive information* | `ctrl+! (if shown)`         | `⌘+! (if shown)`      |\n| *Open action menu*                | `ctrl+enter`                | `⌘+enter`             |\n\n***\n\n## Editing a Piece\n\nQuickly focus on the editor, save your changes, or exit editing mode with these shortcuts, so you stay in control of your work.\n\n***\n\n| **Command**      | **Windows/Linux** | **macOS** |\n| ---------------- | ----------------- | --------- |\n| *Edit Mode*      | `ctrl+e`          | `⌘+e`     |\n| *Escape Editing* | `esc`             | `esc`     |\n| *Save Edits*     | `ctrl+s`          | `⌘+s`     |\n\n***\n\n## Share with People / Support\n\nAccess options for generating shareable links or reaching out for support directly within the app using these commands.\n\n***\n\n| **Command**               | **Windows/Linux** | **macOS** |\n| ------------------------- | ----------------- | --------- |\n| *Generate Shareable Link* | `ctrl+l`          | `⌘+l`     |\n| *Submit Feedback/Issues*  | `shift+?`         | `shift+?` |\n\n***\n\n## Navigating Pieces\n\nThese shortcuts make it simple to jump between different views and features, keeping your workflow smooth and efficient.\n\n***\n\n| **Command**                          | **Windows/Linux** | **macOS**   |\n| ------------------------------------ | ----------------- | ----------- |\n| *Focus search*                       | `ctrl+f or /`     | `⌘+f or /`  |\n| *Workflow activity view*             | `shift+ctrl+a`    | `shift+⌘+a` |\n| *Jump to first/last piece*           | `ctrl+→/ctrl+←`   | `⌘+→/⌘+←`   |\n| *Toggle between image and code view* | `t`               | `t`         |\n| *View next or previous piece*        | `→ or ←`          | `→ or ←`    |\n\n***\n\n## Zoom & Updates\n\nAdjust the UI scale and check for updates quickly with these handy shortcuts, ensuring a comfortable and current user experience.\n\n***\n\n| **Command**                     | **Windows/Linux** | **macOS**   |\n| ------------------------------- | ----------------- | ----------- |\n| *Zoom in*                       | `ctrl++`          | `⌘++`       |\n| *Zoom out*                      | `ctrl+-`          | `⌘+-`       |\n| *Check for desktop app updates* | `shift+u`         | `shift+⌘+u` |\n| *Release notes*                 | `shift+w`         | `shift+⌘+w` |\n| *View keyboard shortcuts*       | `ctrl+;`          | `⌘+;`       |\n\n***\n\n## Configuring Pieces\n\nUse these shortcuts to open settings and toggle themes, allowing you to personalize your Pieces environment with ease.\n\n***\n\n| **Command**     | **Windows/Linux** | **macOS** |\n| --------------- | ----------------- | --------- |\n| *Open Settings* | `ctrl+,`          | `⌘+,`     |\n| *Change Theme*  | `ctrl+t`          | `⌘+t`     |\n\n***",
    "lastModified": "2025-06-04T17:24:57.585Z",
    "filePath": "desktop/actions/keyboard-shortcuts.md"
  },
  "/docs/desktop/actions/power-menu": {
    "slug": "/docs/desktop/actions/power-menu",
    "metadata": {
      "title": "Power Menu Actions",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Overview\n\nThe **Power Menu** in Pieces for Developers is a dynamic command palette. It shows certain views as 'suggested' based on the task you're working on or sorts them by how often you use them.\n\n## Dynamic View-Based Actions\n\nThe **Power Menu** in Pieces for Developers is a dynamic command palette.\n\nWhen you press the Power Menu hotkey or open it from the app interface, you’ll see different actions *depending on which view or section of the app you’re currently in*.\n\nFor example:\n\n* **Pieces Drive View:** You’ll see commands related to creating, editing, or managing snippets (e.g., “Create New Material,” “Optimize Snippet,” etc.).\n\n* **Pieces Copilot View:** You’ll see commands focused on AI-driven interactions (e.g., “Ask Copilot,” “Analyze this Snippet,” etc.).\n\n* **Application & Cloud / Global Context:** Some commands (e.g., “Check for Updates,” “Manage Accounts & Cloud Integrations,” “Go to Settings”) appear in multiple views or from a global context.\n\n<Callout type=\"alert\">\n  If you search for a command in the Power Menu and you’re *not* in the view where that command is valid, **it will not appear** in your search results.\n</Callout>\n\n### Pieces Copilot\n\nYou can find lots of saved material and generative AI-focused actions when accessing the Power Menu from the Pieces Copilot view.\n\n***\n\n| **Command**                                 | **Description**                                                                 |\n| ------------------------------------------- | ------------------------------------------------------------------------------- |\n| *Manage General Copilot Settings*           | Takes you to the Pieces Copilot settings page.                                  |\n| *Manage Copilot LLM Runtime Configuration*  | Opens a modal for changing cloud and local LLMs.                                |\n| *Enter Focused Copilot*                     | Collapses the sidebar and enters Focus Mode.                                    |\n| *Launch Copilot in Browser*                 | Launches an instance of the Pieces Desktop App UI in your browser.              |\n| *New Copilot Conversation with LTM Context* | Starts a new Pieces Copilot Chat with LTM enabled.                              |\n| *New General Copilot Conversation*          | Starts a new Pieces Copilot Chat without additional prompting pipelines.        |\n| *New Contextual Copilot Conversation*       | Starts a new Pieces Copilot Chat with context.                                  |\n| *New Copilot Conversation*                  | Starts a new Pieces Copilot Chat that defaults to the set LTM behavior.         |\n| *New Generative Copilot Conversation*       | Starts a new Pieces Copilot Chat with a code-generating prompt pipeline preset. |\n| *Delete All Copilot Chats*                  | Deletes all Pieces Copilot chats.                                               |\n\n***\n\n### Pieces Drive\n\nThese actions cover everything from creating and editing your code materials to duplicating and optimizing them, ensuring your content is always well-managed.\n\n***\n\n| **Command**                                     | **Description**                                                    |\n| ----------------------------------------------- | ------------------------------------------------------------------ |\n| *Create New Material*                           | Initiate the creation of a new material (snippet or resource).     |\n| *Create New Material from Scratch*              | Build a fresh material without importing existing files.           |\n| *Create New Material from File(s)*              | Generate a material by importing local files.                      |\n| *Create New Material from Description*          | Produce a material based on user-provided descriptive text.        |\n| *View in Gallery*                               | Open the selected material in a gallery-style view.                |\n| *Edit Selected Material*                        | Modify the currently highlighted material.                         |\n| *Open Quick Menu*                               | Launch a quick-access menu for the selected material.              |\n| *Templatize Selected Material*                  | Convert the chosen material into a reusable template.              |\n| *Optimize Selected Material for Readability*    | Improve clarity and structure of the material.                     |\n| *Optimize Selected Material for Speed*          | Enhance the performance-focused aspects of the material.           |\n| *Convert Selected Material to New Language*     | Translate or adapt the material into another programming language. |\n| *Copy Selected Material*                        | Duplicate the material content to the clipboard.                   |\n| *Generate Shareable Link*                       | Create a link that can be shared externally.                       |\n| *Manage Annotations for Selected Material*      | Add or edit annotations for context and clarity.                   |\n| *Manage Related Websites for Selected Material* | Associate relevant URLs or references.                             |\n| *Manage Tags for Selected Material*             | Assign or remove tags to categorize the material.                  |\n| *Manage Sensitives for Selected Material*       | Mark or handle sensitive data within the material.                 |\n| *Manage Anchors for Selected Material*          | Attach anchor points for reference or navigation.                  |\n| *Manage Related People for Selected Material*   | Link collaborators or owners to the material.                      |\n| *Discover Related Materials*                    | Find other materials that share context or tags.                   |\n| *Duplicate Selected Material*                   | Create a direct copy of the current material.                      |\n| *Start Copilot Chat about Selected Material*    | Launch an AI-powered conversation focused on this material.        |\n| *Rename Selected Material*                      | Change the title or identifier of the material.                    |\n| *Delete Selected Material*                      | Remove the chosen material from your collection.                   |\n| *View Selected Material Context*                | Display contextual information or references.                      |\n| *Copy Context for Selected Material*            | Copy contextual details (metadata, tags, etc.) to the clipboard.   |\n\n***\n\n### Application & Cloud\n\nManage your account, cloud integrations, backups, and updates with these commands to keep the app running smoothly and securely.\n\n***\n\n| **Command**                            | **Description**                                                          |\n| -------------------------------------- | ------------------------------------------------------------------------ |\n| *Backup & Restore Data*                | Manage or recover saved backups of your Pieces data.                     |\n| *Toggle Light Mode*                    | Switch the user interface between light and dark themes.                 |\n| *Manage Accounts & Cloud Integrations* | Connect or configure your Pieces Cloud and linked accounts.              |\n| *Manage Early Access Program*          | Enroll in or manage beta features of Pieces for Developers.              |\n| *Check for Desktop App Updates*        | Manually verify if a new version of the Pieces desktop app is available. |\n| *Check for Pieces OS Updates*          | Inspect whether Pieces OS has an update ready.                           |\n| *Manage In-App Notifications*          | Configure or silence various in-app alerts and messages.                 |\n| *Manage Pieces Drive Action Toolbar*   | Customize toolbar actions for Pieces Drive integrations.                 |\n| *Turn Long-Term Memory Engine Off*     | Disable the memory engine that stores historical snippet context.        |\n| *Pause Long-Term Memory Engine*        | Temporarily stop the memory engine from updating.                        |\n| *View Auto-Saved Materials*            | Access automatically saved drafts or snippets.                           |\n| *View All Plugins*                     | See a complete list of available plugins for Pieces.                     |\n| *Clear Long-Term Memory Engine Data*   | Erase stored context or historical data from the memory engine.          |\n\n***\n\n### Navigation\n\nThese commands help you traverse the Pieces interface, letting you access different panels, search features, and integrations with ease.\n\n***\n\n| **Command**                      | **Description**                                                       |\n| -------------------------------- | --------------------------------------------------------------------- |\n| *Go to Workflow Activity*        | Open the workflow overview to see recent tasks or snippet changes.    |\n| *Go to Updates & Upcoming*       | Check upcoming features, announcements, or patch notes.               |\n| *Go to Global Search*            | Access the global search interface for snippets and materials.        |\n| *Go to Settings*                 | Open the main settings panel for Pieces for Developers.               |\n| *Go to Snippet Discovery*        | Explore recommended or newly discovered snippets.                     |\n| *Go Back*                        | Return to the previous screen or menu.                                |\n| *Go to Pieces Copilot*           | Launch or navigate to the AI-assisted Copilot interface.              |\n| *Go to Captured Context*         | View context automatically captured during snippet creation or usage. |\n| *Go Home*                        | Navigate to the main dashboard or home screen.                        |\n| *Go to VS Code Plugin*           | Redirect to the Visual Studio Code integration.                       |\n| *Go to Visual Studio Plugin*     | Redirect to the Visual Studio integration.                            |\n| *Go to JetBrains Plugin*         | Open the JetBrains family of IDE plugins.                             |\n| *Go to Chromium Extension*       | Jump to the Google Chrome browser extension.                          |\n| *Go to Microsoft Edge Extension* | Access the Edge browser extension for Pieces.                         |\n| *Go to Brave Extension*          | Navigate to the Brave browser extension.                              |\n| *Go to Opera Extension*          | Navigate to the Opera browser extension.                              |\n| *Go to Firefox Extension*        | Navigate to the Firefox browser extension.                            |\n| *Go to Obsidian Plugin*          | Explore the Obsidian plugin for Pieces integration.                   |\n| *Go to JupyterLab Plugin*        | Access the JupyterLab plugin for code snippets.                       |\n| *Go to Microsoft Teams Add-On*   | Jump to the Teams add-on for sharing snippets.                        |\n| *Go to Pieces Open Source*       | Browse the open-source repos related to Pieces.                       |\n| *Go to Pieces Discord*           | Join the Pieces Discord community for support or discussion.          |\n| *Go to Documentation*            | Open the official Pieces documentation.                               |\n| *Go to Support*                  | Access the Pieces support resources.                                  |\n| *Go to Feedback*                 | Navigate to feedback channels for product improvements.               |\n| *Report Issue or Bug*            | Submit a bug report for the Pieces team to address.                   |\n| *Share Feature Idea or Request*  | Propose a new feature or enhancement.                                 |\n\n***",
    "lastModified": "2025-06-04T17:24:57.590Z",
    "filePath": "desktop/actions/power-menu.md"
  },
  "/docs/desktop/actions": {
    "slug": "/docs/desktop/actions",
    "metadata": {
      "title": "Actions & Keyboard Shortcuts",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Overview\n\nThe Pieces Desktop App provides two primary ways to quickly perform *actions* and navigate around the app:\n\n1. **Power Menu Actions**: A context-aware command palette that surfaces different options depending on the *view* you’re in (e.g., Pieces Drive or Pieces Copilot).\n\n2. **Keyboard Shortcuts**: System or app-level keyboard shortcuts that let you instantly perform common tasks without opening any menus.\n\n## Context-Aware Power Menu\n\nWhen you open the **Power Menu**, the actions you see can change based on your current location in the app.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/actions_and_keyboard_shortcuts/actions_and_keyboard_shortcuts_MAIN/power_menu_actions_screenshot.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nHere are some examples:\n\n* **Pieces Drive Actions**: Creating, editing, and organizing saved materials, etc.\n\n* **Pieces Copilot Actions**: Generative AI-related features like analyzing or refactoring code, starting new chats, etc.\n\n* **Global/App Actions**: Account management, backup and restore, settings, etc.\n\nBecause these commands depend on the active *View*, you’ll *only see and be able to search for* relevant options in that moment.\n\n### When to Use the Power Menu\n\nThere are plenty of use cases for using the **Power Menu**—here are a couple:\n\n* **Discoverability**: If you’re unsure which action you need or want to browse available commands, simply open the menu and type a keyword.\n\n* **Context-Specific Actions**: The Power Menu dynamically shows commands that make sense in your current view (e.g., Pieces Drive vs. Copilot).\n\n## Keyboard Shortcuts\n\nFor a detailed list of all possible shortcuts and their descriptions, visit the [Keyboard Shortcuts](https://docs.pieces.app/products/desktop/actions/keyboard-shortcuts) page for multi-platform shortcut tables and action titles.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/actions_and_keyboard_shortcuts/actions_and_keyboard_shortcuts_MAIN/power_menu_actions_screenshot.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### When to Use Shortcuts\n\nShortcuts are a time-tested and often-preferred method of accomplishing individual tasks or processes for developers, creatives, and knowledge-workers alike.\n\nHere are some examples:\n\n* **Speed & Muscle Memory**: If you already know a shortcut (like ⌘+S to save), it’s the fastest way to perform routine tasks.\n\n* **Consistent, Regardless of View**: Many shortcuts (e.g., toggling edit mode or saving a snippet) work across multiple views, even though some may be view-specific.\n\n## Actions vs Shortcuts\n\nThe Pieces Desktop App provides the best of both worlds—a wealth of actions accessible from the **Power Menu** and plenty of keyboard shortcuts to boot.\n\n<Callout type=\"tip\">\n  Try to familiarize yourself with both **Power Menu** actions and **Keyboard Shortcuts** to see which better fit your workflow.\n</Callout>\n\nYou might want to try getting familiar with both, and here are two reasons why:\n\n* **Invocation**: Shortcuts are **pressed**, while Power Menu commands are **typed** and then selected.\n\n- **Scope**: Shortcuts typically work globally or in a specific view, while Power Menu commands are always **context-aware** and only appear if they’re relevant to the current workspace.",
    "lastModified": "2025-06-04T17:24:57.577Z",
    "filePath": "desktop/actions.md"
  },
  "/docs/desktop/configuration/account-and-cloud": {
    "slug": "/docs/desktop/configuration/account-and-cloud",
    "metadata": {
      "title": "Account & Cloud",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Accessing Settings\n\nTo open the **Account & Integration** and **Personal Cloud** settings, click the `Settings` gear in the bottom-left of the *default view* when opening the Pieces Desktop App.\n\nThen, navigate to either of the two sections:\n\n1. **Account & Integrations**: Manage external account connections and sign into or out of your Pieces account.\n\n2. **Personal Cloud**: Connect to or disconnect from your Personal Cloud, manage backups, and edit the URL of your personal domain.\n\n## Account Management\n\nExternal account connections in Pieces are managed through third-party services such as Microsoft, Google, or GitHub.\n\n### Viewing & Editing Linked Accounts\n\nYou can connect or disconnect third-party services from this modal.\n\n* View connected accounts (GitHub, Google, Microsoft).\n\n* Accounts are linked upon sign-in and cannot be manually edited.\n\n* Profile information (name, email, avatar) is pulled from the linked service.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/settings_account_and_cloud/account_and_cloud.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n## Personal Cloud\n\nPieces can run entirely offline, but connecting to Pieces Cloud enables real-time syncing and access across devices.\n\n### Cloud Syncing\n\nCloud syncing is *optional.*\n\nOnce connected, syncing is automatic and happens in real time. Once connected, the only way to disable syncing is by disconnecting from Pieces Cloud.\n\n<Callout type=\"tip\">\n  Any material saved in **Pieces Drive** or marked as a snippet is backed up. There are *no storage limits* on cloud-synced data.\n</Callout>\n\n### Disconnecting Personal Cloud\n\nYou can disconnect from your *Personal Cloud* at anytime by clicking the slashed `Cloud` icon, which opens up a *Disconnect Cloud* modal.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/settings_account_and_cloud/personal_cloud.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\nThere are several features which require connectivity to your *Personal Cloud,* so be sure to read through these before disconnecting:\n\n1. **Link Sharing:** The ability to generate and share links for saved materials from the **Pieces Drive.**\n\n2. **Cloud ML:** Cloud-based enrichment of metadata for saved materials.\n\n3. **Cloud Backup:** The automatic synchronization of your data to Pieces Cloud.\n\n4. **Cloud Integrations:** Your Pieces Cloud which controls your personal subdomain and other integrations.\n\n### Backup & Restore\n\nPieces allows *manual backups* of your data for long-term storage and recovery.\n\nThese data backups are *not automatic* and must be manually created—to do so, open the **Backup Manager** modal by clicking `Backup & Restore Data`.\n\nClicking `Create Backup` saves a snapshot and uploads it to Pieces Cloud.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/settings_account_and_cloud/backup_restore.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Backup Contents\n\nA Pieces backup contains the following data:\n\n| **Data Type**           | **Summary**                                                       |\n| ----------------------- | ----------------------------------------------------------------- |\n| *Snippets*              | All saved code snippets and related metadata.                     |\n| *Pieces Drive Files*    | Any files stored in Pieces Drive.                                 |\n| *User Preferences*      | Theme, UI settings, and personalization options.                  |\n| *Pieces Copilot Data*   | Recent chat history and AI context for Pieces Copilot.            |\n| *Search & Tagging Data* | User-defined tags and previous searches for quick retrieval.      |\n| *Account Connections*   | Linked GitHub, Google, or Microsoft accounts (without passwords). |\n\n<Callout type=\"alert\">\n  Backups *do not include* Pieces Cloud data that is already synced or external files which are not explicitly stored in Pieces Drive.\n</Callout>\n\n### Restoring a Backup\n\nPrevious backups are listed in the **Backup Manager** with details including:\n\n1. **Timestamp** of when the backup was created.\n\n2. **File size** of the backup.\n\n3. **Device name** that created the backup.\n\n4. **PiecesOS version** at the time of backup.\n\nClicking the `Restore` icon will recover all saved materials, settings, and preferences and return Pieces Drive and the Pieces Desktop App to that previous state.\n\n### Deleting a Backup\n\nTo delete a backup, click the `Trash` icon. Note that, when a backup is deleted, it *cannot be restored.* This is a permanent deletion.\n\n## Personal Domain\n\nWhen you’re connected to Pieces Cloud, you’re assigned a personal subdomain (e.g., [yourname.pieces.cloud](http://yourname.pieces.cloud)) for sharing snippets.\n\nThis subdomain isn’t publicly browsable like a profile page—instead, it’s prepended to any URLs you generate when sharing saved materials.\n\nYou can customize your subdomain at any time. To do so, open **Settings,** then **Personal Cloud**, and edit the input field under **Personal Domain**.",
    "lastModified": "2025-06-04T17:24:57.600Z",
    "filePath": "desktop/configuration/account-and-cloud.md"
  },
  "/docs/desktop/configuration/additional-settings": {
    "slug": "/docs/desktop/configuration/additional-settings",
    "metadata": {
      "title": "Additional Settings",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Accessing Settings\n\nTo access the general **Settings** view, navigate to the `Home Icon`, type *“settings,”* and click Go to Settings. Alternatively, you can click the `Settings` gear in the bottom-left corner of the *default view.*\n\n## Telemetry & Diagnostics\n\nYou can control whether or not Pieces collects crash data and anonymous usage information. The Pieces team uses this information to help fix bugs and improve the app.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/additional_settings/telemetry.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\nTo enable or disable **Telemetry,** check or uncheck the `Tickbox` to the right of the **Telemetry** setting.\n\n<Callout type=\"tip\">\n  Participating in telemetry helps Pieces evolve more effectively, but you can opt out for greater privacy.\n</Callout>\n\n## Notification Preferences\n\nAvoid unnecessary interruptions by customizing how and when you receive in-app alerts.\n\nYou can select the `Bell` icon under *Notifications* to enable `All`, `Critical`, or `None` to determine how many—and what type—of notifications you receive.\n\n`Critical` notifications are regarded primarily as errors and alerts—i.e., if PiecesOS is not detected (an edge case).",
    "lastModified": "2025-06-04T17:24:57.606Z",
    "filePath": "desktop/configuration/additional-settings.md"
  },
  "/docs/desktop/configuration/aesthetics-layout": {
    "slug": "/docs/desktop/configuration/aesthetics-layout",
    "metadata": {
      "title": "Aesthetics & Layouts",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Accessing Settings\n\nWhen opening the Pieces Desktop App, click the `settings gear` at the bottom left of the default view to open the Views & Layouts and Aesthetics settings.\n\nThen, navigate to either of the two sections:\n\n1. **Views & Layouts**: Manage the layout of the Pieces Desktop app to customize it according to your preferences.\n\n2. **Aesthetics**: Change the Pieces App's brightness, colors, and zoom level to ensure you're comfortable using it.\n\n## Changing Theme\n\nPieces allows users to toggle between *dark mode* and *light mode*, giving you complete control over the appearance of the Pieces Desktop App.\n\n### Dark & Light Mode\n\nIn the **Aesthetics** settings section, you can click the `Toggle Mode` button to switch between light and dark UI themes.\n\nYou can also use the keyboard shortcuts `⌘+shift+t` (macOS) or `ctrl+shift+t` (Windows/Linux).\n\n### Changing the Accent Color\n\nUsers can customize the UI with one of 35 preset accent colors.\n\nClick the `Accent Color` dropdown in the **Aesthetics** settings section, select one of the available preset colors, and the accent color will apply to interactive elements like buttons and highlights, but not to the entire UI.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/aesthetics_and_layouts/changing_colors.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Font & UI Size\n\nUse the `Font Size` setting to adjust the size of all text.\n\n\\`To zoom in, use `⌘+,+` (macOS) or `ctrl+,+` (Windows/Linux)—to zoom out, use `⌘+,-` (macOS) or `ctrl+,-` (Windows/Linux).\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/aesthetics_and_layouts/changing_font_size.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n## Adjusting Layout\n\nThere are several default layout behaviors to adjust within the **Views & Layouts** page.\n\n<Callout type=\"tip\">\n  Theme changes are automatically saved when adjusted, and settings are stored locally, not synced with Pieces Cloud.\n</Callout>\n\n### Default Layout\n\nIn this section, you can select the `Default Layout` option to determine which interface appears when Pieces Desktop first launches.\n\nFor example, setting it to Pieces Copilot allows you to start with the default generative AI interface, whereas Pieces Drive sets the default interface to the saved materials view on application launch.\n\n### Default List View Sort\n\nIn this section, the `Default List View Sort` option lets you arrange materials in *List View* based on `Recent`, `Suggested`, or `Alphabetical`, and `Language` criteria.\n\nThis default sorting ensures you see new or popular items first (or in whichever order best suits your workflow), without needing to manually re-sort each time.\n\n### Default Gallery View Sort\n\nThe **Views & Layout** settings also include `Default Gallery View Sort`, allowing you to specify how items appear in *Gallery View* (e.g., sorted by `Most Recent` or `Alphabetical`).\n\nIf you frequently rely on visual cues, this setting ensures you’ll quickly spot the snippets or media you need, saving time on manual sorting.\n\n### Default Search Mode\n\nYou can pick `Default Search Mode` to define which search method Pieces uses by default.\n\nFor instance, selecting Neural Code Search (NCS) lets you enter natural language queries—perfect for quickly finding code snippets or references without remembering exact filenames or tags.\n\nThis is opposed to *Full-Text Search (FTS)* or *Search with Snippet*, which are more specific, hyper-focused querying workflows.\n\n### Confirmation Settings\n\nConfirmation prompts can protect you from unintended deletions or other irreversible changes.\n\nEnabling or adjusting `Confirmation Settings` determines whether Pieces requests an extra step (such as “Are you sure?”) before making significant modifications.\n\n### Metrics Summary Settings\n\nEach setting in the **Metrics Summary** settings view addresses a distinct scenario or user action within *Pieces Drive*.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/aesthetics_and_layouts/metrics_settings.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\nUnder the *Gallery View*, for instance, `Smart Layout` automatically displays the context summary for smaller snippets, while `All` shows summaries whenever you navigate or hover over snippet icons.\n\nThe `Navigating` option triggers summaries only when you scroll or switch between snippets in the *Gallery View*, and `Hovering` keeps them hidden until you hover over the context icon.\n\nMixing and matching these options allows you to highlight crucial snippet details precisely when needed.",
    "lastModified": "2025-06-04T17:24:57.610Z",
    "filePath": "desktop/configuration/aesthetics-layout.md"
  },
  "/docs/desktop/configuration/copilot-and-machine-learning": {
    "slug": "/docs/desktop/configuration/copilot-and-machine-learning",
    "metadata": {
      "title": "Pieces Copilot & Machine Learning",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Accessing Settings\n\nTo open the Pieces Copilot Chats and Machine Learning configuration screens, click the `Settings` gear in the bottom-left corner of the Pieces Desktop App’s main view.\n\nThen, navigate to either of the two sections:\n\n1. **Copilot Chats:** Manage the Pieces Copilot runtime, accent color, LTM defaults, and more.\n\n2. **Machine Learning**: Configure auto-enrichment and control how Pieces handles cloud vs. local ML processing.\n\n## Copilot Chats\n\nWithin the *Pieces Copilot Chats* section, you can adjust your Copilot’s behavior, manage the underlying AI model, and clear chat history as needed.\n\n### Manage LLM Runtime\n\nThe `Manage Copilot LLM Runtime` option allows you to switch between available AI models (e.g., “GPT-4o Mini”) or configure any new runtimes provided by Pieces—both *cloud* and *local.*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/copilot_and_ml/copilot_chats.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n<Callout type=\"tip\">\n  Switching models can be useful if you want to try different levels of quality or speed.\n</Callout>\n\n### Reset Active Runtime\n\nUse the `Hard-Reset Active Runtime` button if the Pieces Copilot stops generating responses or behaves unexpectedly.\n\nThis effectively *restarts* the AI model so that it can begin processing requests again.\n\n### Accent Color\n\nThe **Accent Color** sets a highlight color for specific elements, like text bubbles and other view-based UI elements within the [Pieces Copilot](https://docs.pieces.app/products/desktop/copilot) view or other views.\n\nFor more information about customizing your UI colors, visit our [Aesthetics & Layouts](https://docs.pieces.app/products/desktop/configuration/aesthetics-layout) documentation.\n\n### Default LTM Behavior\n\nEnable or disable `Use Long-Term Memory (LTM-2) Context by Default` to control whether Pieces Copilot automatically references your recent workflow context as captured by the LTM.\n\nTurning this off means the AI will respond without leveraging your workflow context unless manually enabled when starting a new Pieces Copilot Chat.\n\n### Delete Chats\n\nClick `Delete All Copilot Chats` to remove all chat history stored on your device.\n\nThis is useful if you'd like to start a new conversation or eliminate old ones that are no longer needed.\n\n## Machine Learning\n\nThe *Machine Learning* section governs how Pieces enriches your saved materials, controls local vs. cloud-based ML resources, and manages on-device LTM.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/copilot_and_ml/machine_learning.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Auto-Enrichment Behavior\n\n`Auto-Enrichment` settings let you control how much metadata is automatically attached to code snippets and other saved materials.\n\nPieces can add *tags, related websites, hints,* and *references to people* (e.g., authors of code) at varying levels of detail: `No Enriched Data`, `Low`, `Medium`, and `High`.\n\n<Callout type=\"info\">\n  By default, all auto-generated metadata settings are set to `Medium`.\n\n  Lowering these levels may be beneficial if you prefer minimal automatic annotations or need to limit external lookups.\n</Callout>\n\n### Machine Learning (ML) Processing\n\nUnder *ML Processing*, you can fine-tune how Pieces uses local and cloud resources to power various functions and processes within the Pieces software experience.\n\n### Enrichment Mode\n\nYou can select whether or not Pieces utilizes cloud or local models, or a mix of both, for saved material enrichment.\n\n* `Blended`: Uses both local and cloud resources for material enrichment.\n\n* `Local`: Restricts enrichment to on-device analysis and generation *only*—the best case scenario for privacy-forward workflows.\n\n* `Cloud`: Optimized for speed, Pieces sends your material data to Pieces Cloud for processing.\n\n<Callout type=\"tip\">\n  Selecting the mode that best fits your security and performance needs ensures that Pieces processes your snippets in the most efficient or privacy-conscious way possible.\n</Callout>\n\n### LTM-2 Engine\n\nPieces employs an on-device **Long-Term Memory (LTM-2) Engine** to capture recent contexts, usage patterns, and snippet details for more intelligent Copilot suggestions.\n\nConfigurable behaviors include:\n\n* `On`: LTM is fully active and enabled by default and on start-up.\n\n* `Off`: Disables LTM entirely.\n\n* `Pause`: Provides options for halting the LTM for 15 minutes, 1 hour, 6 hours, 12 hours, or 24 hours.\n\nWhile *paused* or *off,* Pieces Copilot won’t use your workflow context to inform suggestions or provide more accurate information in generative AI responses.\n\n[You can read more about the LTM-2 Engine here.](https://docs.pieces.app/products/core-dependencies/pieces-os#ltm-2)\n\n### Clearing LTM-2 Data\n\nClick the `Trash` icon next to `Clear Long-Term Memory Engine Data` to remove any persisted context that LTM has gathered over time.",
    "lastModified": "2025-06-04T17:24:57.613Z",
    "filePath": "desktop/configuration/copilot-and-machine-learning.md"
  },
  "/docs/desktop/configuration/mcp": {
    "slug": "/docs/desktop/configuration/mcp",
    "metadata": {
      "title": "Model Context Protocol (MCP) Servers",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Accessing MCP Settings\n\nTo access the MCP configuration screen, click the **Settings** gear icon located in the bottom-left corner of the Pieces Desktop App’s main view.\n\nFrom there, navigate to **Model Context Protocol (MCP)**.\n\nInside this tab, you can view the server URL, check the MCP server version, and quickly access MCP documentation.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/mcp/model_context_protocol_pfd_settings.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### MCP Server URLs\n\nIn the MCP Settings, you'll find the **Server URLs** section.\n\nThis URL is what your development tools or AI applications, such as [Cursor](https://docs.pieces.app/products/mcp/cursor) or [GitHub Copilot](https://docs.pieces.app/products/mcp/github-copilot), will use to communicate directly with your local PiecesOS MCP server.\n\nYou can copy this URL by clicking the *copy* icon next to the URL text box and use it to configure integrations in compatible IDEs and code editors.\n\n### MCP Server Version\n\nThe version displayed under the server URL indicates the currently running MCP protocol version.\n\nEnsure your [tools and integrations](https://docs.pieces.app/products/mcp/get-started#getting-started) are compatible with this version to maintain smooth communication.\n\n### View MCP Documentation\n\nClick `View Documentation` to access detailed guides that explain how to leverage MCP integrations with popular development environments, such as Cursor and GitHub Copilot.\n\nThis documentation covers setup instructions, example scenarios, and troubleshooting tips for efficient MCP usage.\n\nHere are quick examples of how MCP enhances your coding and debugging experiences:\n\n* **Context-Rich Debugging**: Instantly retrieve logs, historical debugging notes, or team discussions directly from PiecesOS when troubleshooting within Cursor.\n\n* **Contextual Queries**: Access historical code implementations, error resolutions, or previously encountered bugs within GitHub Copilot for quicker coding solutions.\n\nFor more use cases, refer to this [MCP documentation.](https://docs.pieces.app/products/mcp/get-started)\n\n***\n\n*Pieces MCP → Cursor*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/misc/cursor_ask_about_youtube_tutorial.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n***",
    "lastModified": "2025-06-04T17:24:57.616Z",
    "filePath": "desktop/configuration/mcp.md"
  },
  "/docs/desktop/configuration/support": {
    "slug": "/docs/desktop/configuration/support",
    "metadata": {
      "title": "Support & Information",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Accessing Settings\n\nTo access the general **Settings** view, navigate to the `Home Icon` and type *settings* then click `Go to Settings`—or you can click the `Settings` gear in the bottom-left corner of the *default view.*\n\n## Discover & Support Sections\n\nNo matter which tab you select in **Settings** (e.g., [Machine Learning](https://docs.pieces.app/products/desktop/configuration/copilot-and-machine-learning#machine-learning), [Telemetry](https://docs.pieces.app/products/desktop/configuration/additional-settings#telemetry--diagnostics), [Aesthetics](https://docs.pieces.app/products/desktop/configuration/aesthetics-layout)), you’ll always see three smaller sections at the bottom of that specific settings view. \n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/support_and_information/support_and_feedback.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\nThese three sections are “sticky,” meaning they’re appended to the end of every Settings tab for quick access.\n\n### Support\n\nLinks to support resources and keyboard shortcuts.\n\n***\n\n| **Button / Action**                                                                                 | **Explanation**                                    |\n| --------------------------------------------------------------------------------------------------- | -------------------------------------------------- |\n| [*Documentation*](https://docs.pieces.app)                                                          | Opens Pieces’ official documentation.              |\n| <a target=\"_blank\" href=\"https://github.com/pieces-app/support/issues\">*Submit Feedback/Issues*</a> | Redirects you to a feedback or bug-reporting flow. |\n| [*Keyboard Shortcuts*](https://docs.pieces.app/products/desktop/actions/keyboard-shortcuts)         | Displays or links to a list of relevant hotkeys.   |\n\n***\n\n### Desktop App Information\n\nCheck the active app version, check for updates, get platform information, and launch onboarding if you want to familiarize yourself with the fundamentals of the Pieces Desktop App.\n\n***\n\n| **Button / Action**             | **Explanation**                                                         |\n| ------------------------------- | ----------------------------------------------------------------------- |\n| *Desktop App Version*           | Shows the installed version of the Pieces Desktop App.                  |\n| *Check for Desktop App Updates* | Manually triggers an update check to see if a new version is available. |\n| *Launch Onboarding*             | Re-opens the guided setup workflow.                                     |\n| *Platform*                      | Displays OS & platform details (e.g., macOS 15.1.1).                    |\n\n***\n\n### PiecesOS Information\n\nView the installed PiecesOS version, check for updates and see what port PiecesOS is calling to.\n\n***\n\n| **Button / Action**          | **Explanation**                                         |\n| ---------------------------- | ------------------------------------------------------- |\n| *PiecesOS Version*           | Displays the currently installed version of PiecesOS.   |\n| *Check for PiecesOS Updates* | Manually triggers an update check for PiecesOS.         |\n| *PiecesOS Port*              | Lists the port number currently being used by PiecesOS. |\n\n***",
    "lastModified": "2025-06-04T17:24:57.620Z",
    "filePath": "desktop/configuration/support.md"
  },
  "/docs/desktop/configuration": {
    "slug": "/docs/desktop/configuration",
    "metadata": {
      "title": "Configuration",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Accessing Settings\n\nThere are several ways to open up **Settings** in the Pieces Desktop App, where you can adjust account and cloud behaviors, check your application versions, change views and layouts, and more.\n\nYou can access **Settings** by clicking the profile picture icon in the upper-right and clicking `All Settings`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/opening_settings_via_pfp.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  Or, click the *Settings Gear* icon in the bottom-left corner to open the **Settings** view.\n</Callout>\n\nYou can also open up the **Power Menu** and search for *“settings”,* then click `Go to Settings` using the shortcuts in the table below:\n\n| **macOS**  | **Windows**  | **Linux**    |\n| ---------- | ------------ | ------------ |\n| `⌘+return` | `ctrl+enter` | `ctrl+enter` |\n\n### Account & Cloud\n\nThe [Account & Cloud](https://docs.pieces.app/products/desktop/configuration/account-and-cloud) section manages your Pieces account, cloud services, and backups. This ensures a seamless connection across devices and helps keep your data secure.\n\n<Steps>\n  <Step title=\"Cloud Management\">\n    Connect and sync with Pieces Cloud for *real-time access* across multiple devices, or monitor your connection status and manage sync preferences.\n  </Step>\n\n  <Step title=\"Database Backups\">\n    Automatically backup your snippets, files, and projects or restore previous versions in case of data loss.\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/account_and_cloud.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Pieces Copilot & Machine Learning\n\nThese [Pieces Copilot and Pieces Drive](https://docs.pieces.app/products/desktop/configuration/copilot-and-machine-learning) configuration sections let you adjust default behaviors related to metadata, LTM context, models, and local model processing.\n\n<Steps>\n  <Step title=\"Runtime\">\n    Change models, reset the active runtime if facing issues, and use Long-Term Memory (LTM) context by default, and more.\n  </Step>\n\n  <Step title=\"Enrichment\">\n    Adjust the level of auto-enrichment performed locally when Pieces Drive generates and assigns metadata to saved materials.\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/copilot_chats.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Model Content Protocol (MCP)\n\nFrom this view, you can access the [*HTTP Server URL* for the Pieces MCP.](https://docs.pieces.app/products/desktop/configuration/mcp) This allows you to set up productivity tools and code editors that support this protocol with context directly from your local Pieces database.\n\nYou'll also find a *Book* icon that links you to documentation on getting started with the Pieces MCP and information about available integrations.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/configuration/mcp/model_context_protocol_pfd_settings.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Aesthetics & Layouts\n\nThe [Aesthetics & Layouts](https://docs.pieces.app/products/desktop/configuration/aesthetics-layout) section allows you to customize the visual appearance of the Pieces Desktop App, including dark and light modes, UI scaling, accent color, and more.\n\nYou can also set the default UI of different views and adjust default sorting and listing methods for displaying snippets & summaries\n\n<Steps>\n  <Step title=\"Dark & Light Mode\">\n    Adjust auto-switch settings based on system preferences.\n  </Step>\n\n  <Step title=\"Accent Colors\">\n    Select from various colors to adjust Pieces Copilot chat accents and other visual elements.\n  </Step>\n\n  <Step title=\"Font & UI Scaling\">\n    Increase or decrease font size and UI size for different screen resolutions.\n  </Step>\n\n  <Step title=\"Layout Settings\">\n    Set the default view to Pieces Copilot or Pieces Drive, default search mode, and default gallery & list views.\n  </Step>\n\n  <Step title=\"Default Search Mode\">\n    Choose between *Blended, Full-Text, Neural Code Search,* or *Search-with-Material* as the default search mode for the **Search Bar.**\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/aesthetics_view.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Additional Settings\n\nThe [Additional Settings](https://docs.pieces.app/products/desktop/configuration/additional-settings) section contains advanced configurations that allow you to fine-tune Pieces for Developers to suit your workflow.\n\n<Steps>\n  <Step title=\"Telemetry & Diagnostics\">\n    Enable or disable anonymous usage data collection and manage crash reporting and performance monitoring.\n  </Step>\n\n  <Step title=\"Notifications\">\n    Customize which in-app alerts you receive and the frequency of notification pop-up modals.\n  </Step>\n\n  <Step title=\"Shortcuts\">\n    View the default shortcuts for Pieces Desktop App functionality specific to your device’s operating system (OS).\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/telemetry.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Support & Information\n\nWhenever you access the **Settings** view and click on a specific section—i.e., *Machine Learning, Telemetry,* or *Copilot Chats*—three smaller Support & Information sections are appended to the end of the focused settings view.\n\nThese always-available sections are:\n\n1. **Support**: Contains links to documentation, submitting feedback or reporting issues, and all keyboard shortcuts.\n\n2. **Desktop App Information**: This section lists the Pieces Desktop App version, lets you check for updates, launches onboarding, and provides your platform information.\n\n3. **PiecesOS Information**: This page lists your PiecesOS version, lets you check for updates, and lists the active PiecesOS port.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/additional_settings.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />",
    "lastModified": "2025-06-04T17:24:57.593Z",
    "filePath": "desktop/configuration.md"
  },
  "/docs/desktop/copilot/configuration": {
    "slug": "/docs/desktop/copilot/configuration",
    "metadata": {
      "title": "Configure Pieces Copilot",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Adjusting Models & Appearance\n\nLearn how to switch between local and cloud-hosted models, change the aesthetics and layout of your Pieces Copilot chat view, and more.\n\n## Managing the LLM Runtime\n\nThere are dozens of local and cloud-hosted LLMs to choose from within the Pieces Desktop App—here’s how to do it.\n\n### LLM Runtime Modal\n\nAt the bottom left of the Pieces Copilot view is the active model—by default you’ll see *GPT4o-Mini.*\n\nClicking this button opens the **Manage Copilot LLM Runtime** modal, where you can enter your own API key or [select local and cloud-hosted LLMs served through Pieces.](https://docs.pieces.app/products/core-dependencies/ollama#using-local-vs-cloud-models)\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/configuring_pieces_copilot/open_llm_modal.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Model Selection\n\nPieces Copilot allows you to choose between cloud-hosted models and on-device models.\n\nEach option has its benefits:\n\n* **Cloud LLMs:** Typically offer state-of-the-art performance and are ideal for complex queries requiring deep context.\n\n* **On-Device LLMs:** Ensure data privacy and are optimal for offline or air-gapped environments.\n\nYou can read this documentation containing [all local and cloud-hosted LLMs served through the Pieces Desktop App.](https://docs.pieces.app/products/core-dependencies/ollama/supported-models)\n\n### Resetting Conversations\n\nIn case you need a fresh start or want to clear the current context, the interface includes options (accessible via the **Chat Options** menu) to reset the conversation.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/configuring_pieces_copilot/resetting_conversation.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis is particularly useful when you want to switch focus or change the conversation pipeline.\n\n### Search Functionality\n\nA search bar labeled *Find Cloud LLMs* lets you browse available cloud-based models—then, switching to *On-Device,* you can search through the list of local models available with the [optional Ollama client.](https://docs.pieces.app/products/core-dependencies/ollama)\n\n***\n\n<Callout type=\"alert\">\n  Ollama is required to use local LLMs with Pieces software.\n\n  If you don’t have it installed, that’s okay—you can download and install it through the Pieces Desktop App by clicking on the `Active Model` button.\n</Callout>\n\n***\n\nTo switch between the *Cloud* and *On-Device* model list, click the slider next to the search bar.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/configuring_pieces_copilot/gifs/opening_llm_modal_scroll.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nOnce toggled, the search bar updates to *Find On-Device LLMs* and shows a message either prompting you to install Ollama or indicating that Ollama is installed and ready, along with its version number.\n\n***\n\n<Callout type=\"tip\">\n  While Ollama is required for on-device generative AI, you do not need it to use the Long-Term Memory Engine.\n\n  This distinction ensures that you can benefit from local Long-Term Memory features even if you choose not to use on-device LLMs.\n</Callout>\n\n***\n\n### Adjusting Chat Appearance\n\nWithin the same modal area, a `Settings Gear` icon gives you access to personalization options.\n\nFrom here, you can choose a chat accent color to customize the look and feel of your Copilot interface, and enable or disable the option to enable LTM by default when starting a new chat.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/configuring_pieces_copilot/gifs/changing_chat_accent.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nWhen enabling Long-Term Memory Context by default, every new chat automatically incorporates your saved long-term memory context, ensuring that your conversations are always informed by your previous work.\n\nYou can also use the keyboard shortcut `cmd+shift+t` (macOS) or `ctrl+shift+t` (Windows/Linux) to toggle the *Dark/Bright* theme for the Pieces Desktop App.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/configuring_pieces_copilot/pfd_day_mode_demo.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:57.630Z",
    "filePath": "desktop/copilot/configuration.md"
  },
  "/docs/desktop/copilot/integration": {
    "slug": "/docs/desktop/copilot/integration",
    "metadata": {
      "title": "Integrating Context & Projects",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Using Context with Pieces Copilot\n\nAdding context to Pieces Copilot chats makes responses significantly more relevant and useful—especially when that context is pulled directly from your workflow.\n\n<Card title=\"Want to learn more about using LTM Context?\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743103872340/1b9ffce3-f465-4c7e-afd8-5e98d2a8fba5.png\">\n  Read this [LLM Prompting Guide](https://docs.pieces.app/products/quick-guides/ltm-prompting/tips) or learn how to use [Pieces Copilot with LTM Context](https://docs.pieces.app/products/quick-guides/copilot-with-context) via these helpful Quick Guides.\n</Card>\n\n## Enriching Chats with LTM-2 Context\n\nIntegrating context ensures Pieces Copilot isn’t answering in a vacuum.\n\nBy including Long-Term Memory data and project-specific resources, you can improve the accuracy of generative AI responses, reduce context-switching, work more effectively.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/context_and_project_integration/enriching_chats_with_context_closeup.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### LTM Context Toggle\n\nBelow the *Set Context* section of the main Pieces Copilot view, you have the option to enable LTM Context.\n\nWhen turned on, your long-term memory data—captured by PiecesOS from your previous workflow—is automatically injected into every new chat.\n\nThis means that even if you start a fresh conversation, Pieces Copilot has access to important context from earlier sessions.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/context_and_project_integration/gifs/enabling_context_in_new_chat.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Adding Folders\n\nClick the `Folders` button in the *Set Context* area.\n\nThis opens the **Manage Copilot Context** modal, where you can add local code directories.\n\nTo do so, click `Add Folders` to open your Finder (macOS) or File Explorer (Windows/Linux).\n\nSelect the directories that you want the Pieces Copilot to use as context. This is especially useful when working on large projects where entire folders contain valuable code references.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/context_and_project_integration/gifs/adding_folder_as_directory_context.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Adding Files\n\nSimilarly, clicking the `Files` button opens the same modal so you can select individual files from anywhere on your device.\n\nClick `Add Files` to select specific code files.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/context_and_project_integration/gifs/adding_several_files_as_context%20%20.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThese files are then parsed by Pieces Copilot to provide precise answers related to your code.\n\n### Adding Websites\n\nIf you need to reference external code on a website—like on Stack Overflow—click the `Add Websites` option, which is accessible via the [Quick Action menu.](https://docs.pieces.app/products/desktop/drive/enrichment-and-metadata#using-the-quick-menu)\n\nThis opens a modal where you can enter a website URL.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/context_and_project_integration/gifs/adding_websites_as_context_demo.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nWebsites with code snippets or technical documentation can then be used as contextual material for your Pieces Copilot queries.\n\n## Enriching Chats with Saved Materials\n\nYou can also add saved materials from the [Pieces Drive](https://docs.pieces.app/products/desktop/drive) into your Pieces Copilot Chat as context for the conversation.\n\n### Selecting Saved Materials\n\nClicking the `Saved Materials` button opens up an interface that displays a clickable list of code snippets and documents previously saved in Pieces Drive.\n\nChoose the relevant saved material that you’d like to include in your current conversation.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/context_and_project_integration/gifs/selecting_saved_materials_add_as_context.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis ensures that the Pieces Copilot is aware of your pre-curated, AI-enriched materials and can reference them in its responses.",
    "lastModified": "2025-06-04T17:24:57.640Z",
    "filePath": "desktop/copilot/integration.md"
  },
  "/docs/desktop/copilot/interaction": {
    "slug": "/docs/desktop/copilot/interaction",
    "metadata": {
      "title": "Using Pieces Copilot",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Chat Interface & Navigation\n\nWhen opening the Pieces Desktop App after installation, you are first presented with a default view—the Pieces Copilot.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/interacting_with_pieces_copilot/default_view_is_pieces_copilot.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis view is the central hub from which you can start new chats, access previous chats, and configure Long-Term Memory, models, and context to suit the task at hand.\n\n## Main Chat Window\n\nThe central area of the Pieces Copilot view is a blank chat where you can start a new conversation.\n\nTo get the most out of generative AI using local or cloud models through Pieces Copilot, make sure you [check out our LLM Prompting Guide.](https://docs.pieces.app/products/quick-guides/ltm-prompting/tips)\n\nAt the top of the window, you will see a set of three *Suggested Prompts*—these dynamic prompts adapt based on your topics common to your workflow (if captured by LTM) and serve as a quick way to begin engaging with the AI.\n\nDirectly above the chat input field, a *Set Context* area provides four buttons:\n\n* `LTM Context: Off / On`**:** Toggle whether to automatically include long-term memory context from your workflow.\n\n* `Folders`**:** Opens a modal to add local code directories.\n\n* `Files`**:** Opens a modal to add individual files.\n\n* `Saved Materials`**:** Lets you pick items previously saved in Pieces Drive.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/interacting_with_pieces_copilot/gifs/main_chat_window_demo.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThese buttons help you easily inject context into your chat so Pieces Copilot can deliver more accurate and relevant responses.\n\n<Card title=\"Hey!\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743104963167/e79b8868-71ad-4763-9d32-dec2f99236df.png\">\n  Do you know how to find specific LTM-sourced information, get deeplinks, and generate summaries of projects you’ve been working on with Pieces Copilot? If you don’t, [check out this Quick Guide.](https://docs.pieces.app/products/quick-guides/ltm-prompting/examples)\n</Card>\n\n## Input Field and Quick Actions\n\nInside the Pieces Copilot Chat view, there are several quick actions you can utilize that let you proactively adjust chat context—like toggling the LTM state, adding folders or websites containing code, and more.\n\n### Text Input Field\n\nAt the bottom of the chat window is a text input field with the placeholder:\n\n```markdown\n“Paste code, drag and drop an image, or ask a technical question…” \n```\n\nThis is your primary area for entering queries or pasting code, and is flanked by buttons on either side for adding context or using other in-chat tools:\n\n* To the *left* of the input field is the Quick Action button, which contains a modal menu with quick access to several context-adding actions.\n\n* To the *right,* you’ll find actions to insert code blocks into the chat or extract code from screenshots.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/interacting_with_pieces_copilot/gifs/left_right_side_chat_button_demo_all.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Left-Side Quick-Action Button\n\nJust to the left of the input field is a **Chat Bubble** icon.\n\nClicking it opens a [context menu](https://docs.pieces.app/products/desktop/copilot/integration) with a list of quick actions:\n\n1. `LTM Context`**:** Toggle the current state—*on* or *off.*\n\n2. `Add Files`**,** `Add Folders`**,** `Add Snippets`**,** `Add Websites`**:** Each option opens the corresponding modal for adding context from local resources or the web.\n\n3. `Add Messages`**:** (Currently grayed out—coming soon.)\n\n[Read more about adding context to your Pieces Copilot Chats.](https://docs.pieces.app/products/desktop/copilot/integration#adding-folders)\n\n### Right-Side Tools\n\nNext to the text input field, you’ll find:\n\n1. A `{ }` button that, when clicked, automatically inserts a code block template (using triple backticks) for pasting code.\n\n2. A square button featuring an `“A”` icon that enables you to extract code from screenshots. When you click this button, your file explorer opens, allowing you to select an image that contains code.\n\n## Chat Options\n\nThere are 2 kinds of chat options available within the Pieces Copilot Chat view—actions which let you pin, refresh or delete chats, and the `New Chat` button with optional **Chat Pipelines.**\n\n### Chat Options Menu\n\nAt the top right corner of the active chat window, a vertical ellipsis (three stacked dots) reveals additional options:\n\n1. `Pin Chat`**:** Keeps the current chat pinned at the top of your sidebar.\n\n2. `Refresh`**:** Reloads the chat if the AI stops generating a response.\n\n3. `Delete`**:** Removes the chat from your history.\n\n<Callout type=\"alert\">\n  These options are available inside of an existing chat with user input and AI generations—i.e., an *active* chat. You will not see these options when inside a blank chat template.\n</Callout>\n\n### New Chat & Pipelines\n\nIn the left sidebar, the `New Chat` button features a dropdown arrow.\n\nWhen clicked, it presents you with 3 options:\n\n***\n\n| **Chat Pipeline**                       | **Type**                                         | **Use Case**                                                                                                          |\n| --------------------------------------- | ------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------- |\n| *Generally discuss technical topics*    | Multipurpose                                     | For discussing more multi-modal, general but technical topics.                                                        |\n| *Ask questions about a local code base* | Project-oriented comprehension and documentation | An optimized LLM pathway for keeping generations relevant to your code context. Useful for learning new codebases.    |\n| *Generate code for a local project*     | Project-oriented code generation                 | Oriented for contextualized code generation—works best when local code repositories are added to the chat as context. |\n\n***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/interacting_with_pieces_copilot/chat_pipelines_dropdown.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  You can select one of these chat pipelines as the default pipeline when creating new chats.\n</Callout>\n\n## Sidebar & Chat History\n\nWhen the Pieces Copilot view is opened, you are presented with a *left-hand sidebar* that displays your past chat conversations arranged chronologically.\n\nThis allows you to quickly revisit previous interactions by clicking on a chat entry with its date stamp.\n\nAn icon at the top of the sidebar lets you collapse or expand this panel as needed—called **Focus Mode**—so you can focus solely on your current conversation if desired.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/interacting_with_pieces_copilot/gifs/sidebar_chat_history_focus_mode_demo.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:57.644Z",
    "filePath": "desktop/copilot/interaction.md"
  },
  "/docs/desktop/copilot/multiple-environments": {
    "slug": "/docs/desktop/copilot/multiple-environments",
    "metadata": {
      "title": "Pieces Copilot in Other Environments",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Using Pieces Copilot in IDEs\n\nPieces is integrated into several of the most popular IDEs, code editors, and productivity tools, so you can use Pieces however you like—no drawbacks.\n\n## Cross-Environment Access\n\nPieces for Developers has launched several plugins and extensions for popular code editors and IDEs, such as Visual Studio Code and JetBrains, and productivity tools, like Obsidian.\n\nIn these plugins and extensions, you can also access Pieces Drive and PiecesOS-enabled LTM context alongside Pieces Copilot, giving you the full set of tools to use.\n\n### Plugins & Extensions\n\nClick the links below to view up-to-date or upcoming documentation for all Pieces for Developers products, including plugins and extensions.\n\n***\n\n| **Plugin**                                                                                 | **Extension**                                                                                |\n| ------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------- |\n| [JetBrains](https://docs.pieces.app/products/extensions-plugins/jetbrains)                 | [Visual Studio](https://docs.pieces.app/products/extensions-plugins/visual-studio)           |\n| [Sublime Text](https://docs.pieces.app/products/extensions-plugins/sublime)                | [Visual Studio Code](https://docs.pieces.app/products/extensions-plugins/visual-studio-code) |\n| [Azure Data Studio](https://docs.pieces.app/products/extensions-plugins/azure-data-studio) | [Web Extension](https://docs.pieces.app/products/web-extension)                              |\n| <a target=\"_blank\" href=\"https://pieces.app/plugins/neovim\">Neovim</a>                     | [JupyterLab](https://docs.pieces.app/products/extensions-plugins/jupyterlab)                 |\n\n***\n\nAdditionally, find documentation here for our other productivity & collaboration tools:\n\n* [Pieces CLI](https://docs.pieces.app/products/extensions-plugins/cli)\n\n* [RayCast](https://docs.pieces.app/products/raycast)\n\n* [Obsidian](https://docs.pieces.app/products/obsidian)\n\n## Integration with Other Applications\n\nPieces Copilot is integrated into several IDEs through dedicated plugins and extensions.\n\nWhen you use Pieces Copilot within an IDE, you experience a similar chat interface with environments using the Pieces Applet view, complete with context-aware suggestions tailored to your current project.\n\nThe settings and configurations (such as LTM context and model preferences) remain consistent with the Desktop App, ensuring a seamless transition between environments.\n\n### Shared Conversation Threads\n\nThe Copilot experience supports *cross-threading.*\n\nThis means that your chat history and contextual data can be shared between the Desktop App and other environments.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/pieces_copilot_in_multiple_environments/copilot_in_environment_demo_part_one.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nWhether you start a conversation in the Desktop App and later continue it in an IDE, your context and settings persist—making for a fluid, uninterrupted workflow.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/pieces_copilot_in_multiple_environments/copilot_in_environment_demo_part_two.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## The Pieces User Experience\n\nPieces Copilot is designed to maintain a consistent core experience—offering essential features like chat history, context management, and LLM configuration—across all environments.\n\n### Flutter-Supported Environments\n\nIn platforms such as JetBrains, Visual Studio Code, and the Pieces Web Extension, Pieces leverages a dedicated Flutter-based *Applet* view which provides a standardized user experience for interacting with Pieces Copilot and the Pieces Drive.\n\n***\n\n*Pieces Web Extension*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/pieces_copilot_in_multiple_environments/pieces_web_extension_copilot_applet.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n### Custom UI Environments\n\nFor environments that do not support Flutter applets (e.g., Sublime Text or the CLI), Pieces Copilot adapts with a custom interface tailored to the specific platform.\n\nAlthough the visual presentation differs, all core features remain available, so the learning curve is as minimal as possible while still providing Pieces functionalities.\n\n***\n\n*Pieces for Sublime Text Plugin*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/pieces_copilot_in_multiple_environments/pieces_copilot_sublime_text.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***",
    "lastModified": "2025-06-04T17:24:57.648Z",
    "filePath": "desktop/copilot/multiple-environments.md"
  },
  "/docs/desktop/copilot": {
    "slug": "/docs/desktop/copilot",
    "metadata": {
      "title": "Introduction to Pieces Copilot",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pfd_docs_figmas/pieces_copilot.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Overview\n\nPieces Copilot enables you to interact with advanced generative AI (both cloud-hosted and on-device), engage in technical chats, generate and debug code, and access your workflow context effortlessly.\n\nIt’s designed for *developers, designers, knowledge workers,* and *enterprise teams* alike.\n\nOn this page, you’ll find a brief overview of the key capabilities of Pieces Copilot.\n\nFor more in-depth guidance, please explore our dedicated subpages:\n\n* [Interacting with Pieces Copilot](https://docs.pieces.app/products/desktop/copilot/interaction): Learn how to start a conversation, leverage suggested prompts, and utilize quick-action tools.\n\n- [Context & Project Integration](https://docs.pieces.app/products/desktop/copilot/integration): Discover how to enrich your chats by providing context from your local files, folders, saved materials, and websites. You can also view this guide for [more information on using Pieces Copilot with LTM Context.](https://docs.pieces.app/products/quick-guides/copilot-with-context)\n\n* [Configuring Pieces Copilot](https://docs.pieces.app/products/desktop/copilot/configuration): Understand how to manage your LLM runtime, choose between cloud and on-device models, and customize settings to fit your workflow.\n\n- [Pieces Copilot in Multiple Environments](https://docs.pieces.app/products/desktop/copilot/multiple-environments): Find out how the Copilot experience extends to different IDEs and external integrations.\n\n## Pieces Copilot | Main View\n\nWhen you launch the Pieces for Developers Desktop App, you are greeted by the **Pieces Copilot View**—a dynamic, context-rich chat interface designed to help you interact with powerful generative AI, manage your project context, and streamline your coding workflow.\n\nInside the Pieces Copilot view, you can:\n\n1. Interact with advanced [local and cloud-hosted LLMs](https://docs.pieces.app/products/desktop/copilot/interaction) for multi-purpose generative AI needs.\n\n2. Leverage [Long-Term Memory (LTM-2) context captured by PiecesOS](https://docs.pieces.app/products/desktop/copilot/integration) to enhance AI responses.\n\n3. Attach and manage folders, files, saved materials, and websites as [chat context.](https://docs.pieces.app/products/desktop/copilot/integration#adding-folders)\n\n4. Search and [add saved code snippets as additional context](https://docs.pieces.app/products/desktop/copilot/integration#enriching-chats-with-saved-materials) to Pieces Copilot chats.\n\n### Interacting with Pieces Copilot\n\nWe’ll walk you through the main Copilot Chat window and touch on all of the main elements you can interact with here.\n\nYou’ll learn how to interact with Pieces Copilot, utilize flexible *Suggested Prompts* when starting new chats, enable or disable Long-Term Memory context, add individual items to the chat, and discover other productivity-centric *Quick Actions.*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/pieces_copilot_MAIN/gifs/nteracting_with_pieces_copilot_parent_page.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Context & Project Integration\n\nOne of Pieces Copilot’s key advantages is context awareness.\n\nBy integrating local folders, files, and your saved code snippets, you can significantly boost the relevance and accuracy of the Pieces Copilot’s AI responses.\n\nIn this section, we'll cover context and project management—adding items from Pieces Drive or your device as chat context, offering real-world examples to reduce context switching, and showing how to adjust the AI's understanding of your environment or workflow.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/pieces_copilot_MAIN/gifs/context_and_project_integration_parent_page_gif.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Configuring Pieces Copilot\n\nPieces Copilot offers flexibility in choosing the AI model (cloud-based or local) and customizing the chat appearance and default context usage.\n\nDiscover the array of 40+ cloud-hosted and local models, served through Ollama or other providers, learn how to adjust your runtime, customize the appearance of your Pieces Copilot Chat view, enable or disable LTM context for new chats, and more.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/pieces_copilot_MAIN/configuring_pieces_copilot_parent_page.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Pieces Copilot in Multiple Environments\n\nIf you don't want the wide range of tools designed to boost your productivity and reduce context switching in your workflow with the Pieces Desktop App—that’s fine.\n\nYou can still find Pieces for Developers plugins & extensions available in your favorite collaboration tools, text editors, and most importantly, IDEs.\n\nWe’ll go over cross-platform consistency with context, history, and usage synchronization through PiecesOS, cross-threaded use case scenarios, link you to other Pieces software, and more.\n\n***\n\n*Pieces Copilot in JetBrains IDEs*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_copilot/pieces_copilot_MAIN/pieces_copilot_in_multiple_environments_parent_page.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Get Started with Pieces\n\nClick one of the links below to be redirected to your platform-specific (OS) download and installation pages:\n\n* [macOS](https://docs.pieces.app/products/meet-pieces/macos-installation-guide)\n\n* [Windows](https://docs.pieces.app/products/meet-pieces/windows-installation-guide)\n\n* [Linux](https://docs.pieces.app/products/meet-pieces/linux-installation-guide)",
    "lastModified": "2025-06-04T17:24:57.624Z",
    "filePath": "desktop/copilot.md"
  },
  "/docs/desktop/download": {
    "slug": "/docs/desktop/download",
    "metadata": {
      "title": "Download | Pieces for Developers",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Installing the Pieces Desktop App\n\nInstallation for the Pieces Desktop App and its core dependencies—[PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os) and [Ollama](https://docs.pieces.app/products/core-dependencies/ollama)—is straightforward.\n\nSelect the appropriate download file for your platform (macOS/Windows) or follow the CLI installation instructions for Linux.\n\n<Callout type=\"info\">\n  macOS users will be prompted to select the proper download file based on their device’s architecture—ARM or Intel.\n</Callout>\n\n## Downloads\n\nFind the download files for the Pieces Desktop App for your macOS or Windows device below.\n\n### macOS\n\nIf you know your macOS device’s CPU architecture, you can select either the ARM or Intel buttons to download the Pieces Desktop App using the *recommended* installation method.\n\nRead this [guide on determining your CPU architecture](https://docs.pieces.app/products/desktop/troubleshooting/macos#checking-cpu-type) if you need help.\n\nFor detailed instructions, refer to our comprehensive [macOS installation and quick-start guide.](https://docs.pieces.app/products/meet-pieces/macos-installation-guide)\n\n<CardGroup cols={2}>\n  <Card title=\"Apple Silicon / ARM\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1740593663020/d271a302-cec3-466c-9d9d-085f762d95bc.png\" href=\"https://builds.pieces.app/stages/production/macos_packaging/pkg-arm64/download?download=true&product=DOCUMENTATION_WEBSITE&ga_visitor=286281413.1724689222&_gl=1*soqacc*_gcl_au*MTgwNDcwNzY1OC4xNzQwNDA5MjEz*_ga*Mjg2MjgxNDEzLjE3MjQ2ODkyMjI.*_ga_BVYEFRWCYX*MTc0MDU3NzUzMS42My4xLjE3NDA1OTM3MjEuNTIuMC4w\">\n    *macOS 12.0 (Monterey) or higher*\n  </Card>\n\n  <Card title=\"Intel\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1740593657157/c79ed786-39f3-4fca-a596-451ce98307b1.png\" href=\"https://builds.pieces.app/stages/production/macos_packaging/pkg/download?download=true&product=DOCUMENTATION_WEBSITE&ga_visitor=108380292.1740593596&_gl=1*1vo6txu*_gcl_au*MTE0NTE1OTUyLjE3NDA1OTM1OTY.*_ga*MTA4MzgwMjkyLjE3NDA1OTM1OTY.*_ga_BVYEFRWCYX*MTc0MDU5MzU5NS4xLjEuMTc0MDU5MzYxMS40NC4wLjA.\">\n    *macOS 12.0 (Monterey) or higher*\n  </Card>\n</CardGroup>\n\nOtherwise, you can download Pieces software using [alternative installation methods](https://docs.pieces.app/products/meet-pieces/macos-installation-guide) (.DMG, Homebrew).\n\n### Windows\n\nClick the download button to install the Pieces Desktop App using the *Recommended* (`.appinstaller`) installation method.\n\nFor detailed instructions, refer to our comprehensive [Windows installation and quick-start guide.](https://docs.pieces.app/products/meet-pieces/windows-installation-guide)\n\n<Card title=\"Windows\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1740593810761/7014560e-d011-438c-aa0d-1509abcf313d.png\" href=\"https://builds.pieces.app/stages/production/appinstaller/pieces_for_x.appinstaller?_gl=1*o2haep*_gcl_au*MTA2NTQ0NTg3OC4xNzM4NjI2MzMx*_ga*MTkzMTk3NjkzNy4xNzM4NjI2MzMx*_ga_BVYEFRWCYX*MTc0NjIwNTI5OS45LjEuMTc0NjIxMzY2MC41NC4wLjA.\">\n  *Windows 10 (1809) or higher*\n</Card>\n\nIf you want alternative installation methods (`.exe`, WinGet), [click here.](https://docs.pieces.app/products/desktop/troubleshooting/windows#alternative-installation-methods)\n\n### Updating PiecesOS (AppInstaller)\n\nPlease note that if you installed PiecesOS using the `.appinstaller` files (the current *Recommended* installation method), you need to **quit the Pieces Desktop App** before updating PiecesOS.\n\nIf the update doesn't work, ensure that both the Pieces Desktop App and PiecesOS are completely closed. Then, restart PiecesOS and proceed to download and install the update.\n\n### Linux\n\nInstallation of Pieces software is done using the Command-Line Interface (CLI).\n\nFor a step-by-step terminal process using the CLI, refer to our [comprehensive Linux installation and quick-start guide.](https://docs.pieces.app/products/meet-pieces/linux-installation-guide)\n\n<Card title=\"Download — Linux\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741278390901/a6fcd0e6-4c6a-47e8-93ac-01981b74f8b6.webp\">\n  *Ubuntu 22+ required.*\n\n  ***\n\n  Run these commands **in order** to install and properly set up PiecesOS.\n\n  1. **Open Terminal:** Open the Command-Line Interface (CLI) using `ctrl+alt+t`.\n\n  2. Run `sudo snap install pieces-os` to install PiecesOS. You will be prompted to enter your local account’s password.\n\n  3. Enter and run `sudo snap connect pieces-os:process-control :process-control` to enable offline and on-device machine learning and LLM functionality.\n\n  4. Then, type `sudo snap install pieces-for-developers` to download the Pieces Desktop App.\n\n  5. Type `pieces-for-developers` to launch the application directly from your terminal.\n</Card>",
    "lastModified": "2025-06-04T17:24:57.650Z",
    "filePath": "desktop/download.md"
  },
  "/docs/desktop/drive/enrichment-and-metadata": {
    "slug": "/docs/desktop/drive/enrichment-and-metadata",
    "metadata": {
      "title": "Material Enrichment & Saved Metadata",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Managing Materials\n\nAfter adding your snippets, you’ll want to keep them organized. Pieces Drive streamlines this process by offering automatic enrichment and intuitive editing features.\n\n## Editing your Saved Materials\n\nThere are several types of saved metadata and captured context to make use of, edit, repurpose, and delete—if you want.\n\nBelow are the primary methods for managing your materials once they’re in the Pieces Drive:\n\n### Saved Materials List\n\nLocated on the left sidebar, the **Saved Materials List** displays each of your snippets with titles and notes:\n\n* **Auto-Generated Titles**: Pieces instantly names each snippet based on its contents, so you can see a human-readable summary at a glance.\n\n* **Annotations:** An automatically-generated description of the saved material’s purpose and function.\n\nClick any item to load it in the main detail pane. This is where you’ll see the code or text, along with a wealth of automatically generated context (tags, annotations, etc.).\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/enrichment_and_metadata/gifs/opening_from_saved_materials_list.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Renaming and Reclassifying\n\nIn the detail view, locate the three-dot **Quick Menu** to reveal actions for customizing your snippet:\n\n* `Rename`: Override the auto-generated title with something that better fits your naming conventions.\n\n* `Reclassify`: If Pieces incorrectly detects the code’s language or you’d prefer to classify it differently, you can manually select a new language (e.g., reclassifying JavaScript as TypeScript).\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/enrichment_and_metadata/reclassifying_code_snippet.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Managing Tags\n\nTags are a powerful organizational tool. Pieces automatically generates tags based on the snippet’s contents, but you can refine or add your own.\n\nFrom the **Quick Menu** or in the **Captured Context** panel, click `Manage Tags` to type new tags or remove existing ones.\n\n<Callout type=\"tip\">\n  Group snippets by frameworks (“React,” “Express”), projects (“Client A,” “Side Project”), or problem domains (“API calls,” “Data Structures”).\n</Callout>\n\n### Annotations\n\nAnnotations act like descriptive notes or documentation entries attached to your snippet.\n\nThey’re especially useful if:\n\n* **Multiple Developers Share the Same Snippet**: Add clarifications, usage examples, or important disclaimers.\n\n* **You Want Version Notes**: Document changes or reasons you created a new snippet in the first place.\n\n### Sensitive Information\n\nIf you import a saved material that contains API keys or credentials, Pieces may automatically assign them the **Sensitive Information** tag.\n\nPieces prevents accidental leakage by warning you when you generate a shareable link, so you’ve got a heads-up before you share the link with others.\n\nIf something isn’t automatically detected, you can still mark something as *sensitive* manually to add an extra layer of privacy for materials th\n\n* **Warning Before Sharing**: Pieces prevents accidental leakage by warning you when you generate a shareable link.\n\n* **Manual Entry**: You can also mark something as sensitive if it’s not automatically detected. This adds an extra layer of privacy for your team or organization.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/enrichment_and_metadata/gifs/manually_adding_sensitive_info_to_snippets.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Anchors & Related People\n\nPieces automatically connects the dots between origin location (in terms of files) and related people who may have contributed into the code, and saves it alongside each material.\n\n* `Anchors`: If you want to track exactly where a snippet originated—like a specific file path, repository, or a web link—you can set Anchors in the snippet’s context panel.\n\n* `Related People`: Attach team members or collaborators’ names/emails to a snippet, creating a record of who contributed to its creation or usage.\n\n## Using the Quick Menu\n\nFrom within the main detail view of a snippet, the **Quick Menu** (often represented by three vertical dots or an ellipsis icon) consolidates the most important snippet actions:\n\n<Callout type=\"tip\">\n  The **Quick Menu** is essentially your control center for material maintenance.\n</Callout>\n\n1. `Duplicate`: Quickly create a second version of the snippet, either exact or transformed.\n\n2. `Related Links`: See or add relevant URLs (like documentation pages).\n\n3. `Manage Annotations`: Add new notes or edit existing ones.\n\n4. `Sensitive Information`: Review or add any recognized keys, tokens, or secrets.\n\n5. `Delete`: Permanently remove the snippet if it’s no longer needed.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/enrichment_and_metadata/gifs/using_quick_menu_annotations_links_demo.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:57.661Z",
    "filePath": "desktop/drive/enrichment-and-metadata.md"
  },
  "/docs/desktop/drive/save-and-organize": {
    "slug": "/docs/desktop/drive/save-and-organize",
    "metadata": {
      "title": "Saving & Organizing Materials",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Overview\n\nSaving materials—code snippets, text notes, or entire files—is the foundation of Pieces Drive.\n\nOnce saved, these materials are automatically enriched with valuable metadata such as tags, annotations, and suggested links, helping you find and reuse them easily.\n\n## Saved Materials List\n\nAll of your saved materials are listed on the left-hand side of the view.\n\nFrom this list, you can scroll down to see previous saved materials, or click the `Clock` icon to sort them in a few different ways:\n\n* `Recent`**:** Sorts the list of materials by which were most recently used.\n\n* `Suggested`**:** Presents saved materials that are likely to benefit your current workflow, eg., if you’ve been working on API calls in Python, you may see API boilerplate code snippets.\n\n* `Alphabetical`**:** Sorts the list by *titles* in alphabetically-descending order.\n\n* `Language`**:** Groups saved materials by language—Python, JavaScript, Kotlin, etc.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/saving_and_organizing_materials/alphabetically_viewing_snippet_list.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Adding New Materials\n\nThe primary way to add materials to Pieces Drive is through the `Add Materials` button, located in the bottom-left corner of the Pieces Drive view.\n\nClicking it opens a modal that presents several distinct options for different workflows and preferences.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/saving_and_organizing_materials/adding_new_materials.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Paste Code from Clipboard\n\nPaste code from your clipboard to save as a new material.\n\n<Steps>\n  <Step title=\"Purpose\">\n    Quickly add snippets you’ve copied from somewhere else—an IDE, a website, or a note.\n  </Step>\n\n  <Step title=\"How It Works\">\n    Select `Paste Code from Clipboard`, then paste or drag and drop your code snippet into the provided text field. Pieces will instantly parse it and create a new snippet in your drive.\n  </Step>\n</Steps>\n\n### Use a Plugin\n\nFind materials in your Pieces Drive that you saved in other Pieces-enabled plugins and extensions.\n\n<Steps>\n  <Step title=\"Purpose\">\n    Seamlessly save snippets to Pieces Drive from within your favorite IDE or browser.\n  </Step>\n\n  <Step title=\"How It Works\">\n    Install a Pieces for Developers extension or plugin (e.g., for Visual Studio Code, JetBrains IDEs, Chrome, etc.).\n\n    Whenever you highlight code and choose “Save to Pieces” (or similar), it syncs directly to your Pieces Drive.\n\n    Then, the snippet appears in your Saved Materials List with an auto-generated title and immediate enrichment.\n  </Step>\n</Steps>\n\n### Snippet Discovery\n\nScan local code repositories for useful snippets that are relevant to your workflow.\n\n<Steps>\n  <Step title=\"Purpose\">\n    Automate finding reusable code within a local folder or repository.\n  </Step>\n\n  <Step title=\"How It Works\">\n    Select **Snippet Discovery** in the modal, then choose a folder or repository on your device.\n\n    Pieces scans these files for frequently repeated code patterns (snippets).\n\n    You can decide which discovered snippets to add to Pieces Drive.\n  </Step>\n</Steps>\n\n### Import GitHub Gists\n\nImport GitHub Gists as individual saved materials in your Pieces Drive.\n\n<Steps>\n  <Step title=\"Purpose\">\n    Bring your Gists (public or private) into one centralized repository.\n  </Step>\n\n  <Step title=\"How It Works\">\n    Log in with your GitHub account if prompted. Select `Import GitHub Gists` and pick the Gist(s) you want to import.\n\n    Each file in the selected Gist becomes a separate snippet in Pieces Drive.\n  </Step>\n</Steps>\n\n### Create from Scratch\n\nCreate new saved materials from scratch.\n\n<Steps>\n  <Step title=\"Purpose\">\n    Quickly craft a new snippet or note that doesn’t yet exist anywhere else.\n  </Step>\n\n  <Step title=\"How It Works\">\n    Click `Create from Scratch`.\n\n    Then, type or paste the content you’d like to save—this can be code or plain text.\n\n    You can assign an initial title or let Pieces generate one automatically.\n  </Step>\n</Steps>\n\n### Duplicate Current Material\n\nMake a duplicate copy of a material to fork, revise, or modify.\n\n<Steps>\n  <Step title=\"Purpose\">\n    Make an immediate copy of the snippet you have open, often used for branching or revisions.\n  </Step>\n\n  <Step title=\"How It Works\">\n    Choose **Duplicate Current Material** in the modal.\n\n    Decide whether you want an exact copy, or a transformed version (e.g., more readable, more performant, different language, or boilerplate template).\n\n    The new snippet appears alongside the old one, preserving all context.\n  </Step>\n</Steps>\n\n### Describe a Snippet to Generate\n\nUse generative AI to generate new saved materials based on your exact requirements.\n\n<Steps>\n  <Step title=\"Purpose\">\n    Use natural language to generate brand-new code.\n  </Step>\n\n  <Step title=\"How It Works\">\n    Click `Describe a Snippet to Generate`.\n\n    Type a short or detailed description, e.g., “A basic Node.js HTTP server with URL parsing.”\n\n    Pieces produces the snippet automatically, complete with immediate enrichment and classification.\n  </Step>\n</Steps>\n\n### Add Files\n\nImport files from your device to use as a base for snippet discovery, or as context for future workflows.\n\n<Steps>\n  <Step title=\"Purpose\">\n    Import entire local files into Pieces Drive for safekeeping and snippet discovery.\n  </Step>\n\n  <Step title=\"How It Works:\">\n    Select `Add Files`.\n\n    Browse and pick one or multiple files.\n\n    Pieces scans their content, creating separate snippets if it detects multiple distinct code sections—or it may create a single snippet if the file is smaller.\n  </Step>\n</Steps>\n\n## Best Practices & Tips\n\nFind some additional information and quick tips for saving and organizing materials in the Pieces Drive below.\n\n<AccordionGroup>\n  <Accordion title=\"Name Snippets Wisely\">\n    While Pieces auto-generates titles, consider adding your own if you frequently revisit a snippet.\n  </Accordion>\n\n  <Accordion title=\"Use Tags for Faster Search\">\n    The more tags you add, the easier it becomes to filter your library when you’re deep into a project.\n  </Accordion>\n\n  <Accordion title=\"Annotate for Clarity\">\n    If you’re sharing your workspace with other developers, annotations can be invaluable for explaining snippet usage or constraints.\n  </Accordion>\n\n  <Accordion title=\"Enable Snippet Discovery (Early)\">\n    If you have large repositories, run Snippet Discovery to populate your drive with frequently used code.\n  </Accordion>\n\n  <Accordion title=\"Leverage Plugins\">\n    Don’t forget that saving snippets from an IDE plugin is often the fastest way to build up your Pieces Drive library without leaving your coding environment.\n  </Accordion>\n</AccordionGroup>",
    "lastModified": "2025-06-04T17:24:57.667Z",
    "filePath": "desktop/drive/save-and-organize.md"
  },
  "/docs/desktop/drive/search-and-filter": {
    "slug": "/docs/desktop/drive/search-and-filter",
    "metadata": {
      "title": "Searching & Filtering Materials",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Finding Materials in Pieces Drive\n\nAs your collection of saved snippets and code files grows, finding the right material at the right time becomes critical.\n\nPieces Drive addresses this need with a powerful search engine, user-friendly filters, and intuitive ways to narrow down results by content, language, and more. \n\n## Using the Search Bar\n\nAt the very top of the Pieces Drive view is the **Search Bar**, labeled *Find Materials.*\n\nThis is your starting point for quick lookups.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/searching_and_filtering/gifs/using_search_bar_demo.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Natural Language Queries\n\nPieces supports more than simple keyword matching.\n\nType a phrase like *“How to parse JSON in Python,”* and it looks through titles, annotations, and snippet content for matches.\n\nIf you recall partial details about a snippet—*“route handler,”* for example—Pieces tries to interpret your intent and provide the best possible matches.\n\n### Instant Results\n\nAfter you type your query, results populate in the Saved Materials List on the left.\n\nEach matching snippet’s auto-generated title and a quick preview appear—just click any snippet to open it in the main detail pane.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/searching_and_filtering/instant_results_demo.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  Searching “local storage React” can bring up multiple snippets involving React’s local storage usage, even if the phrase “local storage” doesn’t appear verbatim in the snippet title.\n</Callout>\n\n## Quick Filters\n\nRight next to the search bar, you’ll see **Quick Filter** toggles in the dropdown that can help you narrow down your search quickly.\n\nThese are:\n\n* `Titles`: Matches against snippet titles (auto-generated or custom).\n\n* `Annotations`: Matches text that appears in the snippet’s annotations or descriptions.\n\n* `Content`: Matches the literal code or text content of your snippet.\n\nYou can enable one, two, or all three filters at once.\n\n***\n\n| **Filter**    | **Search Type**                                                                        | **Result** |\n| ------------- | -------------------------------------------------------------------------------------- | ---------- |\n| *Title*       | Matches against snippet titles (auto-generated or custom).                             | ✅          |\n| *Annotation*  | Matches text that appears in the snippet’s annotations or descriptions.                | ✅          |\n| *Content*     | Matches the literal code or text content of your snippet.                              | ✅          |\n| *All Filters* | Pieces searches titles, annotations, and snippet code simultaneously—broadest results. | ✅          |\n\n***\n\nThis level of granularity helps you quickly dial into the snippet you need without scrolling through dozens of partial matches.\n\n## Advanced Filtering\n\nFor deeper searching, Pieces Drive offers an **Add Search Filters** feature which has an icon, located to the left or right of the Quick Filters (depending on your interface layout).\n\nThese advanced filters let you refine your search using specific criteria and store them for later reuse.\n\n### via Language, Tags, and Phrases\n\nPieces lets you filter using *language*, *tags* and specific *natural language phrases* so that you see only what you need to see—this is particularly useful if you have similar-sounding snippets across multiple languages.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/searching_and_filtering/all_filter_types_modal.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThere are a few different use cases for searching with these methods:\n\n* `Language`**:** Search your Pieces Drive for saved materials written in Python, C#, JavaScript, TypeScript, or other languages.\n\n* `Tags`**:** If you only want backend-related Node.js snippets, you can add a *tag* filter for *“Node.js”* AND *“backend.”*\n\n* `Phrase`**:** If you remember an exact line of code or an exact phrase, place it within quotes to perform a more strict search (e.g., \"server.listen(port)\").",
    "lastModified": "2025-06-04T17:24:57.671Z",
    "filePath": "desktop/drive/search-and-filter.md"
  },
  "/docs/desktop/drive/sharing": {
    "slug": "/docs/desktop/drive/sharing",
    "metadata": {
      "title": "Sharing Saved Materials",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Collaborating with Saved Materials\n\nYou can generate and copy unique shareable links for saved materials in the Pieces Drive, letting you showcase your code and easily collaborate other developers on your team.\n\n## Sharing\n\nOne of the most convenient ways to collaborate or showcase work is by sending a code snippet to your team, friends, or the broader developer community.\n\nPieces Drive makes this process dirt-simple using *shareable links*, which allow others to view your snippet and its related metadata in a consistent, Pieces-branded web interface—even if they don’t have Pieces installed. \n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/sharing/shared_snippet_demo_1.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThese links preserve the snippet’s code, syntax highlighting, tags, annotations, and other contextual data—this way, recipients see not just lines of text, but the snippet’s *entire backstory and classification.*\n\n## Generating Shareable Links\n\nThere are two ways to generate shareable links for saved materials in your Pieces Drive.\n\n### via Quick Menu\n\nStart by opening the material you want in the main *Detail View* of Pieces Drive.\n\nFind and click the **three-dot Quick Menu** (usually in the top-right corner of the snippet's section).\n\nThen, choose `Generate Shareable Link` or `Shareable Link`—if it's your first time creating a link for that snippet, Pieces will make a new unique URL.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/sharing/gifs/sharing_via_quick_menu.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  If you’ve already generated a link for this material before, it exists in the cloud—so you can just copy the shareable link to your clipboard.\n</Callout>\n\n### via Keyboard Shortcut\n\nYou can toggle a different shareable link modal that provides you with the previously-generated link or generates a new one by using keyboard shortcuts—`cmd+L` (macOS) or `ctrl+L` (Windows/Linux).\n\nIf you want to see how the snippet appears, simply paste the link into a web browser.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/sharing/material_in_browser_demo_2.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou’ll find a code view, syntax highlighting, any relevant tags, annotations, and a snippet description—just like in Pieces Drive.\n\n## Security & Sensitive Data\n\n<mark>Pieces Drive takes security seriously.</mark>\n\nWhen you begin generating a shareable link, Pieces is designed to initiate and allow specific behaviors pertaining to privacy and security:\n\n* **Automatic Detection of Secrets**: If the code snippet contains credentials or tokens that Pieces recognizes (API keys, client secrets, etc.), you’ll *receive a warning* before proceeding.\n\n* **Sensitive Info Management**: You can explicitly mark or unmark certain strings as sensitive within the material’s context panel.\n\n* **User Confirmation**: Pieces prompts you to confirm that you’re okay sharing the snippet as-is or suggests that you *remove or redact sensitive* *portions* first.\n\n### Best Practices\n\nPieces may not catch everything, so you should *always be careful* of what code materials you generate links for, and *with whom you share them.*\n\n<Steps>\n  <Step title=\"Review for Secrets\">\n    Even if Pieces doesn’t automatically flag something, it’s good practice to check for any private tokens, database credentials, or other sensitive data.\n  </Step>\n\n  <Step title=\"Create ‘Safe’ Versions\">\n    If you need to show code logic without actual credentials, consider duplicating your snippet, removing the secrets, and then sharing that sanitized version.\n  </Step>\n\n  <Step title=\"Boilerplate or Readability Transformation\">\n    If you just want to demonstrate a concept, consider using the [Transforming Code](https://docs.pieces.app/products/desktop/drive/transforming-code) features to create a boilerplate or more readable version for sharing.\n  </Step>\n</Steps>\n\n## Managing Existing Links\n\nOnce a snippet has a shareable link, Pieces Drive helps you track and modify it.\n\nRevisit the **Quick Menu** for the saved material, then look under the first section titled *Shareable Link* and click `Manage`.\n\nThis will give you access to the shareable link in an input field, the option to generate a GitHub Gist based on that code, and then 3 further options:\n\n1. `Open in Browser`**:** Automatically opens the code snippet’s shareable link in your default browser.\n\n2. `Refresh Link`**:** Refreshes the link if you’ve made changes to the saved material itself, so you can always share an up-to-date version.\n\n3. `Revoke Link`**:** Similar to *deleting a material,* this button essentially ‘deletes’ the shared link, taking the saved material off of the cloud so that it cannot be accessed outside of your Pieces Drive.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/sharing/managing_existing_links_menu.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Use Cases & Workflows\n\nCheck out the workflow use cases below for ideas or inspiration on how to share code using the Pieces system.\n\n***\n\n<AccordionGroup>\n  <Accordion title=\"Team Collaboration\">\n    Shareable links are excellent for quick internal reviews. Instead of copying raw code into a Slack channel, send a link so your teammates get the snippet’s annotations, tags, and formatting intact.\n  </Accordion>\n\n  <Accordion title=\"Open-Source Contributions\">\n    If you maintain an open-source library, shareable links can demonstrate bug fixes or new features without requiring others to install Pieces. They’ll see a snippet rendered in a neat web interface.\n  </Accordion>\n\n  <Accordion title=\"Code Reviews & Documentation\">\n    Use shareable links to document specific sections of a codebase. Project managers or QA engineers can open the link, comment on the snippet, and refer back to it without rummaging through version control logs.\n  </Accordion>\n\n  <Accordion title=\"Demo or Client Presentations\">\n    For freelancers or consultants, a shareable link offers a tidy way to showcase code examples to clients. They see professional formatting and can test the snippet themselves if they have access to a browser-based environment.\n  </Accordion>\n</AccordionGroup>",
    "lastModified": "2025-06-04T17:24:57.674Z",
    "filePath": "desktop/drive/sharing.md"
  },
  "/docs/desktop/drive/transforming-code": {
    "slug": "/docs/desktop/drive/transforming-code",
    "metadata": {
      "title": "Transforming & Translating Code",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Use Cases\n\nAs you expand your snippet library, you may find situations where a snippet needs to be adapted for a new project or platform.\n\nInstead of rewriting the snippet from scratch, you can harness Pieces Drive’s transformation options.\n\nThese transformations let you quickly produce alternative versions, making your code more maintainable and shareable across different scenarios.\n\nThis is useful for:\n\n* **Rapid Prototyping:** Spin up new, specialized versions of a snippet in seconds.\n\n* **Code Reuse:** Save time by leveraging existing logic and adjusting it to new requirements (e.g., different language, more performant).\n\n* **Collaboration:** Provide colleagues with multiple snippet variations—like a simpler ‘readable’ version and a separate ‘optimized’ version.\n\n## How To Transform Code\n\nThere are two ways to access the code transformation feature within the Pieces Drive view.\n\n### via Add Materials Button\n\nBy clicking the white `‘+’ icon` in the bottom left of the Pieces Drive view—also known as the *Add Materials* button—you can click `Duplicate Current`, which accesses the currently-viewed saved material and provides several different options for transformation.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/transforming_code/ss_duplicate_snippet_modal.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Quick Menu\n\nYou can also access the code transformation menu through the **Detailed View**, which is the modal containing all of the saved material’s enriched metadata—[which you can read more about here.](https://docs.pieces.app/products/desktop/drive/enrichment-and-metadata)\n\nTo do so, open the **Quick Menu** by clicking the **three vertical dots** on the right side of the *Focused Snippet* view, and select `Duplicate` to trigger the same code transformation modal.\n\n## Transformation Types\n\nThe first option is called **Non-Modified** and lets you create an exact duplicate of the in-focus saved material, in case you want to save a copy and make experimental edits and other changes without losing the original material.\n\nThere are four following options:\n\n***\n\n| **Type**               | **Purpose**                                                                          | **Use Case**                                                                                                                  |\n| ---------------------- | ------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------- |\n| *More Readable*        | Create a more-readable copy that’s more understandable to others.                    | Useful for working with junior developers or sharing a snippet with non-developer stakeholders.                               |\n| *More Performant*      | Create a more performance-optimized copy that utilizes less computational resources. | Perfect for code that needs to handle larger workloads or run more efficiently in production.                                 |\n| *Boilerplate Template* | Create a copy that can be used as a template for future workflows.                   | Great for starting new projects quickly using a proven pattern or code structure.                                             |\n| *Different Language*   | Create a version using a different programming language.                             | Essential for integrating logic in another language or exploring a different tech stack without rewriting the entire snippet. |\n\n***\n\n## Post-Transformation Management\n\nEach transformation results in a brand-new material in your Pieces Drive.\n\nThis new saved material is immediately re-enriched as if it was a brand new material:\n\n* **Auto-Generated Title:** Often describing the type of transformation applied—e.g., *Optimized Python Script For Parsing Data* or another such title.\n\n* **Tags & Annotations:** If relevant, Pieces may retain or revise tags based on the snippet’s updated content.\n\n* **Captured Context:** The snippet will record its transformation history, so you know it originated from another piece of code.\n\nYou can further refine the newly created material by [renaming it, adding or removing tags, editing annotations, and more.](https://docs.pieces.app/products/desktop/drive/enrichment-and-metadata#renaming-and-reclassifying)",
    "lastModified": "2025-06-04T17:24:57.677Z",
    "filePath": "desktop/drive/transforming-code.md"
  },
  "/docs/desktop/drive": {
    "slug": "/docs/desktop/drive",
    "metadata": {
      "title": "Introduction to Pieces Drive",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pfd_docs_figmas/pieces_drive.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## What is Pieces Drive?\n\n**Pieces Drive** is a central feature of the Pieces for Developers Desktop App—your all-in-one workspace for saving, managing, and quickly accessing code snippets and other development materials. \n\n## Overview\n\nPieces Drive gives you the tools to collect and access your most valuable development assets—code snippets, notes, and more—all in one integrated interface.\n\nYou can quickly add items, enrich them with tags and annotations, search using natural language or filters, transform snippets into different languages, and share links with others.\n\nBelow are quick overviews of Pieces Drive's features. For detailed information on a specific function, click the links for documentation and walkthroughs:\n\n* [Saving & Organizing](https://docs.pieces.app/products/desktop/drive/save-and-organize): Learn how to add new materials, import existing code from local files or GitHub Gists, and keep your snippets neatly structured.\n\n- [Searching & Filtering](https://docs.pieces.app/products/desktop/drive/search-and-filter): Discover how to leverage natural language queries, filters, and tags to quickly locate specific materials in Pieces Drive.\n\n- [Enrichment & Metadata](https://docs.pieces.app/products/desktop/drive/enrichment-and-metadata): Understand how Pieces automatically generates tags, annotations, suggested links, and captures context for each snippet, as well has how to access and update associated metadata.\n\n- [Transforming Code](https://docs.pieces.app/products/desktop/drive/transforming-code): See how you can duplicate code snippets to create more readable, more performant, or entirely different-language versions.\n\n- [Sharing:](https://docs.pieces.app/products/desktop/drive/sharing) Find out how to generate shareable links to your snippets, including managing sensitive information before sending links to colleagues.\n\n<Callout type=\"tip\">\n  Did you know that you can use *all of the data* captured by LTM, stored inside your Pieces Drive, as context for Pieces Copilot Chats? [Read more here.](https://docs.pieces.app/products/quick-guides/copilot-with-context)\n</Callout>\n\n## Pieces Drive | Main View\n\nTo access the Pieces Drive view, first click the *home* icon in the top-left corner to open the [Power Menu.](https://docs.pieces.app/products/desktop/actions/power-menu)\n\nThen, select `Pieces Drive` from the list of available views.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/gifs/opening_pieces_drive_overview.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nInside the Pieces Drive view, you can:\n\n1. Scroll through list of saved materials, or search using Natural Language Processing (NLP) to find the materials you need.\n\n2. Save new materials or create materials from scratch using a range of mediums.\n\n3. View captured context alongside individual snippets and edit the metadata generated alongside them.\n\n4. Discover related snippets, duplicate and transform snippets, or start [Pieces Copilot Chats with them.](https://docs.pieces.app/products/desktop/copilot/integration#enriching-chats-with-ltm-2-context)\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/pieces_drive_main_view.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nBy incorporating Pieces Drive into your workflow, you can stay both efficient and organization whether you’re working in a solo capacity or as part of a larger team.\n\n### Saving & Organizing\n\nWe’ll walk you through the main Pieces Drive saving workflow and touch on all the essential elements you can interact with here.\n\nYou’ll learn how to add materials in various ways—pasting code from your clipboard, using an IDE plugin, importing GitHub Gists, or even discovering snippets in a local folder.\n\nOr, you can create from scratch when you need a quick note or brand-new snippet and organize your growing library with tags, annotations, and reclassification.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/gifs/saving_and_organizing_snippet_creation_demo.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Searching & Filtering\n\nOne of Pieces Drive’s major advantages is its robust search capabilities.\n\nBy typing natural language queries or toggling filters for titles, annotations, or full snippet content, you can zero in on exactly what you need—even if you have hundreds of stored snippets.\n\nIn this section, we’ll cover how to use natural language to find snippets by function or topic, use filters to narrow down results by language, tags or custom phrases, and save specific search filters for repeated use.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/gifs/searching_filtering_pieces_drive_parent_page.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Enrichment & Metadata\n\nPieces Drive automatically enriches every snippet with valuable context, making it more than just a code vault.\n\nThis includes auto-generated titles, suggested queries, related websites, and tags that help you quickly see what a snippet does and how it might be used.\n\nYou’ll learn how to access *Captured Context* for individual saved materials, how to manage sensitive information, view and edit automatically generated annotations and tags, and more.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/enrichment_metadata_pieces_drive_parent_page.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Transforming Code\n\nEver need a quick performance boost, a language switch, or a stripped-down boilerplate version of a saved code snippet?\n\nPieces Drive’s transformation options let you duplicate snippets in a few clicks to generate more readable or performance enhanced versions, snippets in different languages, and more.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/ransforming_code_pieces_drive_parent.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Sharing\n\nCollaboration often requires easily accessible code references.\n\nPieces Drive allows you to create secure, shareable links for your snippets—complete with the same metadata and context found in your desktop app.\n\nLearn how to generate shareable links with best practices in mind for handling sensitive data, and both internal and external use cases for sharing code.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/sharing_pieces_drive_parent_page.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Integrating Pieces Drive & Pieces Copilot\n\nWhen you want AI-assisted code explanations, troubleshooting, or generation, Pieces Copilot can reference the snippets you have saved in Pieces Drive.\n\nBy adding a snippet as context in a Copilot chat, the AI can read its entire content and produce more relevant, targeted answers.\n\nWe’ll show you how to attach snippets directly from Pieces Drive into a Pieces Copilot Chat, how to navigate back and forth between different views and help you understand how snippet metadata informs AI responses.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pieces_drive/pieces_drive_MAIN/gifs/integrating_drive_copilot_parent_page.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Get Started with Pieces\n\nClick one of the links below to be redirected to your platform-specific (OS) download and installation Quickstart page:\n\n* [macOS](https://docs.pieces.app/products/meet-pieces/macos-installation-guide)\n\n* [Windows](https://docs.pieces.app/products/meet-pieces/windows-installation-guide)\n\n* [Linux](https://docs.pieces.app/products/meet-pieces/linux-installation-guide)",
    "lastModified": "2025-06-04T17:24:57.655Z",
    "filePath": "desktop/drive.md"
  },
  "/docs/desktop/navigation/captured-context": {
    "slug": "/docs/desktop/navigation/captured-context",
    "metadata": {
      "title": "Captured Context",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Overview\n\nThe Captured Context view in Pieces for Developers uses the Long-Term Memory Engine (LTM-2) to automatically gather, categorize, and display details from your coding workflow—such as websites, file anchors, people, annotations, and tags.\n\n## Accessing the Captured Context View\n\nTo open the **Power Menu**, click the `Home Icon` next to the search bar in the Pieces Desktop App, or press `⌘+return` (macOS) or `ctrl+enter` (Windows/Linux).\n\nThen select `Captured Context` from the dropdown.\n\nWhen you first open the *Captured Context* view, you’ll see a list of recently captured websites:\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/captured_context/pieces_captured_context_overview.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nEach entry typically includes a snapshot image, a page title slug, a short description generated by Pieces Copilot, and a clickable URL.\n\n## Navigation & Actions\n\nA series of tabs appears above the list—**websites**, **anchors**, **people**, **annotations**, and **tags**—along with a search bar.\n\nThese tabs let you switch between different categories of captured context, while the search bar instantly filters your repository based on any keywords you enter.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/captured_context/gifs/pieces_captured_context_tabs_search.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Websites\n\nUnder *websites*, you’ll see pages that the LTM detected during your workflow.\n\nEach entry usually includes a thumbnail or banner image, a short description, and a direct link to the site.\n\nClicking the link opens the webpage in your browser.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/captured_context/gifs/open_website_from_cc_view.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Anchors\n\nThe **Anchors** tab displays context tied to specific files or folders you’ve accessed, such as project directories, code bases, and locations where snippets are stored.\n\nThis is especially helpful for recalling exactly where certain references or snippets live in your projects.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/global_search/anchors_with_previews.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### People\n\nUnder **People**, you’ll see names, email addresses, or organization members that the LTM captured during your workflow—which is great when multiple contributors are involved in a particular task.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/captured_context/pieces_captured_context_people.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Annotations\n\nThe **Annotations** tab provides AI-generated short descriptions for your snippets or other saved materials.\n\nThese concise overviews allow you to recall a snippet’s purpose without opening the entire material, keeping your workspace uncluttered.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/captured_context/pieces_captured_context_annotations.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Tags\n\nWithin **Tags**, you’ll find automatically generated descriptors that highlight the frameworks, languages, or key concepts that are continually referenced in your workflow.\n\nScanning these tags makes it easy to locate related items or filter your collection based on a specific technology or theme.\n\nYou can also add your own tags, too—just click the `Add Tags` button in the bottom right of the Pieces Desktop App.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/captured_context/add_tags_modal.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:57.688Z",
    "filePath": "desktop/navigation/captured-context.md"
  },
  "/docs/desktop/navigation/global-search": {
    "slug": "/docs/desktop/navigation/global-search",
    "metadata": {
      "title": "Global Search",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Accessing Global Search\n\n**Global Search** is a universal search query feature that helps you find anything that has been captured, tracked, or saved to your Pieces Drive.\n\nScanning all stored content delivers quick, context-rich results that help you locate and utilize your materials more efficiently.\n\nHere’s how to open **Global Search**:\n\n1. Open the **Power Menu** by clicking the `Home Icon` next to the search bar in the Pieces Desktop App, or press `⌘+return` (macOS) or `ctrl+enter` (Windows/Linux).\n\n2. In the *Find Action* field, type **Global Search**.\n\n3. Select `Go to Global Search` from the dropdown.\n\n## Main Interface Overview\n\nWhen **Global Search** first opens, you’ll see:\n\n* A *Find Materials...* search bar at the top.\n\n* A *Suggested Searches* section under the search bar.\n\n* A `Refresh` icon next to Suggested Searches to get a new set of recommendations.\n\n* A ‘Powered by NCS’ indicator and an `i` icon at the bottom, which explains more about NCS when hovered over.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/global_search/pieces_global_search_main_view.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Suggested Searches\n\nBelow the search bar, you’ll find a list of *Suggested Searches* based on your recent activity or frequently accessed snippets.\n\nTo use this feature, either click a *Suggested Search* to immediately run that query, or click the `Refresh` icon to load a new set of suggestions.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/global_search/gifs/pieces_global_search_suggestions.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Performing a Search\n\nTo perform a search, type your query into the *Find Materials* field, then press `return` (macOS) or `enter` (Windows/Linux), or you can click the `Search` icon.\n\nPieces will perform the search and display your results in the main view, sorted by how relevant they are to your query.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/global_search/gifs/how_to_search.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Search Results\n\nOnce you run a search, **Global Search** populates the main area with matching snippets and related info.\n\nResults are split into two sections, showing the list of located code snippets, materials, and other related context.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/global_search/both_sides_all_info.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Material List\n\nThe left side of the view displays the **Material List,** where all relevant saved materials are displayed:\n\n* **Snippet Title**: Auto-generated by Pieces to describe the snippet. Click the title to open it in Pieces Drive.\n\n* **Snippet Code Preview**: A quick look at the snippet’s content.\n\n* **Copy**: Copies the snippet to your clipboard.\n\n* **Productivity Score**: Indicates how frequently or effectively this snippet has been used. Higher scores mean greater utility.\n\n### Related Information\n\nThe right side of the view displays related information and other contextual data:\n\n* **Related People**: Names or emails of collaborators associated with your search query.\n\n* **Related Anchors**: Files, folders, or code bases linked to the snippets.\n\n* **Related Tags**: Automatically generated descriptors (e.g., frameworks, languages).\n\n* **Related Links**: URLs or external references tied to the snippets.",
    "lastModified": "2025-06-04T17:24:57.693Z",
    "filePath": "desktop/navigation/global-search.md"
  },
  "/docs/desktop/navigation/settings": {
    "slug": "/docs/desktop/navigation/settings",
    "metadata": {
      "title": "Settings",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Overview\n\nThe `Settings` page in Pieces for Developers contains all configurable options, adjustable preferences, and modifiable behaviors for the Desktop Application.\n\nYou can customize the Pieces Desktop App to your coding workflow by integrating external services or customizing the interface.\n\n## Accessing Settings\n\nTo access settings, press `⌘+,` (macOS) or `ctrl+,` (Windows/Linux).\n\nYou can also open the **Power Menu**, type ‘settings’ in the search field, and select `Go To Settings` from the dropdown menu.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/navigation_then_settings/all_settings.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n## Understanding the Settings Layout\n\nWhen you open **Settings**, you’ll find several configuration categories on the left side and an `All` tab at the top.\n\nClick any category to reveal its associated options in the main panel.\n\n* `Categories`: Organized for quick navigation.\n\n* `All`**:** Displays every setting in one place.\n\nYou can review each section individually or see everything at once by selecting `All`**.**\n\n### Account & Integrations\n\nIn this section, you can integrate external services with Pieces and adjust your user details, beginning with [Account Information.](https://docs.pieces.app/products/desktop/configuration/account-and-cloud#account-management)\n\nThis area displays your email address and any linked accounts.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/navigation_then_settings/account_and_cloud.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\nIf you’re interested in testing upcoming features, the **Early Access Program** lets you join beta releases and stay ahead of the curve.\n\n### Personal Cloud\n\nThe [Personal Cloud](https://docs.pieces.app/products/desktop/configuration/account-and-cloud#disconnecting-personal-cloud) tab controls how your snippets and materials sync across devices.\n\nYou’ll see a status for your cloud connection (including the last sync time), plus options to set or modify your personal domain.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/navigation_then_settings/personal_cloud.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\nThere’s also a `Backup & Restore Data` feature to preserve or retrieve your snippets from the cloud whenever needed.\n\n* `Status`: Check if your cloud is connected and see when it last synced.\n\n* `Domain`: Update your personal domain.\n\n* `Backup & Restore Data`: Protect your snippets and data.\n\n### Copilot Chats\n\nWithin [Pieces Copilot Chats](https://docs.pieces.app/products/desktop/configuration/copilot-and-machine-learning#copilot-chats), decide which LLM runtime powers the Pieces Copilot and manage your chat-specific settings.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/navigation_then_settings/copilot_chats.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\nYou can [Manage Copilot LLM Runtime](https://docs.pieces.app/products/desktop/configuration/copilot-and-machine-learning#manage-llm-runtime) or [Hard-Reset Active Runtime](https://docs.pieces.app/products/desktop/configuration/copilot-and-machine-learning#reset-active-runtime) if it becomes unresponsive. You can also pick an accent color for the chat UI, and `Delete All Copilot Chats` to clear your chat history.\n\n* `Manage Copilot LLM Runtime`: Switch or reset your current LLM.\n\n* `Hard-Reset Active Runtime`: Restart the runtime if it’s unresponsive.\n\n* `Delete All Copilot Chats`: Remove your entire chat history.\n\n### Machine Learning\n\nPieces uses an on-device ML engine (with optional cloud capabilities) to enrich and tag your snippets.\n\nInside the [Machine Learning](https://docs.pieces.app/products/desktop/configuration/copilot-and-machine-learning#machine-learning) tab, you can toggle `Auto-Generated Tags`, `Auto-Generated Websites`, `Auto-Generated Hints`, and `Auto-Generated People`.\n\nAdjust the *Enrichment Level* (0 to 9) or choose an *Enrichment Mode* (local, cloud, or blended). The LTM captures historical data for additional context—if needed, you can clear it to start fresh.\n\n* `Auto-Generated Tags`: Enable or disable automated tagging.\n\n* `Auto-Generated Websites`, `Auto-Generated Hints`, `Auto-Generated People`: Fine-tune which content gets generated.\n\n* `Enrichment Level`: Control how detailed the ML analysis should be.\n\n* `Enrichment Mode`: Decide between local, cloud, or blended.\n\n* `Long-Term Memory Engine`: Provides temporal context, with an option to clear data.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/navigation_then_settings/machine_learning.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Views & Layouts\n\n[Views & Layouts](https://docs.pieces.app/products/desktop/configuration/aesthetics-layout#adjusting-layout) controls how you see content in Pieces.\n\nYou can set a `Default Layout`, choose how items are sorted in list or gallery views, and select a `Default Search Mode` like `Neural Code Search (NCS)`.\n\nYou’ll also find options for `Confirmation Settings` (for specific actions), toggles for usage or metrics summaries, and a `Default Toolbar` for newly saved snippets.\n\n* `Default Layout`: Choose your preferred view on launch.\n\n* `Default Search Mode`: Select how you search by default.\n\n* `Confirmation Settings`: Control dialog prompts.\n\n* `Default Toolbar`: Assign a default toolbar to new snippets.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/navigation_then_settings/views_and_layouts.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Aesthetics\n\nIn the [Aesthetics](https://docs.pieces.app/products/desktop/configuration/aesthetics-layout) tab, customize the overall appearance of Pieces.\n\nSwitch between [light or dark mode](https://docs.pieces.app/products/desktop/configuration/aesthetics-layout#dark--light-mode), select an accent color for UI highlights, and `Zoom In/Out` to adjust the interface scale.\n\nThese controls help you create a comfortable coding environment for extended sessions.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/navigation_then_settings/aesthetics_view.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Other Options & Settings Pages\n\n[Additional preferences](https://docs.pieces.app/products/desktop/configuration/additional-settings) live here, including [in-app notifications](https://docs.pieces.app/products/desktop/configuration/additional-settings#notification-preferences) (to minimize distractions or stay fully informed), Release Notes (for the latest updates), and Power Tips (for efficiency boosts).\n\nYou can also manage Plugins, invite colleagues via *Refer a Friend*, and control how much crash or compliance data is shared under [Telemetry & Diagnostics.](https://docs.pieces.app/products/desktop/configuration/additional-settings#telemetry--diagnostics)\n\n* `In-App Notifications`: Decide which alerts you receive.\n\n* `Release Notes`: View the most recent updates.\n\n* `Power Tips`: Learn shortcuts and advanced capabilities.\n\n* `Plugins`: Extend Pieces with extra functionality.\n\n* `Refer a Friend`: Invite others to use Pieces.\n\n* `Telemetry & Diagnostics`: Configure data sharing preferences.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/navigation_then_settings/telemetry.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />",
    "lastModified": "2025-06-04T17:24:57.696Z",
    "filePath": "desktop/navigation/settings.md"
  },
  "/docs/desktop/navigation/snippet-discovery": {
    "slug": "/docs/desktop/navigation/snippet-discovery",
    "metadata": {
      "title": "Snippet Discovery",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Accessing Snippet Discovery\n\nOpen the **Power Menu** by clicking the home icon next to the search bar in the Pieces for Developers Desktop App, or press `⌘+return` (macOS) and `ctrl+enter` (Windows/Linux).\n\nSelect `Snippet Discovery` from the dropdown to begin.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/snippet_discovery/gifs/pieces_snippet_discovery.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"info\">\n  The **Snippet Discovery** page can only be accessed through the `Power Menu` at this time.\n</Callout>\n\n## Features\n\nThis feature lets you utilize Pieces to research and scan local code repositories for useful code snippets. Once found, they can be saved directly to your Pieces Drive.\n\n### Drag & Drop Files or Folders\n\nOn the **Snippet Discovery** page, a large drag-and-drop area awaits your files or folders.\n\nSimply drop your code files or an entire folder, and Pieces will begin scanning them for snippets.\n\n### Discovering Snippets\n\nAfter your files or folders are uploaded, Pieces scans them for potential code snippets.\n\nYou’ll see a *“We discovered X snippets”* screen, where `X` is the total number of snippets found.\n\nThree actions appear at the top-right:\n\n* `Start Over`: Resets the view, allowing you to drag in a new file or folder.\n\n* `Select All`: Toggles all snippets to be selected or deselected at once.\n\n* `Save All`: Saves every discovered snippet in a single action. Once you click it, a loading indicator shows progress (e.g., *Adding 18 of 26*).\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/snippet_discovery/discovered_snippets.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Selecting and Saving Snippets\n\nEach snippet shows a `+` sign by default.\n\nClick `Select All` to change every `+` to a `-`, which means all snippets are ready to be saved. If you only want certain snippets, click the `+` next to each one you want to include.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/snippet_discovery/gifs/discovery_select_snippets.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nWhen you’re ready, the button at the top-right displays a `Save All` message if all snippets are selected, or `Save # of Selected Snippets` if only some are chosen.\n\nAs each snippet saves successfully, you’ll see a small green check mark in its bottom-right corner.\n\n### Partial Saves & Continuing\n\nYou don’t have to save every snippet immediately.\n\nFeel free to save a subset of snippets (e.g., `Save X Snippets`), leave others for later, or select more as you go.\n\nIf you decide to start fresh with a different file or folder, click `Start Over` to discard the current session.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/snippet_discovery/check_mark_snippet.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Exiting Snippet Discovery\n\nClick the `Back Arrow` in the top-left corner to leave the Snippet Discovery page.\n\nA prompt appears to confirm whether you want to exit without saving additional snippets or return to finish saving them.\n\nYou can also click `esc` (macOS/Windows/Linux).",
    "lastModified": "2025-06-04T17:24:57.700Z",
    "filePath": "desktop/navigation/snippet-discovery.md"
  },
  "/docs/desktop/navigation/updates": {
    "slug": "/docs/desktop/navigation/updates",
    "metadata": {
      "title": "Updates & Upcoming",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## What’s New\n\nThe **Updates & Upcoming** page in Pieces for Developers provides a straightforward overview of recent releases and upcoming features.\n\nYou can check for new updates, preview future enhancements, and even share feedback or discuss features with the Pieces community—all in one place.\n\n## Accessing Updates & Upcoming\n\nYou can open this page through the **Power Menu** by clicking the home icon next to the search bar in the Pieces for Developers Desktop App, then selecting `Updates & Upcoming` from the dropdown.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/updates_and_upcoming/updates_upcoming_modal.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nAlternatively, press `shift+w` (macOS/Windows/Linux) on your keyboard to jump there instantly.\n\n## Overview of the Updates & Upcoming Page\n\nThis page is divided into two main sections.\n\nAt the top, you’ll find **Upcoming Features**, which highlight planned features or enhancements scheduled for future releases (since September 1, 2023).\n\nBelow that, you’ll see **Previous Releases**, which outlines all new additions, fixes, and improvements that have already been rolled out.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/updates_and_upcoming/updates_upcoming_overview.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Upcoming Features\n\nThe **Upcoming Features** section showcases everything on the horizon for Pieces, displaying each potential addition alongside a thumbs-up and thumbs-down button.\n\nYou can show your excitement or raise concerns for any feature, and a **Join the Discussion** button links directly to a GitHub discussion, where you can share ideas, provide suggestions, or raise any issues.",
    "lastModified": "2025-06-04T17:24:57.703Z",
    "filePath": "desktop/navigation/updates.md"
  },
  "/docs/desktop/navigation/workflow-activity": {
    "slug": "/docs/desktop/navigation/workflow-activity",
    "metadata": {
      "title": "Workflow Activity",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Callout type=\"alert\">\n  The **Workflow Activity** view is currently live, but will soon be deprecated—stay tuned for more information, and don’t forget to check out the [Updates & Upcoming](https://docs.pieces.app/products/desktop/navigation/updates) view within the Pieces Desktop App.\n</Callout>\n\n***\n\n## Accessing Workflow Activity\n\nYou can open the **Workflow Activity** page in several ways.\n\nOne approach is through the **Power Menu**—click the **Home** icon next to the search bar in the Pieces Desktop App, then select `Go to Workflow Activity`.\n\nYou can also press `⌘+return` (macOS) or `ctrl+enter` (Windows/Linux) to open the Power Menu, and choose `Workflow Activity` from the dropdown.\n\nIf you prefer a direct keyboard shortcut, use `⌘+shift+a` (macOS) or `ctrl+shift+a` (Windows/Linux) to jump straight to the **Workflow Activity** page.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/workflow_activity/pieces_workflow_activity_overview.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Main View\n\nOnce opened, you’ll see a timeline of chronological events as they relate to your **Pieces Drive** usage.\n\nEach entry shows key details, such as the snippet name, the event type (created, updated, deleted, or referenced), and a timestamp.\n\nA `Show: (All)` dropdown appears at the top, allowing you to filter using several *events:* `created`, `updated`, `deleted`, or `referenced`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/workflow_activity/pieces_workflow_activity_filter_dropdown.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nA `Refresh` button in the corner lets you reload the page to fetch the latest events, and a `Back` button returns you to the previous view.\n\n## Searching for Events\n\nAt the top of the page, a search bar labeled *Find an Event* enables you to quickly locate specific items in your timeline.\n\nAs you type a query, the list filters in real time, displaying only events that match your search.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/workflow_activity/workflow_activity_search_deleted.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Right-Side Panels\n\nTo the right of the main activity list, you’ll find two panels—**Recent Searches** and **Top Materials.**\n\n### Recent Searches\n\nThis panel shows your most recent event queries.\n\nHovering over a search term reveals options to `Search in Global Search`, `Copy Query`, or `Remove` the query from the list.\n\nClicking a recent search will also automatically initiate a global snippet search for that term.\n\n### Top Materials\n\nHere, Pieces displays your most frequently used or highest-ranked snippets, measured by *Productivity Points.*\n\nEach snippet is accompanied by an icon and a productivity score (e.g., 113 points). Hovering over the productivity score icon reveals the exact number of points.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/workflow_activity/top_materials_info.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Productivity Points\n\nA small `i` icon near the **Top Materials** heading provides an explanation of how *Productivity Points* are calculated.\n\nPieces uses a *heuristics-based system* to determine how often and in what ways a snippet is used, with higher scores indicating saved code materials that may be particularly useful given the task at hand.\n\n## Opening Snippets\n\nWhen you click on a snippet in **Top Materials** or in the main **Workflow Activity** list, Pieces immediately opens the Snippet View for that saved material.\n\nAdditionally, accessing any snippet triggers a new `Referenced` event in your timeline, confirming that you revisited or used that snippet.",
    "lastModified": "2025-06-04T17:24:57.707Z",
    "filePath": "desktop/navigation/workflow-activity.md"
  },
  "/docs/desktop/navigation": {
    "slug": "/docs/desktop/navigation",
    "metadata": {
      "title": "Navigating the Pieces Desktop App",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Power Menu\n\nNavigation throughout the Pieces Desktop App is performed through the **Power Menu.**\n\nThere are two ways to open the **Power Menu**:\n\n<Steps>\n  <Step title=\"via Home Icon\">\n    Click the `Home Icon` to the left of the *Search Bar* to open up the **Power Menu.**\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/extras/power_menu_from_home_button.gif\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n  </Step>\n\n  <Step title=\"via Shortcuts\">\n    Use the following shortcuts to open the **Power Menu** depending on your operating system.\n\n    | **macOS**   | **Windows**    | **Linux**      |\n    | ----------- | -------------- | -------------- |\n    | `⌘+shift+p` | `ctrl+shift+p` | `ctrl+shift+p` |\n  </Step>\n</Steps>\n\nInteractive, labeled buttons in this menu let you jump to different views that correspond with different features and functionalities within the Pieces Desktop App.\n\n## Views from the Power Menu\n\nThere are 7 views available within the **Power Menu** at any given point.\n\nIf you want more information, click the titles of the views below to read more specific documentation on them:\n\n* [Pieces Copilot](https://docs.pieces.app/products/desktop/copilot) **/** [Pieces Drive](https://docs.pieces.app/products/desktop/drive)**:** Depending on which view you’re currently in, one of these buttons will display—or both, if in another view.\n\n* [Settings](https://docs.pieces.app/products/desktop/navigation/settings)**:** The master settings window.\n\n* [Captured Context](https://docs.pieces.app/products/desktop/navigation/captured-context)**:** View websites, anchors, people, annotations, and tags captured by LTM.\n\n* [Updates & Upcoming](https://docs.pieces.app/products/desktop/navigation/updates)**:** View release notes for upcoming features and past releases.\n\n* [Snippet Discovery](https://docs.pieces.app/products/desktop/navigation/snippet-discovery)**:** Let Pieces scan a local code repository for useful materials.\n\n* [Workflow Activity](https://docs.pieces.app/products/desktop/navigation/workflow-activity)**:** See top materials, recent searches, and a timeline history of added or adjusted materials within the Pieces Drive.\n\n* [Global Search](https://docs.pieces.app/products/desktop/navigation/global-search)**:** Search your Pieces Drive for specific saved materials.\n\n### via Power Menu — Find Action\n\nFrom within the Power Menu, there is a search bar titled *Find Action*.\n\nFrom this menu, you can either click or scroll through some of the available options, like `Manage General Copilot Settings`, `New General Copilot Conversation`, or `Refresh Selected Chat`.\n\nThese actions, some of which are view-specific—like refreshing a selected Pieces Copilot Chat—are useful ways to navigate throughout the Pieces Desktop App while maintaining speed and efficiency in your workflow.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/navigation_main/gifs/find_actions_list_demo.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nIncluded at the very end of the scrollable **Find Actions** list are links to other Pieces for Developers plugins and extensions, as well as social outlets (<a target=\"_blank\" href=\"https://www.youtube.com/@getpieces\">Pieces YouTube</a>, [Pieces Discord](https://discord.com/invite/getpieces), etc.) and two additional links for <a target=\"_blank\" href=\"https://github.com/pieces-app/support/issues\">reporting issues</a> or <a target=\"_blank\" href=\"https://getpieces.typeform.com/to/mCjBSIjF?typeform-source=beta.docs.pieces.app#page=docs-support\">contacting support.</a>\n\n### via Power Menu — Settings\n\nThe **Settings** view is the only page from which the **Power Menu** cannot be accessed.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/settings_with_mcp_update/NAVIGATION/all_settings.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\nThis view contains several different buckets of configurable options, such as [Account & Cloud](https://docs.pieces.app/products/desktop/configuration/account-and-cloud), [Pieces Copilot & Machine Learning](https://docs.pieces.app/products/desktop/configuration/copilot-and-machine-learning), [Aesthetics & Layouts](https://docs.pieces.app/products/desktop/configuration/aesthetics-layout), and [other settings](https://docs.pieces.app/products/desktop/configuration/additional-settings).\n\n## Focus Mode\n\n**Focus Mode** allows you to concentrate on your current task by minimizing distractions.\n\nYou can toggle Focus Mode by clicking the `Focus Mode` button located in the upper left of the Pieces Copilot or Pieces Drive view, near the sidebar.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/navigation/navigation_main/gifs/enter_focus_mode_from_chat.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nWhen activated, it closes the sidebar, giving you an expanded view of your current Pieces Copilot conversation.\n\nTo exit **Focus Mode**, simply click the button again to restore the sidebar, or press `esc` (macOS/Windows/Linux).",
    "lastModified": "2025-06-04T17:24:57.680Z",
    "filePath": "desktop/navigation.md"
  },
  "/docs/desktop/onboarding": {
    "slug": "/docs/desktop/onboarding",
    "metadata": {
      "title": "Get Started with the Pieces Desktop App",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## First Contact\n\nWhen you first launch the Pieces Desktop App, you can choose from `Light` or `Dark` theme modes to suit your preferences; otherwise, this mode is tied to your system's preferences and will change periodically.\n\nYou can also decide if you want to share *anonymous crash data* to help improve the product.\n\nA `Get Started` button takes you into the onboarding process.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/onboarding/second_rv_pfd_onboarding/revised_step_1.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Cloud Accounts & Integrations\n\nThis step includes an option to sign in with GitHub or Google to import code Gists and relevant data, or skip cloud integration and stay local if that suits you better.\n\nPieces for Developers stores developer materials locally and allows you to share them with anyone you’d like.\n\nSigning in enables you to store snippets and backups in **Pieces Cloud**.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/onboarding/second_rv_pfd_onboarding/revised_login_page.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n## The Magic Moment\n\nOnce past the **Cloud Accounts & Integrations** screen, you’ll be launched into the default Pieces Desktop App view, which is the **Workstream Activity View.**\n\nFrom here, you can follow the guided, interactive Long-Term Memory demo and experience your first *Magic Moment.*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/onboarding/second_rv_pfd_onboarding/step_2_gif.gif\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\nAll you need to do is proceed with your workflow for 10-15 minutes while the [Long-Term Memory Engine (LTM-2)](https://docs.pieces.app/products/core-dependencies/pieces-os#ltm-2) captures memories—then, we’ll show you how to use it with Pieces Copilot.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/onboarding/second_rv_pfd_onboarding/step_3_completed_workflow_memories_gathering.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Workstream Activity Summaries\n\nNow that you've successfully captured over 30 memories using the LTM, it's time for you to check out your summary to see how future summaries will appear.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/onboarding/second_rv_pfd_onboarding/new_workstream.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\nThese summaries include helpful links to collaboration-focused documents, reference conversations with coworkers you've participated in, provide links to articles you've mentioned, and show GitHub PRs or Jira tickets you've opened, among other things.\n\nFrom this point, you’ll see a highlighted button in the top-right corner of the Pieces Desktop App—this is where you can control LTM Engine Access Settings, which controls what applications Pieces is allowed to pull workflow context from.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/onboarding/second_rv_pfd_onboarding/step_4_ltmsource_powermenu_piecescopilot.gif\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\nYou’ll also be introduced to the **Power Menu**, from which you can access the Pieces Copilot view—that's where you’ll be headed next.\n\n### Pieces Copilot + LTM\n\n[LTM](https://docs.pieces.app/products/core-dependencies/pieces-os#ltm-2) captures and stores workflow context in the [Pieces Drive](https://docs.pieces.app/products/core-dependencies/pieces-os#pieces-drive). You can visit a site like Stack Overflow, read code explanations, and later query Pieces Copilot about what you read.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/onboarding/second_rv_pfd_onboarding/step_5_pieces_copilot_view.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\nBy enabling LTM, you can use Pieces Copilot as an AI assistant trained on your personal workflow data, all of which is kept on-device.\n\n<Callout type=\"info\">\n  Read more about [data collection and storage.](https://docs.pieces.app/products/core-dependencies/on-device-storage)\n</Callout>\n\nClicking the flashing button that reads *“Generate a stand-up styled summary of my recent work”* to have Pieces Copilot use LTM data to generate an output of what you did during the memory-capturing process.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/onboarding/second_rv_pfd_onboarding/generating_from_context_and_changing_model.gif\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\nYou can also see the flashing LLM selector in the bottom-left corner of the app. This is where you’ll swap between cloud-hosted LLMs and local, on-device models, powered by [Ollama](https://docs.pieces.app/products/core-dependencies/ollama)—an optional dependency.\n\n## Additional Documentation\n\nThat’s it! You’ve completed the Pieces onboarding and are ready to start exploring the app and discovering how to utilize the features and functionalities of the Pieces ecosystem in your daily workflow.\n\nIf you want to read more, click the links below to jump to additional documentation:\n\n* [Pieces Copilot](https://docs.pieces.app/products/desktop/copilot)—Ask technical questions, create code snippets, get help with debugging, and receive insights—all in a chat format you know.\n\n* [Pieces Drive](https://docs.pieces.app/products/desktop/drive)—Save, access, edit, and reuse materials saved to the Pieces Drive.\n\n* [Workstream Activity](https://docs.pieces.app/products/desktop/workstream-activity)—View incremental workflow summaries, saved context, and related information gathered by the Long-Term Memory (LTM-2) Engine.\n\n* [Navigation](https://docs.pieces.app/products/desktop/navigation)—Learn the different views and layouts in the Pieces Desktop App and discover the Power Menu.\n\n* [Configuration](https://docs.pieces.app/products/desktop/configuration)—Customize everything from visuals and aesthetics to Pieces Drive enrichment and Pieces Copilot models to fit your preferences and workflow.\n\n* [Actions & Keyboard Shortcuts](https://docs.pieces.app/products/desktop/actions)—Use Power Menu Actions and Keyboard Shortcuts to perform tasks or navigate from view to view quickly.\n\n* [Troubleshooting](https://docs.pieces.app/products/desktop/troubleshooting)—If the Pieces Desktop App isn't working as expected, start here. This page explains our troubleshooting documentation and guides you to the solution that best addresses your issue.",
    "lastModified": "2025-06-04T17:24:57.710Z",
    "filePath": "desktop/onboarding.md"
  },
  "/docs/desktop/troubleshooting/cross-platform": {
    "slug": "/docs/desktop/troubleshooting/cross-platform",
    "metadata": {
      "title": "Cross-Platform Issues",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/cross_platform/troubleshooting_multiOS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Basic Troubleshooting\n\nFind links to detailed sections on specific troubleshooting steps as well as information on choosing between cloud and local models, system requirements, and more.\n\n<on-device-storage />\n\n## Versions & Updates\n\nMany issues can stem from having an out-of-date Pieces Desktop App.\n\n### Updating Pieces Desktop\n\nThe Pieces Desktop App will update automatically.\n\nFor standalone & alternative installations, updates are checked daily or when you open the application. You'll be prompted to install or delay the update if one is available.\n\nSee your platform-specific update instructions on updating the Pieces for Developers Desktop App:\n\n* [macOS](https://docs.pieces.app/products/desktop/troubleshooting/macos#updating-the-pieces-desktop-app)\n\n* [Windows](https://docs.pieces.app/products/desktop/troubleshooting/windows#updating-pieces-desktop-app)\n\n* [Linux](https://docs.pieces.app/products/desktop/troubleshooting/linux#updating-pieces-desktop)\n\n## Connection Issues with Pieces Desktop\n\nYou may occasionally encounter connection issues between PiecesOS and Pieces Desktop App, resulting in difficulty finding saved materials, issues generating shareable links, and hanging responses from the Pieces Copilot.\n\nThe quickest way to resolve this basic connection issue is to restart PiecesOS and the Pieces Desktop App, then check for updates.\n\n### Restarting Pieces Suite & Checking Updates\n\nTo restart and check for updates for PiecesOS and Pieces Desktop:\n\n<Steps>\n  <Step title=\"Make Sure PiecesOS is Running\">\n    Ensure PiecesOS is running (look for the Pieces Icon in your system tray or menu bar)\n  </Step>\n\n  <Step title=\"Exit PiecesOS\">\n    Click on the PiecesOS icon and press the `power off` button or the `exit` button in the top right.\n  </Step>\n\n  <Step title=\"Close Pieces for Developers\">\n    Make sure the Pieces Desktop App is closed by clicking the `x` button on the top right or by closing it through task manager.\n  </Step>\n\n  <Step title=\"Open Pieces Desktop\">\n    After opening Pieces Desktop App, PiecesOS will open automatically\n\n    * If there are updates, you will be prompted to update both PiecesOS and Pieces for Developers.\n  </Step>\n</Steps>\n\n## Common Installation Issues\n\nCommon issues can occur when setting up the Pieces Desktop App for the first time.\n\nPlatform-specific solutions are detailed on their respective OS pages:\n\n* [macOS](https://docs.pieces.app/products/desktop/troubleshooting/macos#common-installation-issues)\n\n* [Windows](https://docs.pieces.app/products/desktop/troubleshooting/windows#common-installation-issues)\n\n* [Linux](https://docs.pieces.app/products/desktop/troubleshooting/linux#common-installation-issues)\n\n## Checking Hardware\n\nIt may be necessary to verify your system’s specifications if you experience ongoing issues.\n\nSee the OS-specific pages for instructions on how to check CPU, RAM, and GPU details:\n\n* [macOS](https://docs.pieces.app/products/desktop/troubleshooting/macos#checking-os-version)\n\n* [Windows](https://docs.pieces.app/products/desktop/troubleshooting/windows#checking-hardware-specifications)\n\n* [Linux](https://docs.pieces.app/products/desktop/troubleshooting/linux#checking-system-information)",
    "lastModified": "2025-06-04T17:24:57.720Z",
    "filePath": "desktop/troubleshooting/cross-platform.md"
  },
  "/docs/desktop/troubleshooting/linux": {
    "slug": "/docs/desktop/troubleshooting/linux",
    "metadata": {
      "title": "Issues | Linux",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/troubleshooting_linux.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Installation & Updating Fixes\n\nYou can find detailed instructions on how to update PiecesOS and the Pieces Desktop App on your Linux device using the terminal.\n\nAdditionally, you can check your system's OS and hardware specifications to ensure they meet the minimum recommended requirements.\n\n<on-device-storage />\n\n## Versions & Updates\n\nMany issues can stem from running outdated versions of the Pieces Desktop App on Linux.\n\n### Updating Pieces Desktop\n\nOn Linux, the Pieces Desktop App is distributed via snaps (for Ubuntu-based systems).\n\nTo update the Pieces Desktop App on Linux:\n\n<Steps>\n  <Step title=\"Check the Current Version\">\n    Running `snap info pieces-for-developers` to check the current version\n  </Step>\n\n  <Step title=\"Check for Updates\">\n    Running `sudo snap refresh` to apply any available updates\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/snap_refresh_PFD.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## Common Installation Issues\n\nOfficial support is for **Ubuntu 22.04+ and Ubuntu-based distributions.** Other distributions might work, but *aren’t guaranteed.*\n\n## Checking Distribution Compatibility\n\nEnsure you’re running a supported **Ubuntu-based distribution.**\n\nIf not, consider switching to a supported environment, as installation on non-Ubuntu distributions isn’t guaranteed.\n\n### Updating Snapd\n\nSnap-based installations require an up-to-date snap `daemon`:\n\n* Run `sudo snap refresh` to ensure `snapd` and its packages are current\n\n### Adjusting Graphics & Display Settings\n\nIf installation or UI issues persist, consider the following:\n\n* **Switch Between X11 and Wayland:** Some applications may work better on one display protocol than the other. Try switching to X11 for compatibility or Wayland for newer features. You can usually select this at the login screen.\n\n<Callout type=\"alert\">\n  The LTM-2 Engine is designed to work with the X11 Window Manager. Other Window Managers, such as Wayland, are *not compatible.* This means that long-term memory functionality with certain Linux Virtual Machines (VMs) is not possible at this time.\n</Callout>\n\n* **Update your GPU Drivers:** Ensure they are up to date. For NVIDIA, check for proprietary driver updates. AMD and Intel users should verify that their open-source drivers are up to date.\n\n* **Optimize Graphics Configurations:** Use tools like `nvidia-settings`, `radeon-profile`, or similar utilities to adjust your GPU settings for better performance and stability.\n\nThese adjustments can resolve many graphical and display-related issues you may experience while using Pieces for Developers.\n\n## Checking System Information\n\nVerify your system's hardware configuration and ensure it meets the recommended specifications by running specific commands in your terminal.\n\n### Checking CPU Information\n\nTo determine your CPU type and find other important information, type `lscpu` in your terminal and press `Enter`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/lscpu_UBUNTU.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Checking GPU Information\n\nTo determine your GPU type and find other important information, `lspci | grep -i vga` in your terminal and press `Enter`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/lscpi_UBUNTU.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nConfirm that your CPU, GPU, and memory resources are sufficient for running PiecesOS and local AI models, if applicable.\n\n### Checking Ubuntu Version\n\nIf the Pieces Installer is not working as intended, you could have an outdated version of Ubuntu. The minimum Ubuntu version that Pieces will run on is **Ubuntu 22.04 or later**.\n\nTo check what version of Ubuntu you’re running:\n\n<Steps>\n  <Step title=\"Open Settings\">\n    Open the **Settings** on Ubuntu by clicking the *options bar* in the top right\n  </Step>\n\n  <Step title=\"Find the System Section\">\n    Locate the **System** section at the bottom of the left-hand side menu and click it\n  </Step>\n\n  <Step title=\"Open the About Section\">\n    Open the **About** section and locate the **Operating System** label\n  </Step>\n</Steps>\n\nThis section will display your Ubuntu version information.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/settings_about_system.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Consulting Online Resources\n\nIf you encounter persistent installation issues, consult online forums or community guides related to snap and Ubuntu-specific troubleshooting steps.\n\n## Restart & Retry\n\nIf you've updated components, checked the hardware, and adjusted configurations without success, try restarting your machine and then try again.\n\nIf the problem persists, please open a <a target=\"_blank\" href=\"https://github.com/pieces-app/support/issues\">**GitHub issue**</a> for further assistance or book a call with our engineers.",
    "lastModified": "2025-06-04T17:24:57.725Z",
    "filePath": "desktop/troubleshooting/linux.md"
  },
  "/docs/desktop/troubleshooting/macos": {
    "slug": "/docs/desktop/troubleshooting/macos",
    "metadata": {
      "title": "Issues | macOS",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/troubleshooting_macos.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Installation & Updating Fixes\n\nPiecesOS and the Pieces Desktop App can be downloaded using several installation methods, and they can be updated differently depending on the method used.\n\nYou can also find information below on how to determine the CPU architecture and OS version of your Apple device.\n\n<on-device-storage />\n\n## Manual Installation Methods\n\nIf you're having trouble installing PiecesOS or the Pieces Desktop App, you can manually install both software by downloading the standalone `.dmg` files or using terminal commands, instead of the recommended `.pkg` method.\n\n<Callout type=\"alert\">\n  If you’re not sure which `.dmg` you need based on your device’s CPU, [click here.](https://docs.pieces.app/products/desktop/troubleshooting/macos#checking-cpu-type)\n</Callout>\n\n<CardGroup cols={2}>\n  <Card title=\"Pieces Desktop App — ARM .DMG\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1740693233214/29654e9b-14b6-44e5-a9e1-cdadb65ddb47.webp\" href=\"https://builds.pieces.app/stages/production/os_server/dmg/download?download=true&product=DOCUMENTATION_WEBSITE\" external=\"true\">\n    *macOS 13.0 (Ventura) or higher*\n  </Card>\n\n  <Card title=\"Pieces Desktop App — Intel .DMG\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1740693234272/7a5de5db-9b57-4cd9-9300-14544075e954.webp\" href=\"https://builds.pieces.app/stages/production/pieces_for_x/dmg/download?download=true&product=DOCUMENTATION_WEBSITE\" external=\"true\">\n    *macOS 13.0 (Ventura) or higher*\n  </Card>\n</CardGroup>\n\n<Card title=\"Installing via Homebrew\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1740695766570/dc1efa5e-6e16-47f6-a417-94e1356e2d88.webp\">\n  You can also install PiecesOS manually using Homebrew from your device’s terminal.\n\n  To do so:\n\n  1. Ensure Homebrew is installed on your system.\n\n  2. Run `brew install --cask pieces-os` in your terminal to install the Pieces Homebrew package.\n</Card>\n\n## Versions & Updates\n\nMany issues can stem from out-of-date plugins, extensions, PiecesOS, or the desktop app itself.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_checking_piecesos_for_updates.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Updating the Pieces Desktop App\n\nUpdate the Pieces Desktop App on macOS by clicking the `User Icon` next to the **search bar** at the top of the Pieces Desktop Window. Then, click `Check for Desktop App Updates` or `Check for PiecesOS Updates`.\n\nTo check the Pieces Desktop App for updates on macOS:\n\n<Steps>\n  <Step title=\"Open the Pieces Desktop App\">\n    Use the **Search** option or locate the Pieces Desktop App within your *Applications* folder\n  </Step>\n\n  <Step title=\"Locate the Update Option\">\n    Click the `User Icon` to the right of the **Search Bar** at the top of the main app view\n  </Step>\n\n  <Step title=\"Check for Updates\">\n    Click the `Check for Desktop App Updates` option\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_check_pfd_for_updates_profile_dropdown.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can also click `Check for PiecesOS Updates` as an alternative to doing so in from the PiecesOS system window in your taskbar.\n\n## Common Installation Issues\n\nCommon installation issues on Apple devices include having an outdated OS version or choosing the wrong installation package.\n\n### Checking OS Version\n\nPieces applications need at least **macOS 13.0 (Ventura).** If you're having installation problems, first check that your OS version is up-to-date.\n\nTo determine your Apple device’s version of macOS:\n\n<Steps>\n  <Step title=\"Locate the Apple Icon\">\n    Click the `Apple Icon` in the top-left corner of your screen\n  </Step>\n\n  <Step title=\"Learn More About your Mac\">\n    Select `About This Mac`\n  </Step>\n\n  <Step title=\"Find your OS Version\">\n    Under your device name (i.e. MacBook Air), look for the last line on the list, titled **macOS**\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_checking_about_mac.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### Checking CPU Type\n\nIntel and Apple Silicon (ARM) devices run on entirely separate CPU architectures, so downloading the wrong package for your Apple device can cause Pieces Desktop to be rendered useless.\n\nTo determine what CPU architecture your Apple device utilizes:\n\n<Steps>\n  <Step title=\"Open the Apple Options\">\n    Click the `Apple Icon` in the top-left corner of your screen.\n  </Step>\n\n  <Step title=\"Locate Mac Information\">\n    Select `About This Mac`, and look for the **Overview section.** The first line will contain your CPU type:\n\n    * **Apple Silicon / ARM:** You will see an M-Series processor (i.e., Apple M3)\n\n    * **Intel:** You will see an Intel processor (i.e., 2.6 GHz Intel Core i7)\n\n    Once you’ve determined your CPU architecture, [download the correct installation package accordingly.](https://docs.pieces.app/products/desktop/troubleshooting/macos#alternative-installation-methods)\n  </Step>\n</Steps>\n\n## Restart & Retry\n\nIf the installation fails because your macOS version is outdated or you installed the wrong package for your device's architecture, restart your machine and try the installation again from the beginning.\n\nIf the problem persists, please open a <a target=\"_blank\" href=\"https://github.com/pieces-app/support/issues\">GitHub issue</a> for further assistance, or book a call with our engineers.",
    "lastModified": "2025-06-04T17:24:57.731Z",
    "filePath": "desktop/troubleshooting/macos.md"
  },
  "/docs/desktop/troubleshooting/windows": {
    "slug": "/docs/desktop/troubleshooting/windows",
    "metadata": {
      "title": "Issues | Windows",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/troubleshooting_windows.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Installation & Updating Fixes\n\nPiecesOS and the Pieces Desktop App can be downloaded in several ways, and the update process varies based on the method you used, like whether you installed them via WinGet or `.exe` files.\n\n<on-device-storage />\n\n## Manual Installation Methods\n\nIf you’re experiencing difficulties installing the Pieces Desktop App, you can install the software manually by downloading the Windows installer or using WinGet.\n\n<CardGroup cols={2}>\n  <Card title=\"Download — Windows\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1740690831330/c1714b05-fc9a-4396-828b-16cba1efd4f6.webp\" href=\"https://builds.pieces.app/stages/production/os_server/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE\" external=\"true\">\n    *.EXE*\n  </Card>\n\n  <Card title=\"Download — Windows\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1740690833475/31e9fe57-e429-4b33-bb38-a2478762d3e9.webp\" href=\"https://builds.pieces.app/stages/production/appinstaller/pieces_for_x.appinstaller?download=true&product=DOCUMENTATION_WEBSITE\" external=\"true\">\n    *.appinstaller*\n  </Card>\n</CardGroup>\n\n<Card title=\"Installing Via WinGet\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1740694843457/7c1bcb6c-53c9-46e7-bea5-26508547f893.png\">\n  You can also install Pieces for Developers manually using **WinGet** from your device’s terminal.\n\n  To do so:\n\n  1. Launch Windows Terminal, Command Prompt, or PowerShell as *administrator.*\n\n  2. In the terminal, type `winget install “Pieces for Developers”` and press `enter`.\n\n  You may be prompted to enter `Y` or `N` to agree or disagree with the terms of use when installing the Pieces Desktop App—type and enter `Y` to proceed with the installation.\n</Card>\n\n## Versions & Updates\n\nMany issues can stem from out-of-date plugins, extensions, or the Desktop App itself.\n\n### Updating the Pieces Desktop App\n\nUpdating the Pieces Desktop App on Windows (and macOS) can be done directly within the application:\n\n<Steps>\n  <Step title=\"Open the Pieces Desktop App\">\n    Press the `Windows Icon` and search for Pieces Desktop, open it\n  </Step>\n\n  <Step title=\"Locate the User Icon\">\n    Click the `User Icon` to the right of the **Search Bar** at the top of the main app view\n  </Step>\n\n  <Step title=\"Check for Updates\">\n    Select `Check for Desktop App Updates`\n  </Step>\n\n  <Step title=\"Update Pieces for Developers\">\n    If prompted, click `Download Update` to install available updates.\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/windows_check_pfd_for_updates.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can also select `Check for PiecesOS Updates` from the same menu as an alternative to doing so from the PiecesOS system window in your taskbar.\n\n## Common Installation Issues\n\nWindows users may encounter installation issues for various reasons, such as out-of-date OS components or incomplete dependencies.\n\n### Checking for Windows Updates\n\nBefore installing, ensure your Windows system is fully updated:\n\n<Steps>\n  <Step title=\"Open your Settings\">\n    Click the `Start` button, then select `Settings`.\n  </Step>\n\n  <Step title=\"Find your Updates\">\n    Click `Windows Update` in the sidebar options.\n  </Step>\n\n  <Step title=\"Install any Updates\">\n    Install any pending updates and restart your computer.\n  </Step>\n</Steps>\n\n### Updating the Microsoft Store & App Installer\n\nIf you downloaded Pieces software through the Microsoft Store and are experiencing issues with the marketplace interface, try updating the app.\n\n<Steps>\n  <Step title=\"Open the Microsoft Store\">\n    Press the `Windows` button and search for the **Microsoft Store**, open it.\n  </Step>\n\n  <Step title=\"Find the Library updates\">\n    Click on `Library `to check for available updates.\n  </Step>\n\n  <Step title=\"Update all recommendations\">\n    Update the Microsoft Store and the App Installer if prompted.\n  </Step>\n\n  <Step title=\"Reinstall Pieces Suite\">\n    Now, you can retry installing Pieces Suite.\n  </Step>\n</Steps>\n\n## Issues Launching PiecesOS\n\nSome users who have enabled Controlled Folder Access (CFA) as a security measure may receive a notification that Pieces is attempting to bypass this security wall.\n\nTo work around this issue, you will need to *add the executable path for PiecesOS* to your allowlist.\n\n<Callout type=\"alert\">\n  The reason PiecesOS fails to launch when CFA is enabled is that the executable path for the PiecesOS application writes data to your Documents folder.\n\n  CFA disables and blocks any request to modify files (in this case, writing & saving data), so PiecesOS is unable to launch itself.\n</Callout>\n\nKeep in mind that this path references the specific PiecesOS version, and so will change over time as long as you continue to update the software. You can also disable CFA as a security measure if you do not require it as part of an enterprise scenario or for any other reason.\n\nPiecesOS uses vision processing to ingest context from foreground applications horizontally.\n\nTo decide which apps PiecesOS has access to, you can [easily enable and disable specific sources from the Long-Term Memory Access Control](https://docs.pieces.app/products/core-dependencies/pieces-os/quick-menu#long-term-memory-access-control) panel.\n\n## Checking Hardware Specifications\n\nYou may need to check your system's specifications if you continue to experience issue[s, especially when trying to use local LLM](https://docs.pieces.app/products/core-dependencies/pieces-os/quick-menu#long-term-memory-access-control)s.\n\nTo check your device specifications on Windows:\n\n<Steps>\n  <Step title=\"Open the Windows search\">\n    Press the `Windows` key on your keyboard or the `Windows Icon` in the task bar.\n  </Step>\n\n  <Step title=\"Open Run\">\n    Type **“run”** and press `enter`.\n  </Step>\n\n  <Step title=\"Find Dxdiag\">\n    Type `dxdiag` and press `enter` or click the blue `OK` button.\n  </Step>\n</Steps>\n\nThe **System** tab displays your processor, the number of CPU cores, and memory (RAM), while the **Display** tab lists your GPU, its manufacturer (e.g., NVIDIA, AMD, Intel), and the available video memory (VRAM).\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/windows_checking_hardware_specs.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Checking Windows Version\n\nIf the Pieces Installer isn't working properly, you might be using an outdated version of Windows. Pieces requires at least **Windows 10 20H0 or higher**.\n\nTo find out your Windows version, press the `Windows` and `R` keys together, type **winver** in the pop-up window, and press `Enter`.\n\nA new window will open called *About Windows*, which will display your current Windows version.\n\n<Callout type=\"tip\">\n  If this doesn't work, you’re likely using a Windows version lower than Windows 10.\n</Callout>\n\n### Restart the Pieces Desktop App\n\nAfter trying any of the fixes above, it’s recommended that you restart your desktop and the Pieces Desktop App.\n\nThis ensures all caches are clean and the computer is refreshed.\n\nIf the problem persists, please open a <a target=\"_blank\" href=\"https://github.com/pieces-app/support/issues\">**GitHub issue**</a> for further assistance or book a call with our engineers.",
    "lastModified": "2025-06-04T17:24:57.737Z",
    "filePath": "desktop/troubleshooting/windows.md"
  },
  "/docs/desktop/troubleshooting": {
    "slug": "/docs/desktop/troubleshooting",
    "metadata": {
      "title": "Troubleshooting",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Using the Guides\n\nClick one of the links below to get started troubleshooting on your device—or [browse the cross-platform troubleshooting documentation](https://docs.pieces.app/products/desktop/troubleshooting/cross-platform) for more general fixes.\n\n***\n\n| [Cross-Platform](https://docs.pieces.app/products/desktop/troubleshooting/cross-platform) | [macOS](https://docs.pieces.app/products/desktop/troubleshooting/macos) |\n| ----------------------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n| [Windows](https://docs.pieces.app/products/desktop/troubleshooting/windows)               | [Linux](https://docs.pieces.app/products/desktop/troubleshooting/linux) |\n\n***\n\n## Cross-Platform Issues\n\nThis guide covers troubleshooting for the Pieces Desktop App and PiecesOS, including updates, connectivity, system requirements, checking hardware specifications, and fixing crashes, and more.\n\n<Card title=\"macOS + Windows + Linux\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743185867468/77f2c73e-fe75-4c7e-9bc4-ee69598df7fb.png\">\n  Use the Cross-Platform page if you’re not sure where to begin or if your issue isn’t clearly related to your operating system.\n\n  On the [Cross-Platform troubleshooting guide](https://docs.pieces.app/products/desktop/troubleshooting/cross-platform), you’ll find:\n\n  * [Tips on restarting PiecesOS and Pieces for Developers Desktop App](https://docs.pieces.app/products/desktop/troubleshooting/cross-platform#restarting-pieces-suite--checking-updates)\n\n  * [Links to common installation issues on your OS](https://docs.pieces.app/products/desktop/troubleshooting/cross-platform#common-installation-issues)\n\n  * [Links to related documentation on checking hardware specifications on your OS](https://docs.pieces.app/products/desktop/troubleshooting/cross-platform#checking-hardware)\n</Card>\n\n## macOS Issues\n\nThis guide shows how to fix installation and update problems with the Pieces Desktop App on macOS.\n\nIt includes steps for manual installation using DMG or Homebrew, checking for updates, and confirming your macOS version and CPU type. It also gives steps to solve common system compatibility and installation errors.\n\n<Card title=\"macOS\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743185988569/d00ea8b3-2dcd-4da1-a2c3-47a12b6c42ae.png\">\n  The [macOS troubleshooting guide](https://docs.pieces.app/products/desktop/troubleshooting/macos) provides information and guides on:\n\n  * [Alternative Installation Methods](https://docs.pieces.app/products/desktop/troubleshooting/macos#alternative-installation-methods)\n\n  * [How to verify your macOS version](https://docs.pieces.app/products/desktop/troubleshooting/macos#checking-os-version)\n\n  * [Updating the Pieces Desktop App](https://docs.pieces.app/products/desktop/troubleshooting/macos#updating-the-pieces-desktop-app)\n</Card>\n\n## Windows Issues\n\nWindows users can find help for fixing problems with the Pieces Desktop App in this guide.\n\nThis includes steps for manual installation using .exe or WinGet, how to update the app, solutions for system updates, app dependencies, hardware compatibility, and instructions on checking your Windows version and device specs.\n\nIt also covers how to ensure a clean restart after making fixes.\n\n<Card title=\"Windows\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743186019019/1e8789da-4614-46e3-bea7-8fc8f50ceea1.png\">\n  The [Windows troubleshooting guide](https://docs.pieces.app/products/desktop/troubleshooting/windows) provides information and guides on:\n\n  * [Alternative installation methods for non-Suite installs](https://docs.pieces.app/products/desktop/troubleshooting/windows#alternative-installation-methods)\n\n  * [Checking for Windows installation updates](https://docs.pieces.app/products/desktop/troubleshooting/windows#versions--updates)\n\n  * [Verifying the App Installer is up-to-date](https://docs.pieces.app/products/desktop/troubleshooting/windows#updating-the-microsoft-store--app-installer)\n\n  * [Viewing hardware specifications using dxdiag](https://docs.pieces.app/products/desktop/troubleshooting/windows#checking-hardware-specifications)\n</Card>\n\n## Linux Issues\n\nThis guide explains how to troubleshoot the Pieces Desktop App on Linux, including updating via Snap, checking distribution compatibility, and fixing installation or display issues, and more.\n\n<Card title=\"Linux\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743186291298/debc8d14-c762-488e-99f5-042e4244591f.png\">\n  The [Linux troubleshooting guide](https://docs.pieces.app/products/desktop/troubleshooting/linux) provides information and guides on:\n\n  * [Confirming compatibility with your Linux distribution](https://docs.pieces.app/products/desktop/troubleshooting/linux#checking-distribution-compatibility)\n\n  * [Using snap commands to update the Pieces Desktop App](https://docs.pieces.app/products/desktop/troubleshooting/linux#updating-pieces-desktop)\n\n  * [Adjusting graphics settings if you encounter UI issues](https://docs.pieces.app/products/desktop/troubleshooting/linux#adjusting-grapics--display-settings)\n</Card>\n\n## Additional Assistance\n\nIf you’ve followed the applicable troubleshooting steps and still experience problems, consider visiting our community forums for additional guidance, opening a GitHub issue, or booking a call with our engineers.\n\n[You can also find additional support resources here.](https://docs.pieces.app/products/support)",
    "lastModified": "2025-06-04T17:24:57.714Z",
    "filePath": "desktop/troubleshooting.md"
  },
  "/docs/desktop/workstream-activity": {
    "slug": "/docs/desktop/workstream-activity",
    "metadata": {
      "title": "Introduction to Workstream Activity",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pfd_docs_figmas/workstream_activity%20.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Overview\n\nThe Workstream Activity view in the Pieces Desktop App integrates with the new-and-improved Long-Term Memory Engine (LTM-2) to capture and summarize your recent tasks, discussions, code reviews, and more.\n\nBy automatically generating concise roll-ups of your workflow, Workstream Activity aims to *eliminate* the repetitive context-setting required by most AI tools.\n\n<Callout type=\"tip\">\n  LTM-2—also referred to as *Long-Term Memory Engine*—is available as part of PiecesOS, which is required for the Pieces Desktop App.\n\n  Make sure you have the latest versions installed to take advantage of this feature.\n</Callout>\n\n## Main View\n\nOnce you access Workstream Activity, you’ll see two main UI elements:\n\n1. **Activity Sidebar (Left Panel)**: A chronological list of your LTM roll-ups. Each roll-up is timestamped (e.g., “9:04 AM – 9:14 AM”) with a descriptive title (such as “Documentation & LTM-2 Prep”).\n\n2. **Roll-Up Details (Right Panel)**: Selecting a roll-up displays its sections and bullet points, including embedded links, references, or code snippet IDs.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/workstream_activity/new_workstream_activity_media/ltm_rollup_demo_screenshot.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Long-Term Memory (LTM-2) Engine\n\nLong-Term Memory is an advanced memory agent that captures your workflow context at repeated intervals and preserves it for up to *nine months*.\n\nInstead of starting fresh with every AI query, you can use LTM-2’s persistent memory to pick up any past conversation, code snippet, or link you’ve encountered.\n\nVisit our [Core Dependencies documentation](https://docs.pieces.app/products/core-dependencies) read more about LTM.\n\n### LTM Roll-Ups\n\nEach *roll-up* is a one-page summary that includes information and specific sections, such as:\n\n* **Core Tasks & Projects**: A concise, but rich overview of projects, tasks or specific initiatives you’ve worked on—including problems and solutions (and how you came to that solution).\n\n* **Key Decisions & Discussions**: Important conversations or choices you made, mentioning with whom you had discussions or meetings or who shared critical details that had implications on your workflow.\n\n* **Documents & Code Reviewed**: References to any files, articles, or snippets you accessed, often deep-linked with clickable URLs (where applicable).\n\n* **Follow-Up Actions**: Unfinished items, suggestions for next steps, and reminders.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/workstream_activity/new_workstream_activity_media/gifs/open_all_4_different_rollups.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Interacting with LTM Roll-Ups\n\nEach roll-up offers multiple interaction points:\n\n* `Start Copilot Chat`: Immediately open a Pieces Copilot Chat session scoped to that roll-up’s context, eliminating the need to re-explain your background or goals.\n\n* `Copy` / `Download`: Export the roll-up as plain text or Markdown, letting you archive or share your summary outside of Pieces.\n\n* `Deep Links`: Open references directly in your browser. If the roll-up mentions a specific blog or document, you can jump straight to it from within Pieces.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/workstream_activity/new_workstream_activity_media/gifs/start_chat_from_copilot.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  If you remember that a teammate shared a solution link last month, you can locate that exact snippet, conversation, or link by searching the relevant keyword in Workstream Activity.\n</Callout>\n\n### Generating LTM Rollups\n\nIf your workflow context falls outside the default 30-minute roll-up window, you can generate a manual Workstream Rollup instead.\n\nThis is especially useful when you want to capture a broader time range—like **Today** or **This Afternoon**—which might span from 12:00 P.M. to 4:28 P.M., for example.\n\nCreating a roll-up across a wider time frame offers a more comprehensive view of your recent work and contextual activity. It’s a great way to zoom out and get a high-level snapshot of what’s been accomplished, especially when shorter intervals don’t provide enough detail.\n\nTo do this, click the white `plus` icon at the bottom left of the **Workstream Activities** view.\n\nThis opens up a *Time Range Selection* menu, which allows you to generate a summary based on a wide variety of time ranges:\n\n| **Range**              | **Example**                          |\n| ---------------------- | ------------------------------------ |\n| *Just Now*             | 4:35PM → 4:36 PM                     |\n| *Last Couple Minutes*  | 4:33 PM → 4:35 PM                    |\n| *Within the Last Hour* | 3:36PM → 4:33 PM                     |\n| *Around Lunch*         | 12:00 PM → 1:00 PM                   |\n| *Yesterday Afternoon*  | Yesterday 12:00PM → 5:00PM           |\n| *Yesterday Morning*    | Yesterday 5:00AM → 12:00 PM          |\n| *This Month*           | April 1, 12:00AM → April 17, 4:36 PM |\n\n… and many more. In total, there are *31 time ranges* to select from to best fit your use case.\n\nThen, select your desired time ranges, and click the `green checkmark` icon to generate the summary.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/workstream_activity/on_demand_rollup_summary.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n## Use Cases\n\nWorkstream Activity turns your daily work into a rich, queryable memory—so you never have to waste time re-explaining, re-documenting, or retracing your steps.\n\n<Card title=\"Why use the Workstream Activities feature?\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743105695482/2e6005ea-3c80-4105-a983-7680b3dd380d.png\">\n  The Workstream Activity feature centralizes your workflow context, tackling a major productivity blocker in AI-assisted development—*short-term memory.*\n\n  It eliminates the need to repeat information to an AI assistant, ensures project continuity, provides a powerful search for past discussions or documents, and allows for flexible exports to share or store roll-ups.\n</Card>\n\nWith support from the LTM-2 engine, it becomes easy to search, share, and summarize critical moments from your workflow.\n\nHere are some practical ways to use it:\n\n<AccordionGroup>\n  <Accordion title=\"Create Context Packs for Onboarding New Team Members\">\n    Filter and export roll-ups related to a specific project or time range, and then share them with new hires so they can instantly understand decisions, architecture, and open tasks, without the need for lengthy handoffs.\n  </Accordion>\n\n  <Accordion title=\"Build AI-Ready Summaries for Async Standups and Check-Ins\">\n    Instead of writing updates from scratch, turn a roll-up into a formatted summary or paste it into Pieces Copilot for a clean, human-readable update.\n  </Accordion>\n\n  <Accordion title=\"Generate Internal Documentation from Real Workflows\">\n    Use LTM summaries as the base for internal docs or knowledge bases. Each roll-up captures exactly what was discussed, reviewed, or built—no guesswork needed afterward.\n  </Accordion>\n\n  <Accordion title=\"Recover Forgotten Context After a Break\">\n    If you’ve been away from a project for a few days (or weeks), scroll back through Workstream Activity to instantly recall what you were doing, what was pending, and what resources were relevant.\n  </Accordion>\n\n  <Accordion title=\"Audit Past Decisions and Review Rationale\">\n    Return to a past roll-up to see why a decision was made, who was involved, and what options were discussed—perfect for retrospectives or incident reviews.\n  </Accordion>\n\n  <Accordion title=\"Track Research and Learning Progress Over Time\">\n    Whether you’re exploring new tech, debugging a complex problem, or reviewing articles, your LTM-2 roll-ups capture the learning trail so you can build on it later—or share it with others.\n  </Accordion>\n</AccordionGroup>\n\nWant to keep reading?\n\nCheck out this quick guide for more use cases, featuring in-depth, real-world scenarios on [using the Workstream Activities view.](https://docs.pieces.app/products/quick-guides/ltm-prompting/workstream-activity)\n\n### Privacy & Source Control\n\n<mark>Your data is yours to manage.</mark>\n\nAt any time, even after a summary has been generated, you can disable sources from which LTM captures workflow data. Since LTM is available for use outside of the Pieces Desktop App, there are two locations from which you can make these changes.\n\nIn the Workstream Activity view, there is an LTM Access Control modal designated by a grid-like icon—clicking this opens the modal, where you can toggle or un-toggle data capture from specific sources.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/workstream_activity/new_workstream_activity_media/ltm_pfd_access_control.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nIn the PiecesOS task bar window, you can [disable any sources you don’t wish to capture](https://docs.pieces.app/products/core-dependencies/pieces-os/quick-menu#quick-menu-actions) (e.g., personal browsing activity or data from messaging applications) through the LTM Access Control panel.\n\nEvents gathered from disabled sources will be *removed* from your roll-ups so they don’t appear in Workstream Activity or Pieces Copilot Chats.",
    "lastModified": "2025-06-04T17:24:57.740Z",
    "filePath": "desktop/workstream-activity.md"
  },
  "/docs/desktop": {
    "slug": "/docs/desktop",
    "metadata": {
      "title": "Pieces for Developers Desktop App",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/pfd_docs_figmas/all_logos.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Meet the Pieces Desktop App\n\nThe **Pieces for Developers Desktop Application** contains a suite of AI-powered tools designed to improve productivity by utilizing your workflow context and enabling you to make intelligent decisions on a day-to-day basis with generative AI.\n\nPowered by [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os)—the heart and soul of Pieces for Developers—the Pieces Desktop app is the ultimate assistant for developers and knowledge workers for code, context, and creativity.\n\nLet’s dive in!\n\n<CardGroup cols={2}>\n  <Card title=\"Getting Started\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732224138565/e3e45754-544d-4cf1-8ca0-a07c8b7c12b7.png\">\n    Follow these instructions to download and install the Pieces for Developers Desktop Application for [macOS](https://docs.pieces.app/products/meet-pieces/macos-installation-guide), [Windows](https://docs.pieces.app/products/meet-pieces/windows-installation-guide), or [Linux](https://docs.pieces.app/products/meet-pieces/linux-installation-guide).\n  </Card>\n\n  <Card title=\"Support\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732224146114/4484e983-32a4-4526-9fa6-ecb4f418d45d.png\">\n    Explore troubleshooting options, visit our [support page](https://docs.pieces.app/products/support), or <a target=\"_blank\" href=\"https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr\">book a call</a> directly with our engineers.\n  </Card>\n</CardGroup>\n\n<guides-overview-card />\n\n## Using the Desktop App\n\nThe Pieces Desktop app is designed to act as a *hub* for the three main features of the Pieces Suite, some of which can be found within Pieces extensions and plugins and PiecesOS—the **LTM-2 Engine, Pieces Copilot, and Pieces Drive.**\n\nWith the Pieces Desktop App, you have access to dedicated views for the context captured by Long-Term Memory and the new Workstream Activity feature, Pieces Copilot, and Pieces Drive.\n\nIf you know what you’re after, jump to our [documentation on the different navigation views.](https://docs.pieces.app/products/desktop/navigation)\n\n## Core Features\n\nThere are three core components of Pieces that are intelligently integrated to minimize context switching and improve productivity in your daily workflow.\n\n### LTM & Workstream Activity\n\nKeep track of your workflow so you can access stored context from yesterday, last week, or even *last month*—whenever you need it.\n\nImagine what you could do if you could always recall past solutions, find specific links that were lost to your browser history, or remember what so-and-so said in that one Slack channel about that new staging release?\n\n[The Long-Term Memory (LTM-2) ](https://docs.pieces.app/products/core-dependencies/pieces-os#ltm-2)<a target=\"_blank\" href=\"https://docs.pieces.app/products/core-dependencies/pieces-os#ltm-2\">engine</a> ensures that *nothing* slips through the cracks.\n\nThe new, incredibly powerful [Workstream Activity](https://docs.pieces.app/products/desktop/workstream-activity) feature provides a sleek UI for interacting with saved data from up to **9 months ago** in an easily digestible *LTM Roll-Up* format, allowing you to start conversations with that context or copy and download it.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/desktop_app_MAIN/gifs/scrolling_workstream_activities_demo_homepage.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  Read our [documentation on the new Long-Term Memory (LTM-2) Engine](https://docs.pieces.app/products/core-dependencies/pieces-os#ltm-2) for more information on what it is and how it works.\n</Callout>\n\n### MCP Support\n\nThe Pieces for Developers suite, powered by the LTM-2 Engine through PiecesOS, also provides support for [Model Context Protocol (MCP) servers](https://docs.pieces.app/products/mcp/get-started) through Server-Sent Events (SSEs).\n\nWith the Pieces MCP, you can thread rich workflow context stored in the Pieces Drive through to [Cursor](https://docs.pieces.app/products/mcp/cursor), [GitHub Copilot](https://docs.pieces.app/products/mcp/github-copilot), [Goose](https://docs.pieces.app/products/mcp/goose), and other IDEs and productivity tools, making Pieces a *platform* for using long-term context in other workflows outside of just the Pieces Desktop App.\n\n<Callout type=\"tip\">\n  To integrate the Pieces MCP into one of the available integrations, copy the SSE endpoint URL and/or `.json` schema into your IDE of choice.\n\n  You can find the MCP URL inside the **Model Context Protocol (MCP)** tab within **Settings**.\n</Callout>\n\n***\n\n*Pieces MCP → Cursor*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/misc/cursor_ask_about_youtube_tutorial.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n***\n\n### Pieces Copilot\n\nEngage with generative AI using cloud-hosted or local-only LLMs to solve challenges, generate new code, debug tricky issues, or get a second pair of eyes on some complex logic—all with real-time, context-aware assistance.\n\nThe [Pieces Copilot](https://docs.pieces.app/products/desktop/copilot) offers optional integration with Long-Term Memory, so you can ask it about previous GitHub commits, request help refactoring your code based on a discussion with a coworker from the other day, and more.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/desktop_app_MAIN/desktop_app_pieces_copilot.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Pieces Drive\n\nTransform the way you manage your code snippets, documentation, and creative ideas with [Pieces Drive.](https://docs.pieces.app/products/desktop/drive)\n\nSave and organize your materials in one place, then watch as AI-enriched metadata brings context to every snippet—whatever the objective, Pieces Drive makes it simple to find exactly what you need.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/desktop_app_MAIN/gifs/demo_pieces_drive_details.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Troubleshooting\n\nDesigned for three different operating systems, the Pieces for Developers Desktop Application has [in-depth troubleshooting documentation](https://docs.pieces.app/products/desktop/troubleshooting) for cross-platform issues and OS-specific issues.\n\n## Support\n\nIf you're running into an issue during the installation process or while using the Pieces Desktop app, <a target=\"_blank\" href=\"https://docs.pieces.app/products/support\">check out our support page</a> for resources, helpful links, and an option to reach out directly to our team members.\n\n## Get Started with Pieces\n\nReady to install the Pieces Desktop Application? Let’s get you on your way.\n\nClick one of the links below to be redirected to your platform-specific (OS) download and installation *Quickstart* page:\n\n* [macOS](https://docs.pieces.app/products/meet-pieces/macos-installation-guide)\n\n* [Windows](https://docs.pieces.app/products/meet-pieces/windows-installation-guide)\n\n* [Linux](https://docs.pieces.app/products/meet-pieces/linux-installation-guide)",
    "lastModified": "2025-06-04T17:24:57.572Z",
    "filePath": "desktop.md"
  },
  "/docs/extensions-plugins/jetbrains/commands": {
    "slug": "/docs/extensions-plugins/jetbrains/commands",
    "metadata": {
      "title": "Pieces for JetBrains Plugin Commands",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/commands/keymap_window.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Shortcut Table\n\nThere are a number of actions related to the [Pieces Copilot](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot) and [Pieces Drive management ecosystem](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive) that are accessible with shortcuts.\n\n***\n\n| **Command**                                                                                                                         | **macOS**   | **Windows/Linux** |\n| ----------------------------------------------------------------------------------------------------------------------------------- | ----------- | ----------------- |\n| [Save a Snippet](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/save-snippets#via-right-click-menu--hotkeys)   | `⌘+⌥+p`     | `ctrl+alt+p`      |\n| [Quick Search](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/search-reuse#viewing-and-reusing-saved-snippets) | `⌘+shift+p` | `ctrl+shift+p`    |\n| [Rename](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/edit-update#editing-snippet-metadata)                  | `shift+F6`  | `shift+F6`        |\n| [Reclassify](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/edit-update#editing-snippet-metadata)              | `F6`        | `F6`              |\n| [Edit Description](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/edit-update#editing-snippet-metadata)        | `⌘+d`       | `ctrl+d`          |\n| [Delete](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/edit-update#editing-snippet-metadata)                  | `delete`    | `backspace`       |\n| [Share via Pieces Link](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/sharing#via-keyboard-shortcut)          | `⌘+L`       | `ctrl+L`          |\n| [Insert at Caret](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/edit-update#editing-snippet-metadata)         | `⌘+I`       | `ctrl+I`          |\n\n***\n\n## Command Table\n\nYou can easily access these commands through the **Command Palette** using the shortcuts—`⌘+shift+p` (macOS) and `ctrl+shift+p` (Windows/Linux).\n\nClick on the Actions quick search option and type the desired command.\n\n***\n\n| **Pieces Copilot**                   | Launches the Pieces Copilot in the side panel, providing contextual insights and assistance for the currently open code.                                                                      |\n| ------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **Pieces Drive**                     | Opens the Pieces Drive window, showing information about the Pieces for JetBrains Plugin, the Pieces Community, and Support resources.                                                        |\n| **Ask Copilot**                      | Allows you to ask the Pieces Copilot about the active file open in the JetBrains Environment if no code is selected. If a code section is selected, it allows you to ask about the selection. |\n| **Import User Materials to Pieces**  | Import external user materials (i.e., snippets) into Pieces Drive to seamlessly integrate them into your workflow.                                                                            |\n| **Disconnect from Pieces Cloud**     | Disconnect from your Pieces Cloud account while keeping local functionality intact.                                                                                                           |\n| **Connect to Pieces Cloud**          | Connect to the Pieces Cloud and sync VS Code with Pieces Cloud.                                                                                                                               |\n| **Sign into Pieces**                 | Sign in to your Pieces Cloud account and sync local databases.                                                                                                                                |\n| **Save File to Pieces**              | Save the active code file in the VS Code editor to Pieces.                                                                                                                                    |\n| **Save Current Selection to Pieces** | Save a selected code snippet to Pieces.                                                                                                                                                       |\n| **Sign Out**                         | Log out of your Pieces account entirely, disabling local and cloud-connected features.                                                                                                        |\n| **Pieces Copilot**                   | Opens the Pieces Copilot on the side of the VS Code editor.                                                                                                                                   |\n| **Search Pieces Drive**              | Opens the Pieces Drive window, allowing you to search.                                                                                                                                        |\n\n***",
    "lastModified": "2025-06-04T17:24:57.775Z",
    "filePath": "extensions-plugins/extensions-plugins/jetbrains/commands.md"
  },
  "/docs/extensions-plugins/jetbrains/configuration": {
    "slug": "/docs/extensions-plugins/jetbrains/configuration",
    "metadata": {
      "title": "Configuration",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Supported LLMs\n\nWe constantly update and configure our plugins and extensions, like the Pieces for JetBrains Plugin, to work with the latest LLMs.\n\nThe Pieces for JetBrains Plugin currently supports [54 different cloud and local models.](https://docs.pieces.app/products/large-language-models)\n\n[Read documentation on how to switch the LLM](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot/llm-settings) utilized by the Pieces for JetBrains Plugin from within your IDE.\n\n## Opening Pieces Settings\n\nTo access the **Pieces Settings** in the Pieces for JetBrains Plugin, click the `Pieces Settings` icon in your sidebar.\n\nThis action will open the Pieces Settings in a new sidebar.\n\n## Overriding Commands in JetBrains\n\nIf you want to change the shortcuts for any Pieces functionality within your JetBrains IDE, like [saving a snippet](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/save-snippets#via-right-click-menu--hotkeys) or [generating a shareable link](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/sharing#how-to-share-a-saved-snippet), you can:\n\n<Steps>\n  <Step title=\"Open Settings\">\n    Navigate to **Settings** `⌘+,` (macOS) or `ctrl+,` (Windows/Linux).\n  </Step>\n\n  <Step title=\"Search for Keymap\">\n    Enter **Keymap** into the search bar.\n  </Step>\n\n  <Step title=\"Go to Plugins\">\n    Click on the Plugins section.\n  </Step>\n\n  <Step title=\"Locate Pieces Folder\">\n    Find the **Pieces** folder towards the bottom of the list (in alphabetical order).\n  </Step>\n\n  <Step title=\"Open Pieces Function\">\n    **Double-click** or **press** `return` or `enter` on a Pieces function.\n  </Step>\n\n  <Step title=\"Assign Keyboard Shortcut\">\n    Select `Add Keyboard Shortcut` and enter your preferred key mapping.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/configuration/change_keybinds.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## Checking Your JetBrains IDE Version\n\nYou can easily check the version of your JetBrains IDE by opening up the **Settings** page using `⌘+,` (macOS) or `ctrl+,` (Windows/Linux) and searching for **Updates** under **System Settings.**\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731946003216/1e87da6c-ba14-4256-866e-d0be2002aae3.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Settings Overview\n\nSeveral other configurable settings related to the functionality of the Pieces for JetBrains Plugin directly affect the usability of some of the plugin’s features. You can also enable or disable several preferences.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/configuration/new_settings_menu.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Account & Cloud Integrations (Beta)\n\nOpened through the Pieces **Settings** sidebar or via the **Extensions** menu. This section displays your account details and beta-program status.\n\n* **Account Name**: The display field showing your user name.\n\n* **Account Email**: A display field showing your email address.\n\n* **Early Access Program**: an indicator showing whether you’re enrolled in the beta program.\n\n### Personal Cloud (Beta)\n\nManage your connection to the Pieces personal cloud.\n\n* **Status**: An indicator + timestamp showing whether your personal cloud is **connected or disconnected**, and when it was last updated.\n\n* **Personal Domain**: A display field with your custom subdomain (e.g., `<your-domain>.`[`pieces.cloud`](http://pieces.cloud)).\n\n* **Backup & Restore Data**: A button to back up or restore your cloud data.\n\n### Saved Material Auto-Enrichment\n\nConfigure how much context is automatically added when saving snippets.\n\n* **Auto-Generated Context**: The dropdown allows you to select the level of auto-generated context (**None**, **Low**, **Medium**, **High**).\n\n### ML Processing\n\nControl which AI models and memory engine the extension uses.\n\n* **Processing Mode**: A dropdown to choose **Local**, **Cloud**, or **Blended** processing; includes a brief description of resource usage.\n\n* **Long-Term Memory Engine**: Toggle to enable/disable; auto-generates Workstream Activities and provides temporal context.\n\n* **Long-Term Memory Source Control**: A button to manage which memory sources the engine interacts with.\n\n* **Clear Long-Term Memory Engine Data…**: A button to purge persisted memory for a specified date range.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/configuration/ml_processesing_blendmode.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Model Context Protocol (MCP)\n\nConfigure your local MCP server connection.\n\n* **Server URLs**: A text field listing the Pieces MCP endpoint URLs (e.g.\\\n  `http://localhost:39300/model_context_protocol/2024-11-05/sse`).\n\n* **View Documentation**: A link to the MCP usage documentation.\n\n<Callout type=\"alert\">\n  Currently, the JetBrains IDE Suite does not support the SEE protocol Pieces uses.\n</Callout>\n\n### CodeLenses\n\nManage the integration with VS Code’s CodeLens UI.\n\n* **Enable Pieces Code-Lens**: A checkbox to enable or disable code-lens features.\n\n* **Use Same Conversation For Code-Lens**: A checkbox to share the Copilot conversation across all code-lens actions.\n\n### Code Block Actions\n\nDetermine how code execution commands are handled.\n\n* **Use Integrated Terminal**: A checkbox to run “Run In Terminal” commands in the IDE’s integrated terminal instead of an external shell.\n\n### Saved Materials\n\nSettings related to snippet-saving behavior.\n\n* **Close Snippet Editor on Save**: A checkbox to automatically close the snippet editor tab when saving.\n\n* **Enable Automatic Link Copy**: A checkbox to copy the generated snippet link to your clipboard automatically.\n\n### PiecesOS Configs\n\nConfigure how PiecesOS launches alongside your IDE.\n\n* **Launch on Startup**: The checkbox automatically starts PiecesOS when VS Code launches.\n\n* **Auto Launch on Interaction**: A checkbox to start PiecesOS the first time you interact with the extension.\n\n### Autocomplete\n\nEnable snippet completion suggestions.\n\n* **Enable AutoComplete**: A checkbox to suggest saved snippets as you type.\n\n### Git Integration\n\nConfigure metadata extraction from your Git history.\n\n* **Pieces › Save › Git: Related Links**: A checkbox to attach commit links when saving a snippet.\n\n* **Pieces › Save › Git: Related People**: A checkbox to attach commit authors when saving a snippet.\n\n* **Pieces › Save › Git: Description**: A checkbox to use commit messages as snippet descriptions.\n\n* **Pieces › Save › Git: Tags**: A checkbox to attach Git tags when saving a snippet.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/configuration/git_integration.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Notifications\n\nControl update notifications for the extension.\n\n* **Show Update Extension Notification**: A checkbox to prompt on startup if the extension is outdated.\n\n### Onboarding\n\nManage the first-run tutorial state.\n\n* **Reset Onboarding**: A button to clear the onboarding state on next launch.\n\n* **Launch Onboarding**: A button to reopen the onboarding tutorial immediately.\n\n### Telemetry & Analytics\n\nManage data-sharing preferences.\n\n* **Telemetry & Diagnostics**: A checkbox to share anonymous telemetry and crash data.\n\n* **Share Error Analytics**: A checkbox to share error reports to help improve Pieces.\n\n* **Share Usage Analytics**: A checkbox to share feature-usage metrics to help improve Pieces.\n\n### Support\n\nQuick links to help and feedback.\n\n* **Documentation**: This link will take you to online documentation.\n\n* **Submit Feedback/Issues**: This link will take you to the GitHub issues page or support form.\n\n### PiecesOS Information\n\nDisplays version and connection details for PiecesOS.\n\n* **PiecesOS Version**: The display field shows the current version number.\n\n* **Check for PiecesOS Updates**: A button to manually check for updates.\n\n* **PiecesOS Port**: The display field shows the port on which PiecesOS is listening.\n\n### Settings Applet\n\nShows the applet version for the extension settings.\n\n* **Version**: A display field showing the current Settings Applet version number.",
    "lastModified": "2025-06-04T17:24:57.781Z",
    "filePath": "extensions-plugins/extensions-plugins/jetbrains/configuration.md"
  },
  "/docs/extensions-plugins/jetbrains/copilot/chat": {
    "slug": "/docs/extensions-plugins/jetbrains/copilot/chat",
    "metadata": {
      "title": "Generative AI Conversations",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Accessing the Pieces Copilot Chat in JetBrains IDEs\n\nThere are several ways to open up the Pieces Copilot chat window in any JetBrains IDEs.\n\n### via Right-Click Context Menu\n\n<Steps>\n  <Step title=\"Highlight Any Code Segment\">\n    Select some code in your active file\n  </Step>\n\n  <Step title=\"Select a Management Option\">\n    Select `Ask Copilot About Selection` or `Ask Copilot About File` from the tool menu to open a chat with the selected context.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/ask_about_selection.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### via the Sidebar\n\n<Steps>\n  <Step title=\"Select Copilot Tab in the Sidebar\">\n    Select the `Copilot Chat` tab within the JetBrains sidebar to open the chat interface.\n  </Step>\n\n  <Step title=\"Select the Starred Icon\">\n    Select the **Starred Icon** to add context to the Copilot chat\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/add_context_and_ask.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### via Keyboard Shortcuts\n\n<Steps>\n  <Step title=\"Open Search Everywhere\">\n    Press `ctrl+shift+a` (Windows/Linux) or `⌘+shift+a` (macOS) to open the `Search Everywhere` window\n  </Step>\n\n  <Step title=\"Query Pieces Copilot\">\n    Type **\"Pieces Copilot\"** and select it from the search results to open the chat\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/searching_for_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### via AI Quick Actions\n\nUse the AI Quick Actions feature in the Pieces for JetBrains Plugin to quickly get an explanation for a confusing or forgotten function's logic.\n\nTry using the `Pieces: Explain` tool above your code to start a conversation about a particular function.\n\nThis triggers the Copilot Chat window, which outputs an explanation and summary of the code function.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/pieces_explain_quick_action.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nIn addition, there is also `Pieces: Comment`, which you can read more about <a target=\"_blank\" href=\"https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot/documenting-code#via-pieces-comment\">here</a>.\n\n## Contextualized Chats\n\nYou can utilize **2 different levels of contextual awareness** when initiating a Copilot chat (or adding code to an existing chat) with the Pieces Copilot.\n\n### Ask Copilot About Selection\n\nThe `Ask Copilot About Selection` command lets you interact with Copilot regarding specific code snippets, functions, or classes.\n\nTo use this feature:\n\n<Steps>\n  <Step title=\"Choose a Portion of Code\">\n    Select a portion of code you want to ask about.\n  </Step>\n\n  <Step title=\"Open the Command Palette\">\n    Open the command palette with `⌘+shift+p` on macOS or `ctrl+shift+p` on Windows/Linux. Type and execute the `Ask Copilot About Selection` command.\n  </Step>\n\n  <Step title=\"Enter Your Prompt\">\n    Type your prompt in the text input field and press `return` (macOS) or `enter` (Windows/Linux).\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/ask_about_selection_command_pallete.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nThis approach is ideal for localized queries requiring **quick insights** or **guidance** **on specific code functionality**.\n\n### Ask Copilot About Active File\n\nThe `Pieces Ask About Active File` feature focuses on the current file, offering tailored insights and assistance with debugging.\n\nThere are two ways to access this command:\n\n1. Right-click inside your file and select `Ask Copilot about File`, then type your query into the dropdown text input field.\n\n2. Open the command palette using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux) and enter `Ask About File`.\n\nOnce you've entered your question, the Pieces Copilot will analyze the file's context to deliver precise responses.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/ask_about_active_file.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis feature helps you understand file dependencies, methods, and structure. It also detects potential issues, suggests improvements, and more.\n\n<Callout type=\"tip\">\n  The `Pieces: Ask About Active File` feature can also be applied during onboarding purposes to get helpful explanations for unfamiliar code.\n</Callout>\n\n## Adding Context to Copilot Chats\n\nYou can add context to a chat by adding `Files`**,** `Folders`**,** `Snippets`**,** `Websites`**,** and `Messages`**.**\n\nThis greatly boosts the number of generative AI responses you receive that will actually benefit you. It can provide **hyper-specific** responses because it’s contextually aware of your code.\n\nTo do this, select the **Starred Message Icon** in the bottom-left corner of your Copilot Chat window, which is openable from the JetBrains IDE sidebar.\n\nClick the **Starred Message Icon,** then add whatever context items you need.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/add_context_copilot.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can also right-click a file from your project or active file tree and add that file as context to the conversation.\n\nThis can be done without opening the Pieces Copilot window. Right-click on a file in your open project and select `Add to Copilot Chat Context`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/add_to_copilot_context_file.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Adding Code Snippets\n\nYou can paste snippets of code as a code block inside of any Copilot Chat by clicking the `{ }` icon inside the chat window, then pasting in your code.\n\nThis is useful for bringing in code that isn’t present immediately in the active file as context, or for comparisons and suggestions.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/adding_code_to_chat.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Extracting Code from Screenshots\n\nYou can also extract code from screenshots directly from the Copilot chat menu by selecting `Extract Code from Screenshot`, selecting the desired screenshot from your **Finder** (macOS) or **File Explorer** (Windows/Linux) menu, and confirming.\n\nPieces Copilot will then scan the screenshot and generate the code captured from the image into the chat. You can copy, insert it at your cursor, save it as a snippet, and more.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/extract_from_screenshots.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## AI Quick Actions\n\nAbove the functions in your code, you can find the clickable `Pieces: Comment` and `Pieces: Explain` buttons.\n\nClick `Pieces: Explain` to open up the Pieces Copilot in the side window. The Pieces Copilot will automatically explain the purpose and function of that code within the chat.\n\nSimilarly, you can click `Pieces: Comment` above a function to have your preferred LLM generate documentation for that piece of code—you can then insert that code directly at the cursor by clicking `Insert at Cursor` or save it as a snippet using the built-in `Save to Pieces` button.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/chat/pieces_explain_quick_action.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Improving Code Consistency & Standardization\n\nThe Pieces Copilot Chat is designed to assist you with various coding tasks to boost productivity and enhance your workflow. This is done primarily by eliminating **context-switching** (needing to leave your IDE to access generative AI).\n\n### Naming Inconsistencies\n\nSuppose functions across your workspace use inconsistent naming patterns (e.g., `authenticateUser` in `authHandler.go` vs. `retrieveUserProfile` in `userHandler.go`). In that case, Pieces Copilot can suggest adopting a standardized naming convention for better readability and maintainability, like this:\n\n```c\n// authHandler.go\nfunc authenticateUser(ctx context.Context, credentials Credentials) (User, error) {\n    if credentials.Username == \"\" || credentials.Password == \"\" {\n        return User{}, errors.New(\"missing credentials\")\n    }\n}\n```\n\n### Inconsistent Error Handling\n\nIf error-handling strategies differ across files (e.g., structured errors in `authService.go` vs. inconsistent handling in `userService.go`), Pieces Copilot can help unify the approach:\n\n```c\n// authService.go\nfunc LoginUser(credentials Credentials) (string, error) {\n    token, err := authenticate(credentials)\n    if err != nil {\n        return \"\", fmt.Errorf(\"login failed: %w\", err)\n    }\n    return token, nil\n}\n```",
    "lastModified": "2025-06-04T17:24:57.795Z",
    "filePath": "extensions-plugins/extensions-plugins/jetbrains/copilot/chat.md"
  },
  "/docs/extensions-plugins/jetbrains/copilot/debugging-errors": {
    "slug": "/docs/extensions-plugins/jetbrains/copilot/debugging-errors",
    "metadata": {
      "title": "Fixing Errors with Pieces Copilot",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Using the Debugging Tool\n\nTo start debugging, locate your project's error or problematic code segment.\n\n<Callout type=\"tip\">\n  Errors are usually indicated by **red underscoring** surrounding the error or problematic lines of code.\n</Callout>\n\nThen, click the `Yellow Lightbulb` to the left of the buggy code, and click `Pieces: Copilot Fix`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/debugging_errors/lightbulb_fix.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nPieces Copilot will utilize whichever LLM you have currently active and analyze the issue. Then, it will open a Copilot Chat with suggestions, regenerate the code, and provide the option to insert it at the cursor mark—all with fresh code comments.\n\n## Why Debug with Pieces Copilot?\n\nDebugging with Pieces Copilot makes fixing errors easier and gives you AI-driven insights without interrupting your workflow in JetBrains.\n\nThis saves time by eliminating the need to search for solutions online or sift through extensive documentation, keeping your workflow efficient and minimizing distractions.\n\nAdditionally, each suggested fix has an explanation to help you understand and improve your coding practices while debugging.\n\n<Callout type=\"tip\">\n  The Pieces Copilot proactively identifies code issues—highlight your code, click the `Yellow Lightbulb`, and let it analyze the problem(s).\n</Callout>",
    "lastModified": "2025-06-04T17:24:57.801Z",
    "filePath": "extensions-plugins/extensions-plugins/jetbrains/copilot/debugging-errors.md"
  },
  "/docs/extensions-plugins/jetbrains/copilot/documenting-code": {
    "slug": "/docs/extensions-plugins/jetbrains/copilot/documenting-code",
    "metadata": {
      "title": "Code Comments",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Commenting Code Selections with Pieces Copilot\n\nPieces Copilot can analyze and **comment on any selected portion of your code,** explaining its logic line by line. This ensures your code is readable and easy for others to understand.\n\n### via Right-Click Menu\n\nTo add comments to your code from the toolbar, select the desired lines, right-click, hover over `Pieces`, and choose `Comment Selection with Copilot`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/documenting_code/hovering_comment_selection.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nPieces Copilot generates clear, contextual comments for the selected code in the Copilot chat window. Click `Insert at Cursor` to add the comments at your cursor's location. You can also click `Accept Changes` to insert the comments directly between the lines of code where you selected the code.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/documenting_code/comment_right_click.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Pieces: Comment\n\nA faster way to add documentation to a function you might have missed is to click the `Pieces: Comment` tool. This tool appears above actionable functions in your code that are visible on your screen.\n\nThis new [AI Quick Actions](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot/chat#via-ai-quick-actions) feature, like CodeLens actions that appear above functions near your cursor, can quickly generate comments to explain the purpose and logic of your code.\n\nTo get started, look for the **AI Quick Actions** buttons above individual functions in your code.\n\nOnce you find the **AI Quick Actions**, left-click on `Pieces: Comment`, then click `Accept Changes` to add the new comments directly into your code.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/documenting_code/comment_quick_action.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Why Use Code Comments?\n\nCode comments are crucial for **keeping a clean, well-documented codebase**. They give context for reviewers to focus on functionality and **make complex reasoning clear**, making the code easier to follow and maintain.\n\nGood documentation boosts code readability and speeds up onboarding for those new to the codebase. This benefits both current and **future development and lays a strong foundation for upgrades and iterations**.\n\nComments help you remember the purpose and function of the code, making it easier to understand after a break.\n\nThis feature is powerful. Need to document a few hundred lines of code? Just use `Comment Selection with Copilot`.",
    "lastModified": "2025-06-04T17:24:57.806Z",
    "filePath": "extensions-plugins/extensions-plugins/jetbrains/copilot/documenting-code.md"
  },
  "/docs/extensions-plugins/jetbrains/copilot/llm-settings": {
    "slug": "/docs/extensions-plugins/jetbrains/copilot/llm-settings",
    "metadata": {
      "title": "Supported LLMs",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Switching LLMs\n\nCurrently, the Pieces for JetBrains Plugin supports over 54 different cloud and local models, [which you can find here.](https://docs.pieces.app/products/large-language-models)\n\n## How to Switch Models\n\nTo get started, open the Pieces Copilot chat in the side-window using any of the available methods, such as opening a Copilot Chat with an option in the tool menu, using a quick action, selecting the Pieces icon from the sidebar, and other means.\n\nTo access the LLM menu within the Copilot Chat:\n\n<Steps>\n  <Step title=\"Access Copilot Chat\">\n    Open the Copilot Chat view by clicking the **sidebar icon**\n  </Step>\n\n  <Step title=\"Find Active Model\">\n    Look for the **active model** in the lower-left of the Copilot Chat view\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/llm_settings/changing_model.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n\n  <Step title=\"Change Active Model\">\n    Click the active model icon and select your preferred LLM from the menu\n  </Step>\n</Steps>\n\nThe Pieces Copilot will utilize that model for all AI-related features—no restart or refresh needed.\n\nDepending on your preferences and intended workflow, you can choose between cloud-hosted and local models.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/llm_settings/download_changing_local_model.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  Using local models allows for the flexibility to work in a completely offline environment without sacrificing Pieces Copilot.\n</Callout>",
    "lastModified": "2025-06-04T17:24:57.812Z",
    "filePath": "extensions-plugins/extensions-plugins/jetbrains/copilot/llm-settings.md"
  },
  "/docs/extensions-plugins/jetbrains/copilot/refactoring": {
    "slug": "/docs/extensions-plugins/jetbrains/copilot/refactoring",
    "metadata": {
      "title": "Refactoring Code",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Modifying your Code with Pieces Copilot\n\nModify your code to change error handling, rename functions, and add functionality in two ways.\n\n### via Right-Click Menu\n\nRight-click the highlighted code you want to modify, hover over `Pieces`, and click `Modify Selection with Copilot`.\n\nAfter clicking `Modify Selection with Copilot`, Pieces Copilot will open the Copilot chat window in the JetBrains sidebar, showing the proposed changes.\n\nReview the modifications and choose whether to accept them. If you do, the updates will automatically integrate into your codebase at the point where the code was selected, right at your cursor.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/refactoring/modify_code.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:57.817Z",
    "filePath": "extensions-plugins/extensions-plugins/jetbrains/copilot/refactoring.md"
  },
  "/docs/extensions-plugins/jetbrains/copilot": {
    "slug": "/docs/extensions-plugins/jetbrains/copilot",
    "metadata": {
      "title": "Pieces Copilot",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Generative AI Conversations\n\nIf you’re unsure how to implement a specific piece of functionality, stuck on a bug, or simply want a useful answer to something within your codebase, you can use the Pieces Copilot to receive context-aware responses to help you move forward.\n\nThe Pieces for JetBrains plugin provides several levels of conversation functionality, each of which is fully integrated with Pieces—you can enable the **Long Term Memory Engine (LTM-2)** for full, streamlined context across your entire workflow, or open a limited context conversation in the IDEs side view.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/MAIN_pieces_copilot/chat_window_open.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Adding Conversation Context\n\nThe Pieces Copilot lets you add specific folders or files to the conversation’s context window—like files from the codebase you’re working in—so that you always have explicit and accurate answers to pressing questions at your fingertips.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/MAIN_pieces_copilot/add_to_copilot_context_file.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nStart by right-clicking some code and select one of the following options from the tool menu:\n\n* `Ask Copilot About Selection`: Includes the active selected code with the Copilot chat.\n\n* `Ask Copilot About Active File`: Includes the entire active file with the Copilot chat for a broader range of context.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/MAIN_pieces_copilot/hovering_ask_about_selection.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Pieces Copilot Tools\n\nDiscover powerful AI-powered tools and features within the Pieces for JetBrains Plugin.\n\n### Documenting Code\n\nEffortlessly create meaningful code comments using the Pieces for JetBrains Plugin.\n\nBy analyzing your code's structure and purpose, [Pieces Copilot generates clear and helpful comments](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot/documenting-code#commenting-code-selections-with-pieces-copilot) to improve readability and facilitate maintenance.\n\nTo add documentation and comments to code, select the code snippet—no matter how long—then right-click, hover on `Pieces`, and click `Comment Selection with Copilot`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/MAIN_pieces_copilot/hovering_comment_selection.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis opens the Pieces Copilot in the JetBrains sidebar, which begins adding documentation to the highlighted snippet, from which you can select the `Insert at Cursor` option to add the comments to your code.\n\nYou can also click `Pieces: Comment`, an [AI Quick Action](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot/chat#ai-quick-actions) that lives above accessible functions within your code.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/MAIN_pieces_copilot/adding-code-comments-quick-action.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"info\">\n  Use this feature to maintain consistency in documentation and simplify handoffs for collaborative projects.\n</Callout>\n\n### Enhanced Debugging Tools\n\nDetect and address code issues quickly with the Pieces for JetBrains Plugin [Code Debugging feature](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot/debugging-errors). It pinpoints problems, suggests solutions, and provides detailed context, making bug fixes faster and more intuitive.\n\nThe code debugging feature is particularly useful for tackling complex tasks and ensuring code quality across projects.\n\nUsing this feature is simple—locate the error in the code, marked by a red underline. Hover over the section to view the quick debug information provided by JetBrains. Then, click on `More Actions` and select `Pieces: Copilot Fix`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/MAIN_pieces_copilot/pieces_fix_quick_action.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Generate & Update Code\n\nWith the Pieces for JetBrains Plugin, enhance your workflow using powerful AI Quick Actions:\n\n* `Pieces: Explain`: [Use this AI Quick Action to get an explanation and summary of the function](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot/chat#via-ai-quick-actions), making it easier to understand and document.\n\n* `Pieces: Comment`: [This AI Quick Action adds intelligent code comments](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot/documenting-code#via-pieces-comment) to the selected function based on the context of the code itself to ensure accuracy.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/MAIN_pieces_copilot/comment%20inline.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Selecting Your Pieces Copilot Runtime\n\nChoose between [different LLMs directly within JetBrains](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot/llm-settings) by accessing the sidebar and selecting your preferred model by clicking the currently utilized LLM under `Active Model` (Claude 3.5 Sonnet).\n\nOptions range from lightweight models for simple queries to advanced models for in-depth analysis, as well as **local** and **cloud-based LLMs.**\n\nThis flexibility allows you to tailor Pieces Copilot to your specific development needs, whether speed or accuracy.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/pieces_copilot/MAIN_pieces_copilot/changing_runtime.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nRead more about [what LLMs are available ](https://docs.pieces.app/products/extensions-plugins/jetbrains/configuration#supported-llms)with the Pieces for JetBrains Plugin.\n\n## Pieces Copilot As a Daily Driver\n\nThe Pieces Copilot is a powerful, adaptable tool that grows with you as you use it—*so use it!*\n\n***\n\n<AccordionGroup>\n  <Accordion title=\"Collaborative Coding Made Easy\">\n    Generate detailed comments and documentation for better team collaboration and also reduce onboarding times, creating a unified coding style across teams.\n  </Accordion>\n\n  <Accordion title=\"Troubleshoot and Resolve Bugs Swiftly\">\n    Use the Pieces Copilot in JetBrains to streamline the bug-fixing process. Its contextual understanding and suggested solutions make troubleshooting faster, keeping your project on course.\n  </Accordion>\n\n  <Accordion title=\"Quick Prototyping\">\n    Generate initial implementations and boilerplate code for prototypes and fast-paced projects. Ideal for hackathons, PoCs, and other time-sensitive tasks.\n  </Accordion>\n\n  <Accordion title=\"Skill Enhancement\">\n    Pieces Copilot doubles as a learning tool, helping you explore best practices, new paradigms, and advanced techniques in real-time.\n  </Accordion>\n\n  <Accordion title=\"Efficient Code Refactoring\">\n    Optimize your codebase through intelligent refactoring recommendations. The Pieces Copilot analyzes your code patterns suggests structural improvements and delivers optimizations for both performance and readability.\n  </Accordion>\n</AccordionGroup>\n\n***\n\n<a target=\"_blank\" href=\"http://plugins.jetbrains.com/plugin/17328-pieces\">Download the Pieces for JetBrains Plugin today!</a>",
    "lastModified": "2025-06-04T17:24:57.785Z",
    "filePath": "extensions-plugins/extensions-plugins/jetbrains/copilot.md"
  },
  "/docs/extensions-plugins/jetbrains/drive/edit-update": {
    "slug": "/docs/extensions-plugins/jetbrains/drive/edit-update",
    "metadata": {
      "title": "Editing",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## How to Edit Snippets\n\nYou can edit several types of metadata when editing saved materials, as well as the saved piece of code itself.\n\nTo edit a snippet:\n\n<Steps>\n  <Step title=\"Open the Pieces Drive\">\n    Open the Pieces Drive via the JetBrains sidebar.\n  </Step>\n\n  <Step title=\"Start Editing the Snippet\">\n    Locate a snippet you want to edit and select `Edit` from the quick menu, or right-click the snippet and choose `Edit` from the menu.\n  </Step>\n\n  <Step title=\"Edit your Snippet\">\n    Make changes, then save using `⌘+s` (macOS) or `ctrl+s` (Windows/Linux).\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/edit_and_update/editing_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n<Callout type=\"tip\">\n  After saving, the editor will automatically return to the main snippet view, with your changes applied instantly.\n</Callout>\n\n## Actions from the Pieces Drive View\n\nA tool menu with Pieces features will appear when you left-click on a saved snippet in the Pieces Drive. Some options relate to the [Pieces Copilot](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot), while others handle [material management](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive) actions.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/edit_and_update/edit_selected_material.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Pieces Copilot Actions\n\nTo access the material management view, choose a snippet from Pieces Drive. You can select various Copilot-focused actions from here, as listed in the table below.\n\n***\n\n| `Add to Copilot Context` | Adds the snippet to the context of your existing Copilot Chat conversation.                                                 |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------- |\n| `Ask Copilot`            | This triggers the input modal, which lets you type a prompt directly into the field without changing your active file view. |\n| `Insert at Cursor`       | Inserts the code snippet at the point of your cursor inside your active file.                                               |\n| `Shareable Links`        | Shows shareable links that have been generated for that snippet, if applicable.                                             |\n\n***\n\n### Material Management Actions\n\nBelow the Pieces Copilot actions, you can quickly change a snippet's name, description, classification, and other enriched metadata. Check the table below for details.\n\n***\n\n| `Annotations`            | Add, adjust or delete annotations for the snippet.                                          |\n| ------------------------ | ------------------------------------------------------------------------------------------- |\n| `Related Links`          | Add or remove links to the snippet’s metadata.                                              |\n| `Tags`                   | Add or remove tags to the snippet’s metadata.                                               |\n| `Reclassify`             | Set your custom snippet classification.                                                     |\n| `Edit Selected Material` | Edit the content of the snippet.                                                            |\n| `Rename`                 | Change the name (title) of the snippet as it appears in your repository of saved materials. |\n| `Delete`                 | Delete the snippet.                                                                         |\n\n***\n\n## Additional Tools while Editing\n\n*Layers upon layers of functionality*—that's the aim of all Pieces for Developers plugins and extensions.\n\nWhen you edit a snippet (find it in the Pieces Drive menu and click `Edit`), you can access all Pieces features, even though you're not in your main file view.\n\nInstead, the `Edit` view *becomes* your main file, so you can [generate code comments, debug, add it to context, and more.](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot)",
    "lastModified": "2025-06-04T17:24:57.832Z",
    "filePath": "extensions-plugins/extensions-plugins/jetbrains/drive/edit-update.md"
  },
  "/docs/extensions-plugins/jetbrains/drive/save-snippets": {
    "slug": "/docs/extensions-plugins/jetbrains/drive/save-snippets",
    "metadata": {
      "title": "Saving",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Saving Snippets\n\nThere are several ways to save code with the Pieces for JetBrains plugin, such as through the right-click menu, hotkeys, or dragging and dropping code into the Pieces sidebar.\n\nThere’s also the fine-tuned saving feature called `Save to Pieces As`, which lets you edit and adjust the automatically-generated metadata to your liking.\n\n### via Right-Click Menu\n\nYou can save snippets by accessing the tool menu.\n\nTo save a snippet using this method:\n\n<Steps>\n  <Step title=\"Choose your Snippet\">\n    Highlight the code you want to save.\n  </Step>\n\n  <Step title=\"Open Right-Click Menu\">\n    Right-click on the highlighted code and hover over the `Pieces` option.\n  </Step>\n\n  <Step title=\"Select Action\">\n    Select either `Save Current Selection to Pieces` or `Save File to Pieces`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/saving_snippets/save_to_pieces.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nThis will trigger a success message in the bottom-right corner of your screen to let you know that the save was successful.\n\n### via Keyboard Shortcut\n\nKeyboard shortcuts are another easy way to save functional developer materials.\n\nTo save a snippet via keyboard shortcuts:\n\n<Steps>\n  <Step title=\"Choose your Snippet\">\n    Highlight the code you want to save.\n  </Step>\n\n  <Step title=\"Save your Snippet\">\n    Use the command `⌥+⌘+p` (macOS) or `ctrl+alt+p` (Windows/Linux) to save the code as a snippet.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/saving_snippets/saved_to_pieces.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nSaving a snippet via keyboard shortcut will trigger the same success modal in the bottom right-hand corner of your screen to let you know the save was successful.\n\n### via Copilot Chat\n\nWhen you start a conversation about a piece of code in your active file or have any code block in your Copilot Chat, you can save it to Pieces using the `Save to Pieces` button in the Copilot Chat view.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734039141656/abf74d05-29e7-4769-995c-2157939ff930.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## What’s Stored When You Save a Snippet\n\nWhen you save a snippet to your Pieces Cloud, more than just the code is stored.\n\nThe Pieces Copilot captures:\n\n* `Type`: Categorizes the snippet (e.g., API call, function, class) with it’s code language.\n\n* `Associated Tags`: Keywords related to the snippet for easier searching.\n\n* `Custom Description`: Specifies precisely which *lines* (in numerical form) the snippet is from and the file from which it originated—very useful for mind-mapping.\n\n* `Smart Description`: AI-generated descriptions that summarize the snippet’s purpose and function.\n\n* `Suggested Searches`: Related searches that help you discover similar snippets.\n\n* `Related Links`: References to documentation, code repositories, or other relevant resources.\n\n* `Related People`: Associated collaborators or contributors.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/saving_snippets/snippet_enrichment.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Where Saved Snippets Live\n\nSaved snippets are stored locally on your device, ensuring offline accessibility. This also means that any Pieces for Developers extension, plugin, or even the Pieces Desktop App, has constant, up-to-date access to your saved materials with Pieces Drive.\n\nThere are two ways to view your saved snippets—by viewing them in your [JetBrains IDE’s sidebar menu](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/search-reuse#via-pieces-sidebar), or with the [Search Everywhere](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/search-reuse#finding-saved-snippets) feature.\n\n[Read more about how to find your saved snippets here.](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/search-reuse#finding-saved-snippets)",
    "lastModified": "2025-06-04T17:24:57.838Z",
    "filePath": "extensions-plugins/extensions-plugins/jetbrains/drive/save-snippets.md"
  },
  "/docs/extensions-plugins/jetbrains/drive/search-reuse": {
    "slug": "/docs/extensions-plugins/jetbrains/drive/search-reuse",
    "metadata": {
      "title": "Searching",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Finding Saved Snippets\n\nTo locate your snippets, open a file in VS Code and use one of two methods: searching with the **Pieces Drive** menu or with **Search Everywhere**.\n\n### via Pieces Drive\n\nIf you want to access your saved snippets directly within the JetBrains IDE, you can:\n\n<Steps>\n  <Step title=\"Locate Pieces Drive\">\n    Open the `Pieces Drive` from the JetBrains sidebar.\n  </Step>\n\n  <Step title=\"Filter, Search, and Explore\">\n    Once the `Pieces Drive` is open, you have access to a wide range of options that allow you sort through your snippets.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/searching_snippets_drive.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### via Search Everywhere\n\nWhether you’re on macOS, Windows or Linux, you must double-press the `Shift` key twice to open up the Search Everywhere menu.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731514495750/53039e6c-1199-4879-8b92-40cc02a20a71.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nOnce the menu is open, switch to the `Pieces` tab, then enter a search query to search your entire Pieces repository for any snippet you’ve saved.\n\nAfter you’ve located a snippet, you can press `Enter` to open it in a new window and view the snippet’s code and saved context.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/searching_for_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can also press `shift+shift` again and search while remaining in the Search Everywhere menu’s `All` tab, but the `Pieces` tab is the de facto home for seeing only saved snippet search results.\n\n<Callout type=\"info\">\n  The default behavior for the **Search Everywhere** feature can be changed to whatever keymapping you prefer—l<a target=\"_blank\" href=\"https://docs.pieces.app/products/extensions-plugins/jetbrains/commands\">earn more about this here.</a>\n</Callout>\n\n## Adding Filters to your Search\n\nYou can filter saved snippets in the Pieces Drive using snippet tags, coding languages, and titles.\n\nTo filter through your snippets:\n\n<Steps>\n  <Step title=\"Open Pieces Drive\">\n    Open `Pieces Drive` via the JetBrains Sidebar.\n  </Step>\n\n  <Step title=\"Select the Search Bar\">\n    Select the search bar at the top of the Pieces Drive.\n  </Step>\n\n  <Step title=\"Choose the Filter Option\">\n    After clicking on the search bar, you’ll have the option to quickly filter by `Titles`, `Annotations`, or `Content`.\n  </Step>\n\n  <Step title=\"Enter your Query\">\n    Using the filter, enter a search query in the search bar.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/filtering_snippets.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nWhen you’ve finished entering your filters, the Pieces Explorer will only display the snippets that match your filters. You can clear this by clicking the siphon icon with an `x` over it.\n\n<Callout type=\"tip\">\n  For any tags you don’t want to set, you can leave them blank by just pressing `return` (macOS) or `enter` (Windows/Linux).\n</Callout>\n\n## Viewing and Reusing Saved Snippets\n\n[Saved snippets](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/save-snippets) can be viewed alongside their saved metadata by opening up them up directly from the Pieces Drive—either by pressing `enter` on a highlighted snippet, or by double-clicking it.\n\nThis opens up the **snippet in markdown preview mode** in a separate window.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731947059537/0d388dec-e373-4bf4-9ec8-4a8b9dcc9246.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nFrom the opened markdown preview, you can then select `Copy to Clipboard` in the top-left corner of the snippet’s embedded code box or use the `⌘+c` (macOS) or `ctrl+c` (Windows/Linux) shortcut after selecting the section.\n\n### via Right-Click Menu\n\nThe Pieces for JetBrains Plugin offers several actions when you right-click a snippet in the Pieces Drive menu.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/pieces_drive_right_click.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis menu offers several material management and Pieces Copilot-related actions. [Read more about them here](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/edit-update#actions-from-the-editing-view) or see the expanded table below.\n\n### via Pieces Sidebar\n\nYou can view snippets by opening up the Pieces sidebar in your JetBrains IDE and clicking the `Pieces Drive Icon` on the left-hand side of your screen.\n\nOnce in the sidebar, you can insert a snippet and place it exactly where you want it in your code by clicking `Insert at Cursor`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/copy_to_clipboard_drive.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can also right-click a snippet and select `Copy` to copy it to the clipboard, allowing you to paste it anywhere you need.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/search_and_reuse/copy_to_clipboard_drive.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Previewing Saved Snippets\n\nWhile using the Pieces Drive sidebar, you can click on one of the snippets in the snippets list to view its code before selecting the snippet.\n\n***\n\n| `Add to Copilot Context` | `Ask Copilot`     | `Copy`        |\n| ------------------------ | ----------------- | ------------- |\n| `Insert at Cursor`       | `Shareable Links` | `Annotations` |\n| `Links`                  | `Tags`            | `Reclassify`  |\n| `Edit`                   | `Rename`          | `Delete`      |\n\n***\n\n## Real Time Snippet Streaming[​](https://docs.pieces.app/extensions-plugins/jetbrains#real-time-snippet-streaming)\n\nEach product in the Pieces Suite uses [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os) to get information about your snippets' context.\n\nWhen you update a snippet in the [Pieces for Developers Desktop App](https://docs.pieces.app/products/desktop)—such as a name or description, tags or any of the other metadata—those changes are also reflected in your Pieces Drive without refreshing.\n\n<Callout type=\"tip\">\n  If your snippets are not updating right away, see the [troubleshooting guide](https://docs.pieces.app/products/extensions-plugins/jetbrains/troubleshooting) to details on how to refresh your snippet list.\n</Callout>",
    "lastModified": "2025-06-04T17:24:57.843Z",
    "filePath": "extensions-plugins/extensions-plugins/jetbrains/drive/search-reuse.md"
  },
  "/docs/extensions-plugins/jetbrains/drive/sharing": {
    "slug": "/docs/extensions-plugins/jetbrains/drive/sharing",
    "metadata": {
      "title": "Sharing Snippets",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## How to Share a Saved Snippet\n\nYou can share saved snippets in two ways: use keyboard shortcuts or right-click on a selection in your environment.\n\nThis link can easily be shared via email, Discord, Slack, or other platforms. The recipient can view the snippet **without needing to have a Pieces account.**\n\n### via Right-Click Menu\n\nShareable Pieces links for your code snippets can also be generated by right-clicking a portion of selected code, hovering over the `Pieces` item in the pop-up menu, then selecting `Share via Pieces Link`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/sharing/share_via_pieces_link.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Keyboard Shortcut\n\nYou can share code snippets using the `⌘+L` (macOS) or `ctrl+L` (Windows/Linux). This is simply a shortcut to accessing the `Share via Pieces Link` tool in the right-click menu.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731514636367/cbe143a0-d518-4073-9d24-5047a88daf45.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Generating Links for Existing Saved Snippets\n\nIf you saved a material but didn't create a shareable link at the time, don't worry. You can still generate, copy, regenerate, or delete the existing link from the Pieces Drive.\n\n<Steps>\n  <Step title=\"Open the Pieces Drive\">\n    Open the Pieces Drive via the Pieces Drive icon in the JetBrains sidebar.\n  </Step>\n\n  <Step title=\"Share the Snippet\">\n    After locating the snippet you’d like to share, right-click it and select `Generate Shareable Link` from the available actions.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/sharing/generate_shareable_link_drive.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n\n  <Step title=\"Wait for the Link and Copy\">\n    After generating the link, a new modal will appear. Wait for the snippet to be shared with an automatically generated link, or manually copy the link from the modal.\n  </Step>\n</Steps>\n\nIf you have generated a link for that snippet previously, the `More Actions` menu options will automatically adjust to include three new actions:\n\n* `Open in Browser`: Opens the existing shareable link in your desired browser.\n\n* `Refresh Link`: Regenerates the link—this is important if a snippet has been edited or updated, as a new link will be required to contain the latest changes.\n\n* `Revoke Link`: Revokes the shareable link so that anyone with the existing link to that snippet will be barred from future access.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/sharing/share_link_options.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Enriched Sharing Experience\n\nWhen you `Share` a snippet, it’s not just the code included. The snippet has additional metadata to provide context—<a target=\"_blank\" href=\"#what-information-gets-shared\">you can read more about that here.</a>\n\n* `Snippet Type`: Identify the language or framework, such as Python or React.\n\n* `Tags`: Useful keywords for quick categorization.\n\n* `Description`: A short summary of what the snippet does.\n\n* `Related Links`: Helpful resources or documentation tied to the snippet.\n\n* `Author Information`: A record of who created the snippet.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731514684555/707b0769-5b68-448c-811b-a44d2414a10d.png?auto=compress,format&format=webp\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## What Information Gets Shared\n\nWhen a snippet is saved to the Pieces Cloud, the code is enriched with [valuable information](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/save-snippets#whats-stored-when-you-save-a-snippet) such as related people, links, annotations, tags, and an automatically-generated description.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731623145740/ec60e89f-ac2f-4396-b6a8-ad94f57d9745.png?auto=compress,format&format=webp&q=75\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Sensitive Information Watchdog\n\nThe `Share via Pieces Link` feature does more than allow you to effectively share snippets across your entire team and other communities, though.\n\nYou'll see a section titled **Sensitive Information:**\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731514684555/707b0769-5b68-448c-811b-a44d2414a10d.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nOur in-house ML model scans snippets for potentially sensitive information, like API keys or passwords, and alerts you so that you can make an informed decision before sharing the snippet.  \n\nThe scan happens locally using on-device machine learning models **before the snippet is uploaded to the cloud** for sharing. This allows you to make an informed decision about sharing your code.",
    "lastModified": "2025-06-04T17:24:57.848Z",
    "filePath": "extensions-plugins/extensions-plugins/jetbrains/drive/sharing.md"
  },
  "/docs/extensions-plugins/jetbrains/drive": {
    "slug": "/docs/extensions-plugins/jetbrains/drive",
    "metadata": {
      "title": "Pieces Drive",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Using Pieces Drive in JetBrains\n\nWith the <a target=\"_blank\" href=\"https://plugins.jetbrains.com/plugin/17328-pieces\">Pieces for JetBrains Plugin</a>, you can save all kinds of code snippets and easily find [them](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/edit-update#how-to-edit-snippets) whenever, wherever, and however you need.\n\nLet’s take a look at some examples:\n\n***\n\n| `SQL Query Templates`        | An SQL query to retrieve data from a database with filter conditions.                         | Save time with databases by reusing common queries like inserts, updates, or data retrieval.                |\n| ---------------------------- | --------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- |\n| `Boilerplate Code`           | An HTML boilerplate template for creating new webpages.                                       | Standardize the project structure of different projects by starting with a clean and organized template.    |\n| `Error-Handling Code Blocks` | A try-catch block template in JavaScript for handling API call errors.                        | Streamline error management by quickly inserting predefined error-handling patterns for more reliable code. |\n| `Regex Patterns`             | A regex pattern to validate email addresses.                                                  | Quickly implement validation in forms to make sure users correctly enter formatted data.                    |\n| `Shell Scripts`              | A shell script to automate server maintenance tasks like clearing logs and updating packages. | Automate system administration tasks on Unix / Linux servers so you spend less time on manual upkeep.       |\n\n***\n\n## Streamlining Development with Snippet Management\n\nThe <a target=\"_blank\" href=\"https://plugins.jetbrains.com/plugin/17328-pieces\">Pieces for JetBrains Plugin</a> connects you with your development environment, allowing you to focus on what matters—building great software—while empowering you with tools for efficient code reuse.\n\n* **Improved Productivity:** Focus on solving new problems rather than resolving old ones.\n\n* **Contextual Awareness:** Snippets enriched with metadata, descriptions, and links to relevant searches help you remember each piece of code's origin, purpose, and ideal usage scenarios.\n\n* **Code Standardization:** Sharing best practices and reusable components helps developers ensure uniform coding practices and conventions are available across different teams and projects.\n\nBy using the <a target=\"_blank\" href=\"https://plugins.jetbrains.com/plugin/17328-pieces\">Pieces for JetBrains Plugin</a>, you can capture and manage these snippets to streamline daily tasks and enhance your workflow in several ways:\n\n### Save & Organize\n\nUsers can save snippets by highlighting the desired code, right-clicking, and selecting the `Save to Pieces` option.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/MAIN_using_snippets/save_to_pieces.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can also do this without opening the right-click menu—use the `⌥+⌘+p` (macOS) or `ctrl+shift+p` (Windows/Linux) shortcut while your code is highlighted.\n\nThis guarantees that essential pieces of code, such as code fragments, functions, configuration files, and command-line instructions, are always at hand when needed.\n\nAdditionally, [each snippet is enriched with context](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/save-snippets#what-happens-when-you-save-a-snippet), enabling you to insert well-documented, relevant snippets where they make sense within your projects.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/MAIN_using_snippets/snippet_enrichment.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nPieces can also intelligently identify and save snippets based on re-use patterns in your JetBrains workflow.\n\nWhenever Pieces saves a snippet, you'll see a confirmation in the bottom right corner of your screen that says `Snippet Successfully Saved to Pieces`.\n\nYour snippet is now saved in Pieces Drive with auto-generated metadata!\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/MAIN_using_snippets/opening_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Search & Reuse\n\nYou can [search your entire collection of saved Pieces code snippets](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/search-reuse) inside of your preferred JetBrains IDE, so the code you need is always on hand.\n\nTo do this, open the **Search Everywhere** window and switch to the `Pieces` tab by using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux).\n\nEnter a search query, and any related snippets will appear in the dropdown list—then you can hit enter and view your snippet (with all of its saved context) rendered in markdown directly inside your editor.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/MAIN_using_snippets/opening_pieces_command_pallete.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Edit & Update\n\nYou can easily [edit and update code snippets](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/edit-update#how-to-edit-snippets) directly from your IDE without opening a separate window or navigating to the Pieces for Developers Desktop App.\n\nTo do so, open the **Pieces** from the tool window on the left-hand side of your JetBrains IDE, revealing a list of saved snippets. You can then right-click a snippet, which opens that snippet up in a new window.\n\nMake changes and save the snippet using `⌘+s` (macOS) or `ctrl+s` (Windows/Linux).\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/MAIN_using_snippets/editing_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Sharing\n\nThe **Sharing Snippets** feature allows you to [share code snippets with your team](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/sharing) or across projects directly from your JetBrains IDE.\n\nTo share a snippet, right-click on some highlighted code, hover over the Pieces option, and select `Share via Pieces Link`.\n\nYou can also share a snippet by right-clicking a snippet that’s listed in the left-hand toolbar window in any of your JetBrains IDEs and clicking `Share via Pieces Link`**.**\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/using_snippets/MAIN_using_snippets/share_via_pieces_link.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Use Cases\n\nWith Pieces for JetBrains Plugin, your snippets become a robust library of reusable code that you can organize, search, edit, and share across projects.\n\nHere are some examples of how you can use them:\n\n### Reusable Scheduling Functions\n\nImagine you’re frequently working on projects that involve scheduling tasks at regular intervals.\n\nInstead of rewriting the same logic for each new project, you can [save an evergreen snippet to your Pieces repository.](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/save-snippets#saving-snippets)\n\nThis allows you to reuse a well-crafted scheduling function across multiple applications, that is useful in a variety of scenarios:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\n// A reusable function to schedule tasks at a specified interval\nfunc scheduleTask(interval time.Duration, task func()) {\n\tticker := time.NewTicker(interval)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\ttask()\n\t\t}\n\t}\n}\n```\n\n### File System Monitoring\n\nSuppose you frequently work on projects that involve monitoring file system changes. In that case, you can [save a helpful snippet to your Pieces Drive](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/save-snippets#saving-snippets) that does precisely that, using generic and reusable naming conventions:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/fsnotify/fsnotify\"\n)\n\n// A reusable function to monitor file system changes\nfunc watchFileChanges(path string) {\n\twatcher, err := fsnotify.NewWatcher()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer watcher.Close()\n\n\terr = watcher.Add(path)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfor {\n\t\tselect {\n\t\tcase event := <-watcher.Events:\n\t\t\tif event.Op&fsnotify.Write == fsnotify.Write {\n\t\t\t\tfmt.Println(\"Modified file:\", event.Name)\n\t\t\t}\n\t\tcase err := <-watcher.Errors:\n\t\t\tfmt.Println(\"Error:\", err)\n\t\t}\n\t}\n}\n```\n\n## Additional Snippet Scenarios\n\nReview some additional scenarios and use cases for Pieces Snippets and see how the <a target=\"_blank\" href=\"https://plugins.jetbrains.com/plugin/17328-pieces\">Pieces for JetBrains Plugin</a> could benefit you and your workflow.\n\n***\n\n<AccordionGroup>\n  <Accordion title=\"Project Initialization\">\n    Quickly set up new projects by reusing boilerplate code.\n\n    Save standard project initialization scripts, configuration files, and setup commands as snippets to ensure consistency and save time when starting a new project.\n  </Accordion>\n\n  <Accordion title=\"Common Functions and Utilities\">\n    Reuse frequently used functions and utility methods by saving snippets of commonly used functions, such as data validation methods, API request handlers, or utility functions.\n\n    This allows you to quickly insert these snippets into new projects without rewriting them.\n  </Accordion>\n\n  <Accordion title=\"Configuration Management\">\n    Save snippets of configuration files for development, testing, and production to manage and reuse configuration files across different environments.\n  </Accordion>\n\n  <Accordion title=\"Documentation and Learning\">\n    Create a library of well-documented code examples for learning and reference by saving snippets with detailed descriptions and metadata.\n\n    This personal or team library of code examples makes learning new concepts easier and referencing how specific tasks were previously accomplished.\n  </Accordion>\n\n  <Accordion title=\"Command-Line Instructions\">\n    Store complicated command-line instructions as a code snippet so that you don’t need to remember the syntax every time you need to use a specific command-line instruction.\n  </Accordion>\n\n  <Accordion title=\"Bug Fixes and Patches\">\n    Save and reuse bug fixes or patches by storing the fix as a snippet when you solve a common bug or issue.\n\n    This allows you to quickly apply the same fix in other projects or share it with team members who might encounter the same issue.\n  </Accordion>\n</AccordionGroup>\n\n***\n\n<a target=\"_blank\" href=\"https://docs.pieces.app/products/extensions-plugins/jetbrains/get-started\">Download the Pieces for JetBrains Plugin today!</a>",
    "lastModified": "2025-06-04T17:24:57.822Z",
    "filePath": "extensions-plugins/extensions-plugins/jetbrains/drive.md"
  },
  "/docs/extensions-plugins/jetbrains/get-started": {
    "slug": "/docs/extensions-plugins/jetbrains/get-started",
    "metadata": {
      "title": "Get Started",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## JetBrains Prerequisites\n\nBefore you begin, make sure you have:\n\n* **PiecesOS:** The core engine that powers all Pieces extensions. <a target=\"_blank\" href=\"https://docs.pieces.app/products/core-dependencies/pieces-os\">Learn more about PiecesOS.</a>\n\n* **Any JetBrains IDE:** The <a target=\"_blank\" href=\"https://plugins.jetbrains.com/plugin/17328-pieces\">Pieces for JetBrains Plugin</a> works with any of the official JetBrains IDEs, so make sure you’ve got one installed.\n\nYou must have <a target=\"_blank\" href=\"https://docs.pieces.app/products/core-dependencies/pieces-os\">PiecesOS</a> to use the Pieces for JetBrains Plugin. We also recommend downloading the Pieces for Developers Desktop App.\n\n## Installing the Pieces for JetBrains Plugin\n\nYou can install the Pieces for JetBrains plugin through the <a target=\"_blank\" href=\"https://plugins.jetbrains.com/plugin/17328-pieces--save-search-share--reuse-code-snippets\">JetBrains Marketplace</a> or by searching for Pieces in the plugins search of your IDE.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731511626110/c73ee89d-099b-4dd4-b438-263777362657.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nOnce you've installed the plugin, you can use Pieces without restarting your IDE.\n\n### Setting up PiecesOS\n\n<a target=\"_blank\" href=\"https://docs.pieces.app/products/core-dependencies/pieces-os\">PiecesOS</a> is required for the <a target=\"_blank\" href=\"https://plugins.jetbrains.com/plugin/17328-pieces\">Pieces for JetBrains Plugin</a> to work.\n\nIf you haven’t installed it yet, click the buttons to download PiecesOS via the recommended method, or follow the alternative steps below.\n\n<get-started-install />\n\n<Callout type=\"alert\">\n  For enhanced security and better system integration, we recommend installing the `appinstaller` package over the InnoSetup (.exe) installer. The `appinstaller` package operates in a containerized environment, providing additional security benefits.\n</Callout>\n\n## Updating\n\nThe <a target=\"_blank\" href=\"https://plugins.jetbrains.com/plugin/17328-pieces\">Pieces for JetBrains Plugin</a> will automatically update when a new version is available.\n\nWhen the plugin updates, a small success message will appear in the bottom right-hand corner of your JetBrains IDE.\n\n<Callout type=\"tip\">\n  **Update notifications** cover updates for both the Pieces for JetBrains Plugin and PiecesOS.\n</Callout>\n\nYou can also manually update the plugin by going to[ ](https://builds.pieces.app/stages/production/appinstaller/pieces_for_x.appinstaller?download=true\\&product=DOCUMENTATION_WEBSITE)your Plugins window, locating the Pieces for JetBrains Plugin, and clicking the `Update` button.\n\n## Pieces Cloud\n\n<Callout type=\"info\">\n  Connecting to the Pieces Cloud is optional. However, it **provides additional features** like **data backups, shareable links, and more.** You can enjoy the main functionalities of Pieces without an account.\n</Callout>\n\nDisconnecting from the Pieces Cloud logs you out of your Pieces account.\n\nTo disconnect from the Pieces Cloud:\n\n<Steps>\n  <Step title=\"Open the Command Palette\">\n    Open the command palette in VS Code with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux)\n  </Step>\n\n  <Step title=\"Disconnect from the Cloud\">\n    Enter `Disconnect from Pieces Cloud` and choose the option\n  </Step>\n</Steps>\n\n<Callout type=\"info\">\n  If you’re not signed into Pieces Cloud - this option will not be available. You will see `Connect to Pieces Cloud`.\n</Callout>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/get_started/disconnect_pieces_cloud.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Onboarding\n\nThe Pieces for JetBrains plugin features an interactive walkthrough that shows all the steps in one panel. This onboarding page teaches you how to save, view, and use saved materials, and how to get the most out of the Pieces for JetBrains plugin.\n\n<Callout type=\"alert\">\n  If you don’t have PiecesOS installed, the Pieces for JetBrains plugin onboarding will require you to install it before completing the onboarding steps.\n</Callout>\n\n### Save Your First Material\n\nClick `Save Your First Material`, and Pieces will automatically open the [Pieces Drive](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive) to save a sample snippet, showing you how it all works.\n\nYou'll see that snippet right away in the **Saved Materials** list. This shows how Pieces captures items and keeps them organized for easy reuse.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/get_started/save_first_material\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### View Your Saved Materials\n\nClick `View Your Saved Materials`, and Pieces Drive will open to your **Saved Materials**, showing any snippets you saved earlier along with the new snippet.\n\n### Check Out the Pieces Copilot\n\nClick `Open Your Copilot` to open the Pieces Copilot side panel, as shown in the screenshots. In the Pieces Copilot, you'll find **suggested prompts**, options to set context from folders or files, and quick links to your saved materials.\n\nOnce you open the Copilot, the onboarding step is complete. You're ready to ask [questions about your code](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot/chat), [document it](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot/documenting-code), [debugging](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot/debugging-errors), or [refactor a selected material](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot/refactoring)—all within the JetBrains interface.\n\n### Ask Copilot with Your Material\n\nClick `Ask Copilot about Your Material`, and Pieces will add the new snippet to the Copilot chat with the sample prompt “What does this code do?”. Press `Enter` to send your snippet to the Copilot, and you'll receive an explanation or suggestions about the snippet.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/get_started/ask_copilot_about_material.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Supercharge Your Workflow\n\nClick `Pieces Documentation` to access our complete guide, which includes advanced tips, setup instructions, and best practices. Select `View All Steps` to revisit any onboarding step whenever you like.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/get_started/supercharge_workflow.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"info\">\n  If you need extra support, you can find [helpful resources here](https://docs.pieces.app/products/support).\n</Callout>\n\n## Uninstalling\n\nTo uninstall the Pieces for JetBrains Plugin, go to the `Settings` icon in the top left, `Plugins > Installed`, find the Pieces plugin, and click the uninstall button in the dropdown menu.\n\n<Callout type=\"info\">\n  To access the uninstall option, click the dropdown menu and select the chevron to display the uninstall button.\n</Callout>\n\nYou'll need to restart the JetBrains IDE for Pieces to be completely uninstalled.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/get_started/uninstall_button.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:57.853Z",
    "filePath": "extensions-plugins/extensions-plugins/jetbrains/get-started.md"
  },
  "/docs/extensions-plugins/jetbrains/troubleshooting": {
    "slug": "/docs/extensions-plugins/jetbrains/troubleshooting",
    "metadata": {
      "title": "Troubleshooting",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Troubleshooting Pieces for JetBrains\n\nHere are links to support resources, documentation, and our Discord channel for troubleshooting related to the <a target=\"_blank\" href=\"https://plugins.jetbrains.com/plugin/17328-pieces\">Pieces for JetBrains Plugin.</a>\n\nYou can also find some specific troubleshooting steps for JCEF-related issues below.\n\n<on-device-storage />\n\n[​](https://docs.pieces.app/extensions-plugins/jetbrains#troubleshooting)\n\n## Pieces Copilot: Enabling JCEF Runtime and Downgrade[​](https://docs.pieces.app/extensions-plugins/jetbrains#pieces-copilot-enabling-jcef-runtime-and-downgrade)\n\nThe Pieces Copilot relies on the **JCEF (Java Chromium Embedded Framework)** runtime to function appropriately within JetBrains IDEs.\n\nHowever, not all JetBrains IDEs, including specific versions of **Android Studio**, come pre-configured with a JCEF-compatible runtime, which can cause compatibility issues.\n\n### Switching to a JCEF-Enabled Runtime\n\nYou must switch your Java runtime to a **JCEF-enabled runtime** inside your global IDE settings.\n\n<Callout type=\"alert\">\n  This operation will require restarting your IDE, so make sure to save your work before doing so.\n</Callout>\n\nFollow these steps to switch your runtime:\n\n<Steps>\n  <Step title=\"Open Action Search\">\n    Open the Action Search Dialog using `⌘+shift+a` (macOS) or `ctrl+shift+a` (Windows/Linux).\n  </Step>\n\n  <Step title=\"Search for Boot Runtime\">\n    Search for `Choose Boot Java Runtime for the IDE`.\n  </Step>\n\n  <Step title=\"Choose the Latest JCEF Runtime\">\n    Select the **latest version** from the available JCEF-enabled runtimes.\n  </Step>\n\n  <Step title=\"Restart IDE\" />\n</Steps>\n\n### Android Studio Hedgehog Compatibility Issues\n\nIf you’re using **Android Studio Hedgehog (2023.1.1)**, switching to a JCEF runtime may still result in GPU process errors, which can cause performance instability.\n\nThis is a <a target=\"_blank\" href=\"https://github.com/gitbito/bitoai/issues/174\">known issue with this release,</a> affecting Pieces Copilot and other plugins relying on JCEF (such as the <a target=\"_blank\" href=\"https://github.com/flutter/flutter-intellij/issues/7119\">Flutter inspector</a>).\n\n### Recommended Workaround for Hedgehog Users\n\nIf you encounter GPU-related errors after switching to a JCEF runtime, consider **downgrading to Android Studio Giraffe (2022.3.1 Patch 4)**. This version offers better compatibility until a permanent fix is released for Hedgehog.\n\nTo downgrade Android Studio, follow these steps:\n\n1. **Uninstall Hedgehog (2023.1.1)** from your device.\n\n2. **Download Giraffe (2022.3.1 Patch 4)** from the Android Studio archives, which you can find here.\n\n3. **Reinstall Android Studio** using the Giraffe version and switch the runtime to JCEF-enabled using the instructions above.\n\n## Unable to Find the JetBrains Plugin in the JetBrains Marketplace[​](https://docs.pieces.app/extensions-plugins/jetbrains#i-cant-find-the-pieces-jetbrains-plugin-in-the-jetbrains-marketplace)\n\nIf you can't find the Pieces for Developers JetBrains Plugin in the JetBrains Marketplace, you can navigate directly to it using <a target=\"_blank\" href=\"https://plugins.jetbrains.com/plugin/17328-pieces--save-search-share--reuse-code-snippets\">this link</a>.\n\n## Updating[​](https://docs.pieces.app/extensions-plugins/jetbrains#updating)\n\nThe Pieces for JetBrains Plugin will automatically update when a new version is available.\n\nYou can manually update the plugin by going to your Plugins window using `⌘+shift+x` (macOS) or `ctrl+shift+x` (Windows/Linux).\n\nNext, locate the Pieces for JetBrains Plugin (titled ‘Pieces’) and click the **update button.**\n\n### Check PiecesOS Status\n\nCheck to make sure PiecesOS is running. PiecesOS must be running for the Pieces for JetBrains Plugin to work.\n\n### Restart JetBrains After Updates\n\nIf you’ve recently installed or updated PiecesOS or the Pieces for JetBrains Plugin, restart the IDE.\n\n## Reloading the Pieces Copilot Chat Window\n\nYou may need to restart or refresh the Pieces Copilot chat, especially if you’re using a cloud LLM and disconnect from WiFi.\n\nThese scenarios can occasionally cause the LLM to ‘hang’—to appear as if generating a response but eventually timing out, entering an infinite response loop, or experiencing other issues.\n\nTo do so, click the small `Reload Copilot` symbol above the Pieces Copilot chat once it is open.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/troubleshooting/reload_copilot.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:57.857Z",
    "filePath": "extensions-plugins/extensions-plugins/jetbrains/troubleshooting.md"
  },
  "/docs/extensions-plugins/jetbrains": {
    "slug": "/docs/extensions-plugins/jetbrains",
    "metadata": {
      "title": "JetBrains Plugin",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732290822484/1ff85201-d524-4996-8e8d-9070db6ea380.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Pieces for JetBrains Plugin\n\nThe <a target=\"_blank\" href=\"https://plugins.jetbrains.com/plugin/17328-pieces\">Pieces for JetBrains Plugin</a> enhances your development experience by seamlessly integrating the best features from the Pieces suite directly into JetBrains IDEs, making your favorite tools readily accessible within your workspace.\n\nIt provides developers with powerful tools for **managing code snippets, debugging, and refactoring** within their familiar development environment.\n\n* [Pieces Copilot:](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot) Users can start generative AI conversations and add files and folders as context to get the solutions they need, including out-of-IDE context with the optional Long-Term Memory Engine (LTM-2).\n\n* [Pieces Drive:](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive) Effortlessly save, locate, and share frequently used code snippets, making it easier to organize your work, quickly access essential pieces of code, and collaborate effectively with others.\n\n- [AI Quick Actions:](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot/chat#ai-quick-actions) Fully integrated and Pieces-powered AI Quick Actions tools are built right into your code, making it even easier to access Pieces Copilot explanation and documentation features.\n\n<CardGroup cols={2}>\n  <Card title=\"Getting Started\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731096255269/3c7ccc7f-599c-4f37-b15d-cc23d2e0be60.png\">\n    Follow [these instructions](https://docs.pieces.app/products/extensions-plugins/jetbrains/get-started) to download and install the <a target=\"_blank\" href=\"https://plugins.jetbrains.com/plugin/17328-pieces\">Pieces for JetBrains plugin.</a>\n  </Card>\n\n  <Card title=\"Support\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731096296705/4c1f6917-8818-4340-b604-836bb5b5b214.png\">\n    Explore [troubleshooting options](https://docs.pieces.app/products/extensions-plugins/jetbrains/troubleshooting), navigate to our [support page](https://docs.pieces.app/products/support), or <a target=\"_blank\" href=\"https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr\">directly book a call</a> with our engineers.\n  </Card>\n</CardGroup>\n\n<guides-overview-card />\n\n<Callout type=\"tip\">\n  All media (e.g., GIFs, screenshots) in this documentation were captured in **PyCharm CE.**\n</Callout>\n\nThe Pieces for JetBrains Plugin verifies against the JetBrains IntelliJ Ultimate IDE, but works across the entire JetBrains suite of IDEs.\n\nThe minimum version required for the Pieces for JetBrains Plugin to work in your JetBrains IDE is **2023.1.**\n\nIf you’re not quite sure what version your JetBrains IDE is, [you can click here to find out how to check it.](https://docs.pieces.app/products/extensions-plugins/jetbrains/configuration#checking-your-jetbrains-ide-version)\n\nThis plugin is currently available for use in any JetBrains IDE, such as:\n\n* <a target=\"_blank\" href=\"https://www.jetbrains.com/idea/\">IntelliJ IDEA</a>\n\n* <a target=\"_blank\" href=\"https://www.jetbrains.com/webstorm/\">WebStorm</a>\n\n* <a target=\"_blank\" href=\"https://www.jetbrains.com/phpstorm/\">PhpStorm</a>\n\n* <a target=\"_blank\" href=\"https://www.jetbrains.com/pycharm/\">PyCharm</a>\n\n* <a target=\"_blank\" href=\"https://www.jetbrains.com/clion/\">CLion</a>\n\n* <a target=\"_blank\" href=\"https://www.jetbrains.com/go/\">GoLand</a>\n\n* <a target=\"_blank\" href=\"https://www.jetbrains.com/rider/\">Rider</a>\n\n* <a target=\"_blank\" href=\"https://www.jetbrains.com/ruby/\">RubyMine</a>\n\n* <a target=\"_blank\" href=\"https://www.jetbrains.com/datagrip/\">DataGrip</a>\n\n* <a target=\"_blank\" href=\"https://www.jetbrains.com/objc/\">AppCode</a>\n\n* <a target=\"_blank\" href=\"https://developer.android.com/studio\">Android Studio</a>\n\nThe Pieces for JetBrains plugin provides developers with **two pillars of functionality**:\n\n### AI Assistance with Pieces Copilot\n\nPieces Copilot offers [AI-assisted features](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot) like starting contextualized [generative AI conversations](https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot/chat), <a target=\"_blank\" href=\"https://docs.pieces.app/products/extensions-plugins/jetbrains/copilot/documenting-code\">adding code comments</a>, and <a target=\"_blank\" href=\"https://docs.pieces.app/products/extensions-plugins/jetbrains/troubleshooting\">troubleshooting code</a>.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/jetbrains_plugin/right_click_hover_over_save_to_pieces.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Material Management with Pieces Drive\n\nPieces Drive enables you to [save, edit, search, and share useful code snippets](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive) to boost your workflow productivity and streamline collaboration with others.\n\nThese features let developers store their favorite code in a personal, easy-to-access library. They can quickly review past work, find related authors and links with the extra details saved with each piece, and more.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/jetbrains_plugin/pieces_drive_right_click.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Using Pieces Copilot\n\nYou can perform **several decisive** **actions** with the Pieces Copilot inside of your JetBrains IDE, like starting a conversation directly inside the editor with your LLM of choice about a specific code snippet, fragment, folder, or terminal output.\n\nThe **Ask Copilot** feature is the backbone of the Pieces Copilot experience.\n\nPieces for Developers recently rolled out its new **AI Quick Actions** feature—similar to VS Code’s Codelens—which allows for select quick actions powered by Pieces Copilot, namely `Pieces: Explain` and `Pieces: Comment`.\n\n<Callout type=\"tip\">\n  The Quick Action tools—`Pieces: Explain` and `Pieces: Comment`—are above the function nearest to your cursor.\n</Callout>\n\nUsing either AI Quick Actions triggers the Pieces Copilot conversation window, where you can find the output from the LLM of your choice.\n\nThese AI Quick Action tools live above certain pieces of code, like functions, so you always have easy access to them.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/jetbrains_plugin/lightbulb_fix.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Managing Code Snippets\n\nWhen you save code to your personal repository, Pieces **automatically enriches the snippet** with AI-generated tags, titles, related authors and links, and a description.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/jetbrains_plugin/right_click_menu.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can save code snippets by right-clicking a selection of code and choosing the `Save Current Selection to Pieces` option from the pop-up window.\n\nAlternatively, right-click and hover over the `Pieces` item to access several other snippet-related functions.\n\nOther material management actions available in this menu include:\n\n***\n\n| **Action**                                | **Purpose**                                                                                                                                                                                                                                                                                             |\n| ----------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Save Current Selection / File to Pieces` | Right-click a selected block of code or your entire active file and [save it to your Pieces Drive with AI-enriched metadata](https://docs.pieces.app/products/extensions-plugins/jetbrains/drive/save-snippets#whats-stored-when-you-save-a-snippet), ensuring easy access to frequently used snippets. |\n| `Save File to Pieces`                     | Save an entire file to Pieces Drive for future reference.                                                                                                                                                                                                                                               |\n| `Ask Copilot About Selection`             | Ask Pieces Copilot to generate suggestions or explain the selection with a query.                                                                                                                                                                                                                       |\n| `Modify Selection with Copilot`           | Adjust and refine selected code using AI suggestions.                                                                                                                                                                                                                                                   |\n| `Comment Selection with Copilot`          | Auto-generate comments for the selected code snippet using AI.                                                                                                                                                                                                                                          |\n| `Explain Selection with Copilot`          | Receive an explanation for the code using your chosen LLM through Pieces Copilot.                                                                                                                                                                                                                       |\n| `Share via Pieces Link`                   | Generate a shareable link for your snippet, allowing collaboration even with those who don’t have a Pieces account.                                                                                                                                                                                     |\n| `Search Pieces Drive`                     | Search for previously saved snippets in Pieces.                                                                                                                                                                                                                                                         |\n| `Pieces Quick Search`                     | Quickly find and retrieve relevant snippets saved in Pieces.                                                                                                                                                                                                                                            |\n\n***\n\n### **Referencing & Reusing**\n\nThe <a target=\"_blank\" href=\"https://plugins.jetbrains.com/plugin/17328-pieces\">Pieces for JetBrains Plugin</a> provides robust search tools to help you quickly find and access your saved snippets.\n\nYou can easily find saved snippets in your JetBrains IDE by double-tapping the shift key and selecting the `Pieces` window.\n\nEnter a query, and any snippet you’ve saved that matches the query will be returned to the drop-down list.\n\nOnce you’ve located the snippet you want, pressing `return` (macOS), `enter` (Windows/Linux), or clicking the snippet title will open it inside your JetBrains IDE.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/jetbrains_plugin_assets/jetbrains_plugin_assets/jetbrains_plugin/searching_for_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Download the Plugin\n\nFollow the [installation instructions](https://docs.pieces.app/products/extensions-plugins/jetbrains/get-started) to get started with the Pieces for JetBrains Plugin.",
    "lastModified": "2025-06-04T17:24:57.764Z",
    "filePath": "extensions-plugins/extensions-plugins/jetbrains.md"
  },
  "/docs/extensions-plugins/jupitaleb/commands": {
    "slug": "/docs/extensions-plugins/jupitaleb/commands",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:57.870Z",
    "filePath": "extensions-plugins/extensions-plugins/jupitaleb/commands.md"
  },
  "/docs/extensions-plugins/jupitaleb/configuration": {
    "slug": "/docs/extensions-plugins/jupitaleb/configuration",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:57.876Z",
    "filePath": "extensions-plugins/extensions-plugins/jupitaleb/configuration.md"
  },
  "/docs/extensions-plugins/jupitaleb/copilot/chat": {
    "slug": "/docs/extensions-plugins/jupitaleb/copilot/chat",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:57.890Z",
    "filePath": "extensions-plugins/extensions-plugins/jupitaleb/copilot/chat.md"
  },
  "/docs/extensions-plugins/jupitaleb/copilot/debugging-errors": {
    "slug": "/docs/extensions-plugins/jupitaleb/copilot/debugging-errors",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:57.896Z",
    "filePath": "extensions-plugins/extensions-plugins/jupitaleb/copilot/debugging-errors.md"
  },
  "/docs/extensions-plugins/jupitaleb/copilot/documenting-code": {
    "slug": "/docs/extensions-plugins/jupitaleb/copilot/documenting-code",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:57.902Z",
    "filePath": "extensions-plugins/extensions-plugins/jupitaleb/copilot/documenting-code.md"
  },
  "/docs/extensions-plugins/jupitaleb/copilot/llm-settings": {
    "slug": "/docs/extensions-plugins/jupitaleb/copilot/llm-settings",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:57.906Z",
    "filePath": "extensions-plugins/extensions-plugins/jupitaleb/copilot/llm-settings.md"
  },
  "/docs/extensions-plugins/jupitaleb/copilot/refactoring": {
    "slug": "/docs/extensions-plugins/jupitaleb/copilot/refactoring",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:57.912Z",
    "filePath": "extensions-plugins/extensions-plugins/jupitaleb/copilot/refactoring.md"
  },
  "/docs/extensions-plugins/jupitaleb/copilot": {
    "slug": "/docs/extensions-plugins/jupitaleb/copilot",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:57.880Z",
    "filePath": "extensions-plugins/extensions-plugins/jupitaleb/copilot.md"
  },
  "/docs/extensions-plugins/jupitaleb/drive/edit-update": {
    "slug": "/docs/extensions-plugins/jupitaleb/drive/edit-update",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:57.926Z",
    "filePath": "extensions-plugins/extensions-plugins/jupitaleb/drive/edit-update.md"
  },
  "/docs/extensions-plugins/jupitaleb/drive/save": {
    "slug": "/docs/extensions-plugins/jupitaleb/drive/save",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:57.933Z",
    "filePath": "extensions-plugins/extensions-plugins/jupitaleb/drive/save.md"
  },
  "/docs/extensions-plugins/jupitaleb/drive/search-reuse": {
    "slug": "/docs/extensions-plugins/jupitaleb/drive/search-reuse",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:57.938Z",
    "filePath": "extensions-plugins/extensions-plugins/jupitaleb/drive/search-reuse.md"
  },
  "/docs/extensions-plugins/jupitaleb/drive/share": {
    "slug": "/docs/extensions-plugins/jupitaleb/drive/share",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:57.943Z",
    "filePath": "extensions-plugins/extensions-plugins/jupitaleb/drive/share.md"
  },
  "/docs/extensions-plugins/jupitaleb/drive": {
    "slug": "/docs/extensions-plugins/jupitaleb/drive",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:57.916Z",
    "filePath": "extensions-plugins/extensions-plugins/jupitaleb/drive.md"
  },
  "/docs/extensions-plugins/jupitaleb/get-started": {
    "slug": "/docs/extensions-plugins/jupitaleb/get-started",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:57.952Z",
    "filePath": "extensions-plugins/extensions-plugins/jupitaleb/get-started.md"
  },
  "/docs/extensions-plugins/jupitaleb/troubleshooting": {
    "slug": "/docs/extensions-plugins/jupitaleb/troubleshooting",
    "metadata": {
      "title": "Troubleshooting",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Having Trouble with Pieces for Jupyter?\n\nIf the Pieces for Jupyter Extension isn’t working as expected, verify the following steps:\n\n### Ensure You Have the Latest Versions\n\nEnsure you are using the most recent version of the Pieces for Jupyter Extension available in the PIP marketplace, with a minimum required version of **BLANK**. Additionally, confirm that you have the latest version of PiecesOS, requiring at least version **11.3.6**.\n\n## Check PiecesOS Status\n\nEnsure that PiecesOS is running. It must be active for the Pieces for Jupyter Extension to function correctly.\n\n## Restart Jupyter Lab After Updates\n\nIf you’ve recently installed or updated PiecesOS or the Pieces for Jupyter Extension, restart Jupyter Lab to apply the updates properly.\n\nIf the issues persist, contact the <a target=\"_blank\" href=\"https://getpieces.typeform.com/to/mCjBSIjF#docs-obsidian\">Pieces Support Team</a>.\n\n## Refreshing Copilot Chats\n\nIf you're using the Pieces Copilot chat and lose your WiFi connection or face problems with a cloud-based LLM, refreshing the chat might be necessary. This action can fix issues like the LLM seemingly \"hanging\" (for instance, producing a response that times out or gets stuck in an infinite loop).\n\nTo refresh the chat, click the three vertical dots in the top-right corner of your Copilot Chat window and select `Refresh`.\n\n> screenshot of hovering over the refresh option within the chat",
    "lastModified": "2025-06-04T17:24:57.965Z",
    "filePath": "extensions-plugins/extensions-plugins/jupitaleb/troubleshooting.md"
  },
  "/docs/extensions-plugins/jupyterlab": {
    "slug": "/docs/extensions-plugins/jupyterlab",
    "metadata": {
      "title": "JupyterLab Extension",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1729000547466/593f4e3f-ff9c-452e-b212-69be1e676f76.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n<Callout type=\"alert\">\n  V2 Documentation for the Pieces for Developers JupyterLabs Extension is under construction.\n\n  In the meantime, you can look at the V1 documentation for the Pieces for JupyterLab Extension below.\n</Callout>\n\n***\n\n## Pieces for JupyterLab\n\nLearn how to install the Pieces for JupyterLab Extension via the **PYPI Manager, Pip,** and **Conda**.\n\nThis extension is compatible with *JupyterLab 4.0.0* and higher, and is currently in **beta**.\n\n<Callout type=\"tip\">\n  Pieces For Developers captures *no identifiable user data.* Our local-only architecture means your data never has to leave your device.\n</Callout>\n\n### Installing PiecesOS\n\n[PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os) must be downloaded and installed separately from the JupyterLab Extension to work correctly.\n\n<get-started-install />\n\n## Installation Instructions\n\nTo install the Pieces for JupyterLab extension, run this `pip` command in your terminal:\n\n```bash\npip install jupyter-pieces\n```\n\nMake sure extensions are enabled. If you don’t know how to do this, <a target=\"_blank\" href=\"https://tljh.jupyter.org/en/latest/howto/admin/enable-extensions.html\">click here for official Jupyter documentation</a> on how to do so.\n\n<Callout type=\"alert\">\n  Be sure to accept the disclaimer before moving forward in this process.\n</Callout>\n\n## Features\n\nRead some of the latest features you can find with in the Pieces for JupyterLab Extension below.\n\n## Pieces Copilot\n\n**Pieces Copilot** inside JupyterLab is your context-aware AI assistant, designed to help you work smarter with your notebooks.\n\nPowered by qGPT and deeply integrated into the Pieces ecosystem, Copilot can answer questions specific to your code, suggest improvements, and provide real-time assistance—all based on the content of your notebook.\n\nWhether you’re debugging, exploring new concepts, or documenting your workflow, Copilot helps you stay focused by delivering relevant insights without leaving your development environment.\n\nHere’s how to use it:\n\n<Steps>\n  <Step title=\"Open PiecesOS\">\n    Ensure PiecesOS is open and up to date.\n  </Step>\n\n  <Step title=\"Open the View\">\n    Click the bot icon in the top slider of the JupyterLab Extension to open Pieces Copilot.\n  </Step>\n\n  <Step title=\"Start Prompting\">\n    Interact with the Pieces Copilot to get answers related to your notebook.\n  </Step>\n\n  <Step title=\"“Ask Copilot”\">\n    Highlight code, right-click, and select `Ask Copilot` for context-aware help based on your selected code.\n  </Step>\n</Steps>\n\n### Enrich Selected Code\n\n`Enrich Selected Code` allows you to instantly add helpful context to any piece of code within your Jupyter notebook.\n\nSimply highlight a section of code, right-click, and choose the “Enrich with Description” option.\n\nPieces will generate a clear, concise explanation of what the code does—perfect for improving readability, onboarding collaborators, or creating better documentation. It’s a fast, easy way to make your notebooks more understandable and maintainable.\n\n### Realtime Streaming\n\nChanges in other Pieces tools (Desktop App, VS Code, etc.) reflect in JupyterLab *automatically*.\n\nAny snippet you save, edit, or enrich in JupyterLab is instantly reflected in other Pieces integrations—like the Desktop App, VS Code, or JetBrains plugins—without any extra steps.\n\n<Callout type=\"info\">\n  This seamless, bidirectional sync keeps your context up to date in real time, so you can move between environments without losing track of your work.\n</Callout>\n\n## Pieces Drive\n\n**Pieces Drive** is a local, privacy-first storage system that powers the Pieces ecosystem.\n\nIt securely stores your code snippets, enrichments, and contextual data directly on your device—enabling lightning-fast access, offline functionality, and complete control over your development artifacts without relying on the cloud.\n\nTo save a snippet:\n\n1. Highlight text, right-click, and choose “Save to Pieces.”\n\n2. Use the Pieces button in a code block.\n\n3. Use a dedicated keyboard shortcut.\n\n<Image src=\"https://storage.googleapis.com/pieces_multimedia/PROMOTIONAL/PIECES_FOR_DEVELOPERS/JUPYTER/MACOS/RIGHT_CLICK_SAVE_SELECTION/16X9/PIECES_FOR_DEVELOPERS-JUPYTER-RIGHT_CLICK_SAVE_SELECTION-16X9-MACOS-6_22_2023.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Find your Snippets\n\nQuickly access all of your saved snippets by opening the Pieces View from the Ribbon Menu in JupyterLab.\n\nYou can sort snippets by **recency** or **language**, and use the search bar to instantly locate the code you need—no more digging through old files.\n\n<Image src=\"https://storage.googleapis.com/pieces_multimedia/PROMOTIONAL/PIECES_FOR_DEVELOPERS/JUPYTER/MACOS/SEARCH_AND_INSERT/16X9/PIECES_FOR_DEVELOPERS-JUPYTER-SEARCH_AND_INSERT-16X9-MACOS-6_22_2023.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Use your Snippets\n\nOnce you’ve saved a snippet, you can copy it directly from the Pieces View and paste it anywhere in your notebook.\n\nYou’ll also see rich metadata and syntax highlighting, making it easy to understand and reuse your code at a glance.\n\n<Image src=\"https://storage.googleapis.com/pieces_multimedia/PROMOTIONAL/PIECES_FOR_DEVELOPERS/JUPYTER/MACOS/EXPANDED_VIEW/16X9/PIECES_FOR_DEVELOPERS-JUPYTER-EXPANDED_VIEW-16X9-MACOS-6_22_2023.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Share your Snippets\n\nSharing is simple with Pieces. Right-click any snippet or use the dedicated share button to generate a secure, shareable link.\n\nWhether you’re collaborating with teammates or showing off a solution, you can distribute your code in just a click.\n\nTo share:\n\n1. Highlight code, right-click, and select “Share via Pieces Link.”\n\n2. Click the Share button within a code block or the Pieces View.\n\n3. Or use a keyboard shortcut.\n\n<Image src=\"https://storage.googleapis.com/pieces_multimedia/PROMOTIONAL/PIECES_FOR_DEVELOPERS/JUPYTER/MACOS/SNIPPET_BUTTON_SHARE/16X9/PIECES_FOR_DEVELOPERS-JUPYTER-SNIPPET_BUTTON_SHARE-16X9-MACOS-6_22_2023.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  Pieces stores all your snippets for seamless sharing.\n</Callout>\n\n### Discover Snippets\n\nThe `Discover` tab in the Pieces View automatically surfaces snippets Pieces has found in your project.\n\nIt’s a great way to jumpstart your library of reusable code without manually saving each snippet.\n\n<Image src=\"https://old.docs.pieces.app/assets/images/PIECES_FOR_DEVELOPERS-JUPYTER-MACOS-SNIPPET_DISCOVERY-jupyterlab-snippet-discovery-3b1f1151ae918dc902fd310335ebbc01.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Embedded Button\n\nThe Pieces JupyterLab Extension adds an embedded `Save` button directly inside your code cells, making it effortless to capture key snippets as you work.\n\nWith one click, you can save the contents of a cell to Pieces without interrupting your flow—perfect for preserving important functions, code patterns, or in-progress ideas for later use.\n\n<Image src=\"https://storage.googleapis.com/pieces_multimedia/PROMOTIONAL/PIECES_FOR_DEVELOPERS/JUPYTER/MACOS/EMBEDDED_BUTTON_SAVE_ACTIVE_CELL/16X9/PIECES_FOR_DEVELOPERS-JUPYTER-EMBEDDED_BUTTON_SAVE_ACTIVE_CELL-16X9-MACOS-6_22_2023.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## **Data Privacy, Security, and Offline-First Approach**\n\nWe prioritize your privacy and offline usability in the same spirit as JupyterLab.\n\n* **Privacy and Security**—All data is stored locally, on your device.\n\n* **On-Device ML**—80%+ of ML runs locally, reducing server exposure.\n\n* **Offline-First**—Works fully offline, with strong functionality.\n\n* **Opt-In Cloud**: Optional cloud features—<mark>your data, your control.</mark>\n\n<Image src=\"https://old.docs.pieces.app/assets/images/finder_window_privacy-1b7ed7f34f7bd8480ed5cdab215c1e36.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Configuration\n\nYou can personalize your experience with the Pieces for Developers JupyterLab Extension through the **Pieces Settings** menu.\n\nThis allows you to tailor how Pieces behaves to best fit your workflow:\n\n* **Auto-open Snippet List View**: Choose whether the Pieces View should automatically open when you save a new snippet—perfect for keeping your saved work front and center.\n\n* **Cloud Capabilities**: Toggle opt-in cloud features on or off. By default, Pieces is local-only, but you can enable cloud sync or sharing on a per-resource basis when needed.\n\n* **Pieces Server Port**: Manually configure the server port used by Pieces if you’re running a custom setup or need to resolve port conflicts.\n\n* **Login/Logout of Pieces Cloud**: Seamlessly sign in or out of your Pieces Cloud account to access synced snippets across devices or keep everything stored locally, depending on your preference.\n\n## Troubleshooting\n\nIf the Pieces for Developers JupyterLab Extension isn’t working as expected, first check that **Pieces OS** is running—you should see the Pieces logo in your toolbar (macOS) or taskbar (Windows).\n\nMake sure you have the latest versions of both the **Pieces JupyterLab Extension** and **Pieces OS (v8.0.0 or higher)**, and that your **JupyterLab version is 4.0.0 or above**.\n\nAfter updating, always restart JupyterLab to apply changes.\n\nIf problems persist, [submit this support form](https://getpieces.typeform.com/jupyterlab).\n\n<on-device-storage />",
    "lastModified": "2025-06-04T17:24:57.980Z",
    "filePath": "extensions-plugins/extensions-plugins/jupyterlab.md"
  },
  "/docs/extensions-plugins/neovim-plugin": {
    "slug": "/docs/extensions-plugins/neovim-plugin",
    "metadata": {
      "title": "Neovim Plugin",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1729000694787/79790597-fea0-42e0-9092-cf2676aee243.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nV2 Documentation for the Pieces for Developers Neovim Plugin is under construction 🚧 ...",
    "lastModified": "2025-06-04T17:24:57.998Z",
    "filePath": "extensions-plugins/extensions-plugins/neovim-plugin.md"
  },
  "/docs/extensions-plugins/sublime/commands": {
    "slug": "/docs/extensions-plugins/sublime/commands",
    "metadata": {
      "title": "Pieces for Sublime Text Plugin Commands",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/commands/commands_opened_command_palette_10182024.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Shortcut Table\n\nThere are a number of actions related to the [Pieces Copilot](https://docs.pieces.app/products/extensions-plugins/sublime/copilot) and [Pieces Drive management ecosystem](https://docs.pieces.app/products/extensions-plugins/sublime/drive) that are accessible with shortcuts.\n\n***\n\n| [Pieces: Ask About The Current Project](https://docs.pieces.app/products/extensions-plugins/sublime/copilot/chat#pieces-ask-about-the-current-project) | `⌘+shift+i`   | `ctrl+shift+i`     |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------- | ------------------ |\n| [Pieces: Search](https://docs.pieces.app/products/extensions-plugins/sublime/drive/search-reuse)                                                       | `⌘+⌥+shift+s` | `ctrl+alt+shift+s` |\n| [Pieces: Copilot](https://docs.pieces.app/products/extensions-plugins/sublime/copilot)                                                                 | `⌘+⌥+shift+o` | `ctrl+alt+shift+o` |\n| [Fix a bug](https://docs.pieces.app/products/extensions-plugins/sublime/copilot/debugging-errors)                                                      | `⌘+⌥+shift+f` | `ctrl+alt+shift+f` |\n| [Modify](https://docs.pieces.app/products/extensions-plugins/sublime/copilot/refactoring)                                                              | `⌘+⌥+shift+m` | `ctrl+alt+shift+m` |\n| [Add Code Comments](https://docs.pieces.app/products/extensions-plugins/sublime/copilot/documenting-code)                                              | `⌘+⌥+shift+c` | `ctrl+alt+shift+c` |\n\n***\n\n## Command Table\n\nYou can easily access these commands through the **Command Palette** using the shortcuts—`⌘+shift+p` (macOS) and `ctrl+shift+p` (Windows/Linux).\n\nSimply type `Pieces:` followed by the desired command to filter and locate it in the list.\n\n***\n\n| **Pieces: About**                         | View plugin details and PiecesOS version.                                                                                     |\n| ----------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| **Pieces: Copilot**                       | Create conversations, view past ones, or ask questions.                                                                       |\n| **Pieces: Login**                         | Opens the PiecesOS login page in your browser.                                                                                |\n| **Pieces: Search**                        | Perform neural, full-text, or fuzzy search.                                                                                   |\n| **Pieces: Change LLM**                    | Allows you to change the LLM to any LLM supported by PiecesOS.                                                                |\n| **Pieces: Get Support**                   | Access support options: file issues, join Discord, or visit the support site.                                                 |\n| **Pieces: Launch Onboarding**             | Opens the onboarding file post-installation.                                                                                  |\n| **Pieces: Reload Plugin**                 | Reloads the plugin for troubleshooting.                                                                                       |\n| **Pieces: Delete Copilot Chat**           | Deletes the current Pieces Copilot chat.                                                                                      |\n| **Pieces: Install PiecesOS**              | If PiecesOS is not found on your local machine, this command will take you the route of installing it.                        |\n| **Pieces: Open Pieces Drive**             | Opens materials found withing Pieces Drive.                                                                                   |\n| **Pieces: Enable Long-Term Memory**       | Enables the LTM-2.5 allowing you to actively capture what’s happening on your computer to grant the Copilot better answering. |\n| **Pieces: Pause Long-Term Memory**        | Completely disables Long-Term Memory LTM-2.5.                                                                                 |\n| **Pieces: Connect Personal Cloud**        | Connect to your Pieces cloud account.                                                                                         |\n| **Pieces: Disconnect Personal Cloud**     | Disconnect from your Pieces cloud account.                                                                                    |\n| **Pieces: Export Pieces Material**        | Export a saved snippet via dropdown selection.                                                                                |\n| **Pieces: Import Sublime Snippet**        | Import Sublime snippets into Pieces materials.                                                                                |\n| **Pieces: Open PiecesOS**                 | Launches PiecesOS (required for the plugin).                                                                                  |\n| **Pieces: Open Pieces Settings**          | Configure settings, LLM models, and snippet autocomplete.                                                                     |\n| **Pieces: Open Saved Material**           | Browse and manage saved snippets with metadata and editing tools.                                                             |\n| **Pieces: Ask About The Current File**    | Ask questions about the file you're working on.                                                                               |\n| **Pieces: Ask About The Current Project** | Inquire about your project files for better insights.                                                                         |\n\n***",
    "lastModified": "2025-06-04T17:24:58.010Z",
    "filePath": "extensions-plugins/extensions-plugins/sublime/commands.md"
  },
  "/docs/extensions-plugins/sublime/configuration": {
    "slug": "/docs/extensions-plugins/sublime/configuration",
    "metadata": {
      "title": "Configuration",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Supported LLMs\n\nWe constantly update and configure our plugins and extensions, like the Pieces for Sublime Text Plugin, to [work with the latest LLMs.](https://docs.pieces.app/products/large-language-models)\n\n## Opening Pieces Settings\n\nTo open Pieces settings inside of the Pieces for Sublime Text Plugin, you can use `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux) to open the command palette.\n\nThen, enter `Pieces: Open Pieces Settings`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/configuration/open_pieces_settings.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Login / Logout\n\nUse the `Pieces: Login` or `Pieces: Logout` command in your command palette to log in and out of your Pieces account.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733970751972/4255a16f-7b9e-44fb-b912-810fbfc80d51.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Configurable Settings\n\nThe Pieces for Sublime Text Plugin offers customizable settings to tailor your experience. These options let you configure the connection, language model, startup behavior, and code autocompletion. Here's an overview of the key settings:\n\n***\n\n| `host`                 | Specifies the address where the plugin should connect to a local service or server.                |\n| ---------------------- | -------------------------------------------------------------------------------------------------- |\n| `model`                | Determines which large language model to use for all Pieces Pilot functionality.                   |\n| `syntax`               | Let’s you adjust your language extension.                                                          |\n| `auto_start_pieces_os` | Lets you decide whether or not to open PiecesOS automatically on startup.                          |\n| `Copilot`              | Allows you to choose whether to open the Copilot in the browser or IDE.                            |\n| `auto_check_updates`   | Gives you the ability to enable or disable PiecesOS from auto updating.                            |\n| `snippet.autocomplete` | Decide whether or not to enable auto-completion of code via suggest snippets from your repository. |\n\n***\n\nTo change settings, you need to copy and paste the contents of the default settings file into the empty window on the right side, which you can find below:\n\n```json\n{\n\t\"model\":\"gpt-4o\", // Deprecated use \"Pieces: Change LLM\" instead\n\t\"auto_start_pieces_os\":true, // Open PiecesOS automatically on startup\n\t\"snippet.autocomplete\":false, // auto complete via Pieces saved snippets or not\n\t\"syntax\" : {}, // Langauge extension : syntax path\n\t\"copilot\" : \"IDE\", // IDE, BROWSER \n\t\t\t\t\t  // Opens the copilot either in browser or in the sublime IDE it self\n\t\"auto_check_updates\": true  // Check if Pieces for Sublime plugin has an update on startup\n\t\t\t\t\t\t\t\t// Turn this off if Package Control is working fine\n}\n```\n\n### Pieces Auto-Launch on Startup\n\nYou can choose whether or not PiecesOS starts immediately on the launch of the Sublime text editor by setting the parameters to `true` or `false.`\n\n### Snippet Auto-Complete\n\nSimilarly, adjust the parameters to `true` or `false` to enable auto-completion of code via snippets to speed up your coding progress.\n\nIf you have Pieces snippets saved that are relevant to the code you're writing, you'll get automatic completion for that specific language.\n\n### Reloading the Plugin\n\nTo reload the plugin, enter the command palette with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux) and type `Pieces: Reload Plugin`.\n\nFor additional support resources, [check out our troubleshooting guide.](https://docs.pieces.app/products/extensions-plugins/sublime/troubleshooting)\n\n## Saving Your Settings\n\nOnce you've copied the contents of the .JSON object and edited them to your preferences, simply save the file, reload the plugin, and restart Sublime for your changes to take effect.\n\n<Callout type=\"info\">\n  You can save the .JSON file with `⌘+s` (macOS) or `ctrl+s` (Windows / Linux). You do not need to use **Save As,** as the file is already existing and this is simply updating the settings file, which comes with the Pieces for Sublime Text package.\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.017Z",
    "filePath": "extensions-plugins/extensions-plugins/sublime/configuration.md"
  },
  "/docs/extensions-plugins/sublime/copilot/chat": {
    "slug": "/docs/extensions-plugins/sublime/copilot/chat",
    "metadata": {
      "title": "Generative AI Conversations",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Accessing Copilot Chats in Sublime Text\n\nThere are two primary ways to access Generative AI Conversations with the Pieces Copilot.\n\n### via Right-Click Menu\n\n<Steps>\n  <Step title=\"Select Code and Right-Click in the Editor\">\n    Highlight any code segment and right-click to open the Tool Menu.\n  </Step>\n\n  <Step title=\"Select a Relevant Action\">\n    Choose `Start Conversation About The Current Selection` to open a new conversation.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/chat/about_current_selection.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### via Command Palette\n\nOpen the command palette with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux), and enter commands such as:\n\n* `Pieces: Copilot`: Opens a clean-slate chat with Pieces Copilot.\n\n* `Pieces: Ask Copilot About Active File`: Provides insights for the current file open in your Sublime Text editor.\n\n- `Pieces: Ask About The Current Project`: Offers context-aware assistance across your entire project.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733965846464/9d871fcd-c401-4235-bdb2-e971e0809335.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nRead more about [what commands are available in the Pieces for Sublime Text Plugin.](https://docs.pieces.app/products/extensions-plugins/sublime/commands)\n\n## Contextualized Chats\n\nThere are 3 levels of contextual awareness you can use when starting a conversation or adding code to an existing Copilot Chat with the Pieces Copilot.\n\n### Pieces: Start Conversation About The Current Selection\n\nOne of the easiest ways to ask the Pieces Copilot a question about a specific class, method, function, or script is to open the right-click menu, hover over the Ask Copilot section, and select the `About Current Selection` option.\n\nTo use this feature:\n\n<Steps>\n  <Step title=\"Open the Right Click Menu\">\n    Right click on a selected portion of code.\n  </Step>\n\n  <Step title=\"Locate Ask Copilot\">\n    Hover over the `Ask Copilot` section.\n  </Step>\n\n  <Step title=\"About the Current Selection\">\n    Select the `About Current Selection` option.\n  </Step>\n\n  <Step title=\"Enter Query\">\n    Once selected, you can enter your prompt in the text input field at the bottom of the Sublime Text's view and press enter.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/chat/chatting_with_selection.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nThis feature makes it incredibly convenient for users to get quick insights or answers to specific questions about their code.\n\n### Pieces: Ask About The Current File\n\nThe `Pieces: Ask About The Current File` feature focuses on providing insights and assistance with the specific file you're working on.\n\nTo use this feature:\n\n<Steps>\n  <Step title=\"Open the Command Palette\">\n    Open up the command palette using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux).\n  </Step>\n\n  <Step title=\"Execute Command and Enter Query\">\n    Enter `Pieces: Ask About The Current File`, then enter your question into the input field.\n\n    <Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733965582024/558aef1b-5c14-4613-a7b2-76686c5fa823.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nAfter running the initial command, you can then query the LLM, which will use the file as context to generate accurate and useful responses.\n\n<Callout type=\"tip\">\n  This is ideal for developers who need a comprehensive understanding of a file, such as its dependencies, functions, and classes\n</Callout>\n\n### Pieces: Ask About The Current Project\n\nSimilar to the file-level command, the `Pieces: Ask About The Current Project` command lets developers understand every corner of an entire project.\n\nTo ask about the current project:\n\n<Steps>\n  <Step title=\"Open the Command Palette\">\n    Open the command palette with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux).\n  </Step>\n\n  <Step title=\"Execute Command and Enter Query\">\n    Enter `Pieces: Ask About The Current Project`, then type in your question.\n\n    <Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733965827869/24c0facf-d574-4b57-99e6-c5a48f2eb8ab.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nThis feature highlights errors and suggests improvements on a larger scale. Its main benefit is helping developers navigate their codebase by using the Pieces context-awareness engine to provide accurate information, even for specific prompts.\n\n## Adding Context to Copilot Chats\n\nThere are a number of individual items you can add as context to a chat, namely **Files, Folders,** and **Snippets**.\n\nThis flexibility is useful when reference materials aren't directly accessible from Sublime Text or when you want to **compartmentalize context** by keeping files or folders from other projects separate from your active workflow.\n\nTo do this:\n\n<Steps>\n  <Step title=\"Select the Message Icon\">\n    You can select the **Message Icon** on the left side of any of your chats in the Copilot Chat window.\n  </Step>\n\n  <Step title=\"Select your Context Type\">\n    A new menu will appear. Choose the type of context you want to add, then select the item you wish to include in the Copilot chat.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/chat/adding_context_to_copilot_chats.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## Improving Code Consistency & Standardization\n\nThe Pieces Copilot helps improve code quality by identifying inconsistencies and providing actionable suggestions for standardization.\n\n### Naming Inconsistencies\n\nIf functions across your workspace use inconsistent naming patterns (e.g., `authenticateUser` in `authHandler.go` vs. `retrieveUserProfile` in `userHandler.go`), Pieces Copilot can suggest adopting a standardized naming convention for better readability and maintainability, like this:\n\n```c\n// authHandler.go\nfunc authenticateUser(ctx context.Context, credentials Credentials) (User, error) {\n    if credentials.Username == \"\" || credentials.Password == \"\" {\n        return User{}, errors.New(\"missing credentials\")\n    }\n}\n```\n\n### Inconsistent Error Handling\n\nIf error-handling strategies differ across files (e.g., structured errors in `authService.go` vs. inconsistent handling in `userService.go`), Pieces Copilot can help unify the approach:\n\n```c\n// authService.go\nfunc LoginUser(credentials Credentials) (string, error) {\n    token, err := authenticate(credentials)\n    if err != nil {\n        return \"\", fmt.Errorf(\"login failed: %w\", err)\n    }\n    return token, nil\n}\n```",
    "lastModified": "2025-06-04T17:24:58.031Z",
    "filePath": "extensions-plugins/extensions-plugins/sublime/copilot/chat.md"
  },
  "/docs/extensions-plugins/sublime/copilot/debugging-errors": {
    "slug": "/docs/extensions-plugins/sublime/copilot/debugging-errors",
    "metadata": {
      "title": "Debugging Errors",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Using the Debugging Tool\n\nQuickly identify and resolve issues in your code with the `Fix A Bug` option from Pieces Copilot.\n\nTo use the debugging tool:\n\n<Steps>\n  <Step title=\"Select a Portion of Code\">\n    Select a portion of problematic code and right-click to open the context menu.\n  </Step>\n\n  <Step title=\"Hover over Pieces and Ask Copilot\">\n    Hover over `Pieces`, then hover over `Ask Copilot`.\n  </Step>\n\n  <Step title=\"Fix the Bug in the Code\">\n    Lastly, select `Fix A Bug` from the menu.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/debugging_errors/pieces_AI_copilot_debugging_errors_1072024.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nThe debugging function within the [Pieces Copilot uses the code's context](https://docs.pieces.app/products/extensions-plugins/sublime/copilot/chat#pieces-ask-about-the-current-file) and semantics to find and rectify issues.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/debugging_errors/fixing_a_bug.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nIf you face a specific error during code compilation, paste the error code into the **text input field** at the bottom of Sublime for detailed help, and Pieces Copilot will analyze it using the active LLM, open a Copilot Chat with suggestions, regenerate the code, and offer to insert it at the cursor with new comments.\n\n## Why Debug with Pieces Copilot?\n\nDebugging with Pieces Copilot streamlines error resolution by providing AI-driven insights in a seamless experience that integrates naturally into your Sublime Text workflow.\n\nIt saves time by eliminating the need to scour the web or sift through lengthy documentation, ensuring your workflow remains focused and distraction-free.\n\nMoreover, every suggested fix comes with a clear explanation, helping you not only resolve issues but also enhance your coding skills along the way.",
    "lastModified": "2025-06-04T17:24:58.038Z",
    "filePath": "extensions-plugins/extensions-plugins/sublime/copilot/debugging-errors.md"
  },
  "/docs/extensions-plugins/sublime/copilot/documenting-code": {
    "slug": "/docs/extensions-plugins/sublime/copilot/documenting-code",
    "metadata": {
      "title": "Documenting Code",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Commenting Code Selections with Pieces Copilot\n\nPieces Copilot can review and **comment on selected code**, offering line-by-line explanations for better readability and understanding.\n\n### via Right-Click Menu\n\nTo add comments to your code:\n\n<Steps>\n  <Step title=\"Select Portion of Code\">\n    Select a portion of the code you’d like to comment.\n  </Step>\n\n  <Step title=\"Right Click and Find Option\">\n    Right click on your selection code portion and hover over `Quick Actions`.\n  </Step>\n\n  <Step title=\"Add Code Comments\">\n    Select `Add Code Comments` from the tertiary menu.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/documenting_code/add_code_comments.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nPieces Copilot will then create clear, relevant comments for the selected code, allowing you to choose to `Accept` or `Reject` the suggested comments.\n\nThis feature is especially helpful for keeping your code easy to read and ensuring your codebase is well-documented.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/documenting_code/documenting_code.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Why Use Code Comments?\n\nCode comments are essential for **keeping a clean and well-documented codebase.**\n\nThey **provide context**, allowing reviewers to focus on functionality while **making complex logic clear**, ensuring the code is easier to follow and maintain.\n\nGood documentation improves code readability and speeds up onboarding for newcomers to the codebase. This dual benefit supports both **current and future development**, creating a strong **foundation for upgrades and changes.**\n\nThat's what makes this feature so valuable. Need a few hundred lines of code documented? No problem—just use `Add Code Comments`.",
    "lastModified": "2025-06-04T17:24:58.044Z",
    "filePath": "extensions-plugins/extensions-plugins/sublime/copilot/documenting-code.md"
  },
  "/docs/extensions-plugins/sublime/copilot/llm-settings": {
    "slug": "/docs/extensions-plugins/sublime/copilot/llm-settings",
    "metadata": {
      "title": "Switching LLMs",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Switching LLMs\n\nThe <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for VS Code Extension</a> currently supports [a wide range of different LLMs](https://docs.pieces.app/products/large-language-models), including both cloud-hosted and local models.\n\n## How To Configure Your LLM Runtime\n\nSwitching the LLM model in the Pieces for Sublime Text Plugin is straightforward, allowing you to choose the model that best fits your needs.\n\nTo get started, use the hotkey `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows / Linux) and enter `Pieces: Change LLM`.\n\nThis will open the LLM selection menu, where you’ll see all of the available LLMs you can choose from.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/llm_settings/pieces_settings.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  Check out our configuration page for [details on other adjustable settings](https://docs.pieces.app/products/extensions-plugins/sublime/configuration)\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.059Z",
    "filePath": "extensions-plugins/extensions-plugins/sublime/copilot/llm-settings.md"
  },
  "/docs/extensions-plugins/sublime/copilot/refactoring": {
    "slug": "/docs/extensions-plugins/sublime/copilot/refactoring",
    "metadata": {
      "title": "Refactoring Code",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Modifying Your Code with Pieces Copilot\n\nThe **Modify** function in Pieces Copilot allows you to enhance your selected code by making adjustments such as improving error handling, renaming functions, or adding new functionality.\n\nIn Sublime Text, you can modify your code via the following steps:\n\n### via Right-Click Menu\n\nSay you want to add a missing positional argument to the `add_user` function.\n\nSimply follow these step below and Pieces Copilot will efficiently apply the necessary changes.\n\n<Steps>\n  <Step title=\"Select a Portion of Code\">\n    Select the portion of code you want to modify.\n  </Step>\n\n  <Step title=\"Open the Context Menu\">\n    Right-click to open the context menu.\n  </Step>\n\n  <Step title=\"Modify your Code\">\n    Hover over `Quick Actions` and select the `Modify` option.\n  </Step>\n\n  <Step title=\"Enter your Prompt\">\n    Enter the query containing specific modification instructions. In this case, we want to add the aforementioned argument to the `add_user` function, so we’ll specify that.\n  </Step>\n</Steps>\n\nThen, press `return` (macOS) or `enter` (Windows/Linux), then accept or deny the changes once the Pieces Copilot has generated the modifications accordingly.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/refactoring/modify_code.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Use Cases\n\nPieces Copilot’s **Modify** feature can handle a variety of refactoring scenarios. Here are some everyday tasks where it can help:\n\n* **Renaming Variables or Functions Across Multiple Files:** Instead of manually searching for occurrences, just instruct Pieces Copilot to rename them. It updates references automatically, reducing the chance of a missed or broken link.\n\n* **Updating a Deprecated API Call:** Legacy code often uses outdated methods. Instruct Pieces Copilot to replace the old API call with the new one and handle any necessary parameter or return-value changes.\n\n* **Adding Error Handling to a Function:** If you have a function without proper error handling, ask Pieces Copilot to wrap it in a try/catch block, or add more robust error-logging statements.\n\n* **Reorganizing Code for Better Readability:** Large functions with multiple responsibilities can be split into smaller helper functions, or code blocks can be reordered for clarity. Pieces Copilot can assist by identifying logical sections and extracting them into new functions.\n\n* **Converting Code Syntax:** Use “Modify” to transform class components into functional components (in React), convert promise chains into async/await, or update ES5 syntax to ES6+.\n\n<Callout type=\"tip\">\n  Try using the `Modify` function to implement error handling, update deprecated methods, add logging to several functions, or refactor variable names for consistency.\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.065Z",
    "filePath": "extensions-plugins/extensions-plugins/sublime/copilot/refactoring.md"
  },
  "/docs/extensions-plugins/sublime/copilot": {
    "slug": "/docs/extensions-plugins/sublime/copilot",
    "metadata": {
      "title": "Pieces Copilot",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Generative AI Conversations\n\nIf you're unsure how to implement a specific feature or stuck on a bug, you can [ask the Pieces Copilot coding-related questions](https://docs.pieces.app/products/extensions-plugins/sublime/copilot/chat) directly in Sublime. It will provide context-aware responses to help you move forward.\n\nThe Pieces for Sublime Text plugin provides various conversation features, all fully integrated with Pieces. You can activate the **Long Term Memory Engine (LTM-2)** for detailed, seamless context across your entire workflow, or start a limited context conversation in the text editor's side view.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733963468023/508efe59-fa48-4b81-b2e5-b252ae9f0703.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Adding Conversation Context\n\nContextual awareness enables the Pieces Copilot to provide solutions that are directly relevant to the challenges you're facing and your code.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/pieces_ai_copilot_PARENT_PAGE/add_file_to_context.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nStart by right-clicking an active file in Sublime Text and click `Pieces: Add to Copilot Context`.\n\nWithin the Pieces Copilot active chat, you can also add multiple types of context by clicking the `message icon`. After doing so a new menu will pop up asking what you’d like to add as context.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/pieces_ai_copilot_PARENT_PAGE/adding_context_active_chat.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Pieces Copilot Tools\n\nExplore powerful AI-driven tools and features with the Pieces for Sublime Text Plugin.\n\n### Documenting Code\n\nKeeping well-documented code is an often overlooked aspect of programming, but it’s *very* important—that’s why the Pieces Copilot in Sublime Text lets you [use AI to generate intelligent and context-aware code comments.](https://docs.pieces.app/products/extensions-plugins/sublime/copilot/documenting-code)\n\nTo add documentation and comments to code, select the code snippet—no matter the length—then right click, hover over `Pieces`, then hover over `Quick Actions`, and finally click on `Add Code Comments`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/documenting_code/documenting_code.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis opens a pop-up near the selected code with an option to `Accept` or `Reject` the changes that contain the newly generated comments.\n\n### Enhanced Debugging Tools\n\nThe [Code Debugging feature in the Pieces for Sublime Text Plugin](https://docs.pieces.app/products/extensions-plugins/sublime/copilot/debugging-errors) assists developers in identifying and resolving errors within their code and is accessible with just a few clicks.\n\nThis feature identifies issues and suggests fixes, making debugging easier. It's great for improving code quality and saving troubleshooting time.\n\nTo quickly debug your code with Pieces, select the code snippet you're having trouble with, right-click, hover over `Pieces`, then hover over `Quick Actions`, select `Fix a Bug`, and enter your query.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/documenting_code/fixing_a_bug.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis opens a pop-up near the selected code with an option to Accept or Reject the changes that contain the fixes for the broken segment of code.\n\n### Generate & Update Code\n\nThe Pieces Copilot can [generate code snippets based on your specifications](https://docs.pieces.app/products/extensions-plugins/sublime/copilot/refactoring).\n\nWith the Pieces for Sublime Text Plugin, you can enhance your workflow with two powerful Pieces Copilot commands:\n\n* `Modify`: [Edit or transform the selected code snippet to improve readability](https://docs.pieces.app/products/extensions-plugins/sublime/copilot/refactoring), optimize performance, or adapt it for specific needs.\n\n* `Explain`: Get a clear explanation of what the selected code does, making it easier to understand and document.\n\nIt helps update existing code by offering improved or refactored versions, optimizing processes, adding updates, and automating repetitive tasks based on your current code context.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/pieces_ai_copilot/documenting_code/modify_code.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Selecting Your Pieces Copilot Runtime\n\nYou can change which [LLM is utilized by Pieces Copilot](https://docs.pieces.app/products/extensions-plugins/sublime/copilot/llm-settings) in the Pieces for Sublime Text Plugin by running the command `Pieces: Change LLM`.\n\nOptions include lightweight models for simple queries, advanced models for in-depth analysis, and both **local** and **cloud-based LLMs**.\n\nThis flexibility lets you customize the Pieces Copilot experience to suit your specific development needs, whether prioritizing speed or accuracy.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733964812742/8adf13f1-2f19-4399-9999-864ae36d5d99.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Pieces Copilot As a Daily Driver\n\nThe Pieces Copilot is a powerful, adaptable tool that grows with you as you use it—*so use it!*\n\n***\n\n<AccordionGroup>\n  <Accordion title=\"Collaborative Coding Made Easy\">\n    Generate detailed comments and documentation for better team collaboration and also reduce onboarding times, creating a unified coding style across teams.\n  </Accordion>\n\n  <Accordion title=\"Troubleshoot and Resolve Bugs Swiftly\">\n    Use the Pieces Copilot in Sublime Text to streamline the bug-fixing process. Its contextual understanding and suggested solutions make troubleshooting faster, keeping your project on course.\n  </Accordion>\n\n  <Accordion title=\"Quick Prototyping\">\n    Generate initial implementations and boilerplate code for prototypes and fast-paced projects. Ideal for hackathons, PoCs, and other time-sensitive tasks.\n  </Accordion>\n\n  <Accordion title=\"Skill Enhancement\">\n    Pieces Copilot doubles as a learning tool, helping you explore best practices, new paradigms, and advanced techniques in real-time.\n  </Accordion>\n\n  <Accordion title=\"Efficient Code Refactoring\">\n    Optimize your codebase through intelligent refactoring recommendations. The Pieces Copilot analyzes your code patterns suggests structural improvements and delivers optimizations for both performance and readability.\n  </Accordion>\n</AccordionGroup>\n\n***\n\n<a target=\"_blank\" href=\"https://pieces.app/plugins/sublime\">Download the Pieces for Sublime Text Plugin today!</a>",
    "lastModified": "2025-06-04T17:24:58.022Z",
    "filePath": "extensions-plugins/extensions-plugins/sublime/copilot.md"
  },
  "/docs/extensions-plugins/sublime/drive/edit-update": {
    "slug": "/docs/extensions-plugins/sublime/drive/edit-update",
    "metadata": {
      "title": "Edit & Update",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Editing\n\nMaintaining an up-to-date library of code snippets in the <a target=\"_blank\" href=\"https://packagecontrol.io/packages/Pieces\">Pieces for Sublime Text</a> Plugin is made easy through seamless editing.\n\n## How to Edit Snippets\n\nTo modify an existing snippet, follow these steps:\n\n<Steps>\n  <Step title=\"Open the Command Palette\">\n    Open the command palette using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux)\n  </Step>\n\n  <Step title=\"Open Saved Materials\">\n    In the text field, type `Pieces: Open Saved Materials`\n  </Step>\n\n  <Step title=\"Search for your Materials\">\n    Search for your asset, or choose it drop the available assets listed in the dropdown\n  </Step>\n\n  <Step title=\"Open the Snippet\">\n    Left-click or press enter to select and open that snippet\n  </Step>\n\n  <Step title=\"Open Editor Mode\">\n    Switch to the **Editor Mode** by clicking the `Edit` button on your saved snippet\n  </Step>\n\n  <Step title=\"Modify the Snippet\">\n    Modify the content of the snippet as needed and save your changes with the `⌘+s` (macOS) or `ctrl+s` (Windows/Linux)\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/using_snippets_PARENT_PAGE/commenting_editing_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nOnce you make your changes, saving your snippet will close the editing view and bring you back to the saved snippet's main tab.\n\n## Actions from the Editing View\n\nWhen editing a snippet, you can use all [Pieces Copilot](https://docs.pieces.app/products/extensions-plugins/sublime/copilot) features, like adding comments, starting conversations, and fixing bugs, allowing you to share it with a coworker, get feedback, and then refine the snippet by adding comments and adjusting parameters or error handling.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/edit_and_update/documenting_code.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:58.098Z",
    "filePath": "extensions-plugins/extensions-plugins/sublime/drive/edit-update.md"
  },
  "/docs/extensions-plugins/sublime/drive/save-snippets": {
    "slug": "/docs/extensions-plugins/sublime/drive/save-snippets",
    "metadata": {
      "title": "Saving",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Saving Materials to Pieces Drive\n\nThere are two ways to save code with the Pieces for Sublime Text Plugin—through the right-click menu, or by saving with hotkeys.\n\nYou can use this feature to save all kinds of useful code materials, like:\n\n* API endpoint definitions\n\n* Utility functions or commonly used helper methods\n\n* Code templates for starting new modules\n\n* Reusable logic for error handling or authentication\n\n## How to Save Materials\n\nThere is one way to save code within the Pieces for Sublime Text Plugin—through the right click menu.\n\n### via Right-Click Menu\n\nTo capture useful code snippets, simply:\n\n<Steps>\n  <Step title=\"Select a Portion of Code\">\n    Highlight the code within your editor\n  </Step>\n\n  <Step title=\"Right Click\">\n    Right click the selection of code you chose\n  </Step>\n\n  <Step title=\"Select Save to Pieces\">\n    Hover on `Pieces` and then select `Save to Pieces`\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/using_snippets_PARENT_PAGE/saving_to_pieces.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## What’s Stored When You Save a Snippet\n\nWhen you save a snippet to your Pieces Cloud, it’s more than just the code that gets stored.\n\nThe Pieces Copilot captures:\n\n* `Type`: Categorizes the snippet (e.g., API call, function, class) with it’s code language.\n\n* `Associated Tags`: Keywords associated with the snippet for easier searching.\n\n* `Custom Description`: Specifies precisely which *lines* (in numerical form) the snippet is from, as well as the file from which it originated—very useful for mind-mapping.\n\n* `Smart Description`: AI-generated descriptions that summarize the snippet’s purpose and function.\n\n* `Suggested Searches`: Related searches that help you discover similar snippets.\n\n* `Related Links`: References to documentation, code repositories, or other relevant resources.\n\n* `Related People`: Associated collaborators or contributors.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733969003991/b9f128cb-abed-4994-a43a-c6a2fdcde437.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nAdditionally, the Pieces Copilot **scans saved snippets for sensitive information**, such as API keys, passwords, or authentication tokens, to ensure no confidential data is accidentally stored.\n\n## Where Saved Snippets Live\n\nSaved snippets are stored locally on your device, ensuring accessibility even when offline. This also means that any Pieces for Developers extension or plugin—or even the Pieces Desktop App—has constant, up-to-date access to your saved materials.\n\nYou can search your saved snippets with the `Pieces: Search` feature.\n\n[Read more about how to find your saved snippets here.](https://docs.pieces.app/products/extensions-plugins/sublime/drive/search-reuse#finding-saved-snippets)",
    "lastModified": "2025-06-04T17:24:58.105Z",
    "filePath": "extensions-plugins/extensions-plugins/sublime/drive/save-snippets.md"
  },
  "/docs/extensions-plugins/sublime/drive/search-reuse": {
    "slug": "/docs/extensions-plugins/sublime/drive/search-reuse",
    "metadata": {
      "title": "Searching",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Locate Materials in Pieces Drive\n\nOne of the most powerful tools baked into the Pieces for Sublime Text Plugin is the search functionality which allows you to utilize **three different searching methods.**\n\nTo get started open the command palette using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux) and type `Pieces: Search`. You’ll be presented with the options to use Neural, Fuzzy, and Full Text code searching.\n\n### via Fuzzy Search\n\nFuzzy Search helps find relevant matches even with typos, misspellings, or variations.\n\nIt’s great for locating partially-remembered function names, error messages, log entries, or comments, saving time with flexible, quick searches.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733969222267/21d999af-9f4e-458c-a1e3-c08ce01c16bb.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Full Text Search\n\nFull Text Search finds documents or records with an exact word match.\n\nIt indexes all words for fast searching, ideal for specific queries like function declarations, pulling up matching snippets and related classes efficiently.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733969192967/9c752edc-10d2-4be7-bcff-d3ce9dd6481a.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Neural Code Search\n\nNeural Code Search uses machine learning to find code snippets based on natural language descriptions.\n\nIt captures context and semantics, delivering accurate results, especially helpful for new developers or complex queries.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/search_and_reuse/search_natural_NPL.gif\" alt=\"\" align=\"middle\" fullwidth=\"true\" />\n\n## Viewing and Reusing Saved Snippets\n\n[Saved snippets](https://docs.pieces.app/products/extensions-plugins/sublime/drive/save-snippets) can be viewed alongside their saved metadata by opening up them up directly from the command palette.\n\n### via Command Palette\n\n<Steps>\n  <Step title=\"Open the Command Palette\">\n    Open the Command Palette using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux)\n  </Step>\n\n  <Step title=\"Open Saved Materials\">\n    Type in `Pieces: Open Saved Material` to access your saved materials\n  </Step>\n\n  <Step title=\"Select a Snippet\">\n    Scroll through the list to find the snippet you’d like to view\n  </Step>\n\n  <Step title=\"Open the Snippet\">\n    Highlight the desired snippet and press `return` (macOS) or `enter` (Windows/Linux)\n  </Step>\n</Steps>\n\nThis opens up the snippet in markdown preview mode in a separate window. In the new window, you have the ability to [share, view metadata, edit, copy, or delete the snippet](https://docs.pieces.app/products/extensions-plugins/sublime/drive).\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/search_and_reuse/open_saved_media.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Real Time Snippet Streaming[​](https://docs.pieces.app/extensions-plugins/jetbrains#real-time-snippet-streaming)\n\nEach product in the Pieces Suite uses [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os) to get information about your snippets' context.\n\nWhen you update a snippet in the [Pieces for Developers Desktop App](https://docs.pieces.app/products/desktop)—such as a name or description, tags or any of the other metadata—those changes are also reflected in your Pieces for Sublime Text Plugin without refreshing.\n\n<Callout type=\"tip\">\n  If your snippets are not updating right away, see the [troubleshooting guide](https://docs.pieces.app/products/extensions-plugins/sublime/troubleshooting) for details on how to refresh your snippet list.\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.110Z",
    "filePath": "extensions-plugins/extensions-plugins/sublime/drive/search-reuse.md"
  },
  "/docs/extensions-plugins/sublime/drive/sharing": {
    "slug": "/docs/extensions-plugins/sublime/drive/sharing",
    "metadata": {
      "title": "Sharing Snippets",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## How to Share a Saved Snippet\n\nTo create a link that you can share anywhere, right-click on a section of selected code, hover over the `Pieces` option, and then choose `Generate Shareable Link`.\n\nA prompt will appear, allowing you to either `Copy` or `Dismiss` the shareable link.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/sharing/gen_shareable_link.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nWhen you click `Generate Shareable Link`, the Pieces Copilot will generate the link, then open a small menu with two options—`Copy` or `Dismiss`, allowing you to either copy the link or disregard the link.\n\nSelecting `Copy` will copy the shareable URL to your clipboard:\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/sharing/using_snippets_menu_generate_shareable_link_1092024.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis feature allows the recipient to easily access and view the snippet, even if they don't have Pieces installed or have a Pieces account.\n\n<Callout type=\"tip\">\n  This link can easily be shared via email, Discord, Slack, or other platforms. The recipient can view the snippet **without needing to have a Pieces account.**\n</Callout>\n\n## Generating Links for Existing Snippets\n\nIn addition to sharing code snippets on the fly, you can also open up previously saved materials and generate a shareable link from the embedded `Share` button.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/using_snippets_PARENT_PAGE/sharing_saved_media.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Enriched Sharing Experience\n\nWhen you `Share` a snippet, it’s not just the code that’s included. The snippet comes with additional metadata to provide context—[you can read more about that here.](https://docs.pieces.app/products/extensions-plugins/sublime/drive/save-snippets#whats-stored-when-you-save-a-snippet)\n\n* `Snippet Type`: Identify the language or framework, such as Python or React.\n\n* `Tags`: Useful keywords for quick categorization.\n\n* `Description`: A short summary of what the snippet does.\n\n* `Related Links`: Helpful resources or documentation tied to the snippet.\n\n* `Author Information`: A record of who created the snippet.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733970528143/f4acf9e2-0d73-4634-8695-a6cdcfbd3814.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## What Information Gets Shared\n\nWhen a snippet is saved to the Pieces Cloud, the code is [enriched with valuable information](https://docs.pieces.app/products/extensions-plugins/sublime/drive/save-snippets#whats-stored-when-you-save-a-snippet) such as related people, links, annotations, tags, and an automatically-generated description.\n\nThis information is visible to the right of the code block when the shared snippet is open in your browser:\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733970040011/f627038f-b8f3-46f8-8235-600d1a8a8efd.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Sensitive Information Watchdog\n\nThe `Generate Shareable Link` feature does more than just allow you to effectively share snippets across your entire team and other communities, though.\n\nYou'll see a section titled **Sensitive Information:**\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733970500459/864946d3-8d27-435c-beb4-01f5d37e5fdc.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nOur in-house ML model scans snippets for potentially sensitive information, like API keys or passwords, and alerts you so that you can make an informed decision before sharing the snippet.  \n\nThe scan happens locally using on-device machine learning models **before the snippet is uploaded to the cloud** for sharing—that way, you can make an informed decision about sharing your code.",
    "lastModified": "2025-06-04T17:24:58.114Z",
    "filePath": "extensions-plugins/extensions-plugins/sublime/drive/sharing.md"
  },
  "/docs/extensions-plugins/sublime/drive": {
    "slug": "/docs/extensions-plugins/sublime/drive",
    "metadata": {
      "title": "Pieces Drive",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Using Pieces Drive in Sublime Text\n\nThe <a target=\"_blank\" href=\"https://packagecontrol.io/packages/Pieces\">Pieces for Sublime Text Plugin</a> enhances your development workflow with powerful features like [saving](https://docs.pieces.app/products/extensions-plugins/sublime/drive/save-snippets) and [reusing](https://docs.pieces.app/products/extensions-plugins/sublime/drive/search-reuse) snippets, ensuring your most critical code is always accessible.\n\n## Use Cases & Examples\n\nLet’s take a look at some examples:\n\n***\n\n| `Logging Utilities`    | A helper function for detailed server-side logging with timestamps and error levels.                        | Speeds up debugging and monitoring by inserting reliable logging methods.   |\n| ---------------------- | ----------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------- |\n| `Validation Functions` | A function to validate JSON payloads or form inputs before submission.                                      | Ensures data integrity with reusable, thoroughly tested validation logic.   |\n| `API Integration Code` | Prewritten `axios` code for making GET or POST requests, complete with error handling and response parsing. | Reduces repetitive work when integrating RESTful APIs or GraphQL endpoints. |\n| `Component Templates`  | A React functional component template with basic hooks and styling setup.                                   | Provides a consistent starting point for building new components.           |\n| `Database Queries`     | A MongoDB query to retrieve active user data filtered by last login.                                        | Streamlines database tasks by reusing optimized query patterns.             |\n\n***\n\n## Boosting Productivity with Snippet Management\n\nThe Pieces for Sublime Text Plugin connects you with your development environment, so you can focus on what matters—building great software—while empowering you with tools for efficient code reuse.\n\n* **Improved Productivity:** Focus on solving new problems rather than resolving old ones.\n\n* **Contextual Awareness:** Snippets enriched with metadata, descriptions, and links to relevant searches help you remember the origin, purpose, and ideal usage scenarios for each piece of code.\n\n* **Code Standardization:** Sharing best practices and reusable components helps developers ensure uniform coding practices and conventions are available across different teams and projects.\n\nBy using the Pieces for Sublime Text Plugin, you can capture and manage these snippets to streamline daily tasks and enhance your workflow in several ways:\n\n### Save & Organize\n\nUsers can save snippets by highlighting the desired code, right-clicking, and selecting the `Save to Pieces` option.\n\nThis will open a new Sublime Text tab with your new snippet. Additionally, [each snippet is enriched with context](https://docs.pieces.app/products/extensions-plugins/sublime/drive/save-snippets#whats-stored-when-you-save-a-snippet), allowing you to insert well-documented, relevant snippets where they fit best in your projects.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/using_snippets_PARENT_PAGE/saving_to_pieces.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis ensures that important pieces of code, like code fragments, functions, configuration files, and command-line instructions, are always available when you need them.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734102266231/9340d7d0-7f15-4559-99ec-b892af68dcc9.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Search & Reuse\n\nYou can directly [search through your collection of saved materials](https://docs.pieces.app/products/extensions-plugins/sublime/drive/search-reuse) from within Sublime Text, allowing you to quickly find snippets by keyword or context.\n\nTo search you can open the command palette with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux), enter `Pieces: Search`, and select the algorithm that suits your search case best.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/search_and_reuse/search_natural_NPL.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThese intelligent search options ensure that you can find the exact snippet you need, even if you don't remember the exact details. They also prevent you from wasting time rewriting or searching for the same solutions across projects.\n\n### Edit & Update\n\nWith a few keystrokes, you can [open saved snippets from your local repository and make edits](https://docs.pieces.app/products/extensions-plugins/sublime/drive/edit-update) to keep your code evergreen and improve your most important pieces of code.\n\nYou can open your saved materials by opening the command palette with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux), enter `Pieces: Open Saved Material`, and search or select for the snippet you’d like to edit.\n\nAfter selecting, the snippet will open up in a new page, where you can select `Edit` and make your necessary edits to the snippet.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/using_snippets_PARENT_PAGE/editing_in_editor.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nRegularly revisiting your snippets ensures that your code evolves with your projects, adapting to new requirements and improvements. \n\n### Sharing\n\nIs your teammate struggling to find important boilerplate code? Are they contacting you on vacation, urgently needing the shell script that keeps server #1 running?\n\nThis is where sharing snippets comes into play—this feature lets you [share your code with team members](https://docs.pieces.app/products/extensions-plugins/sublime/drive/sharing), even if they don’t use Pieces.\n\n<Callout type=\"tip\">\n  This can be done without the recipient needing a Pieces for Developers Account.\n</Callout>\n\nSharing useful code snippets can remove productivity barriers, especially when a co-developer is new to the project or a junior team member.\n\nFor example, a teammate managing server monitoring could use your shared script to automate daily tasks easily, saving time and effort without needing extra setup.\n\nThese shared links also include their [original enriched metadata](https://docs.pieces.app/products/extensions-plugins/sublime/drive/save-snippets#whats-stored-when-you-save-a-snippet), such as tags, descriptions, and other details.\n\nTo share a snippet in Sublime Text, highlight the code, right-click, hover over `Pieces`, click `Generate Shareable Link`, and then use the pop-up to `copy` or `dismiss` the link for easy sharing with teammates.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/using_snippets/using_snippets_PARENT_PAGE/sharing_saved_media.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Use Cases\n\nWith Pieces for Sublime Text Plugin, your snippets become a robust library of reusable code that you can organize, search, edit, and share across projects.\n\nHere are some examples of how you can use them:\n\n### Reusable Scheduling Functions\n\nImagine yourself regularly tackling projects that require scheduling tasks to run at specific intervals.\n\nInstead of rewriting the same logic for each new project, you can [save an evergreen snippet to your Pieces repository](https://docs.pieces.app/products/extensions-plugins/sublime/drive/save-snippets#saving-snippets).\n\nThis allows you to reuse a well-crafted scheduling function across multiple applications that’s useful in a variety of scenarios:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\n// A reusable function to schedule tasks at a specified interval\nfunc scheduleTask(interval time.Duration, task func()) {\n\tticker := time.NewTicker(interval)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\ttask()\n\t\t}\n\t}\n}\n```\n\n### File System Monitoring\n\nIf you frequently work on projects that involve monitoring file system changes, you can save a helpful snippet to your Pieces repository that does exactly that, using generic and reusable naming conventions:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/fsnotify/fsnotify\"\n)\n\n// A reusable function to monitor file system changes\nfunc watchFileChanges(path string) {\n\twatcher, err := fsnotify.NewWatcher()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer watcher.Close()\n\n\terr = watcher.Add(path)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfor {\n\t\tselect {\n\t\tcase event := <-watcher.Events:\n\t\t\tif event.Op&fsnotify.Write == fsnotify.Write {\n\t\t\t\tfmt.Println(\"Modified file:\", event.Name)\n\t\t\t}\n\t\tcase err := <-watcher.Errors:\n\t\t\tfmt.Println(\"Error:\", err)\n\t\t}\n\t}\n}\n```\n\n## Additional Snippet Scenarios\n\nRead up on some additional scenarios and use cases for Pieces Snippets and see how the <a target=\"_blank\" href=\"https://packagecontrol.io/packages/Pieces\">Pieces for Sublime Text Plugin</a> could benefit you and your workflow.\n\n***\n\n<AccordionGroup>\n  <Accordion title=\"Testing Framework Templates\">\n    Streamline testing by saving snippets for your frequently used testing functions [or unit test templates.](https://docs.pieces.app/products/extensions-plugins/sublime/drive/save-snippets#saving-snippets)\n  </Accordion>\n\n  <Accordion title=\"Command-Line Utilities\">\n    [Save command-line instructions as snippets](https://docs.pieces.app/products/extensions-plugins/sublime/drive/save-snippets#saving-snippets) to quickly retrieve deployment commands, Docker setups, and other essential terminal operations.\n  </Accordion>\n\n  <Accordion title=\"Error Handling & Logging\">\n    You can also save common logging functions or error-handling snippets that can be reused across applications, promoting consistent error management.\n  </Accordion>\n\n  <Accordion title=\"Quickly Create New Projects\">\n    Import saved setup scripts, configuration files, and commonly used dependencies to speed up project setup and ensure consistency across new projects.\n  </Accordion>\n</AccordionGroup>\n\n***\n\n<a target=\"_blank\" href=\"https://pieces.app/plugins/sublime\">Download the Pieces for Sublime Text Plugin today!</a>",
    "lastModified": "2025-06-04T17:24:58.079Z",
    "filePath": "extensions-plugins/extensions-plugins/sublime/drive.md"
  },
  "/docs/extensions-plugins/sublime/get-started": {
    "slug": "/docs/extensions-plugins/sublime/get-started",
    "metadata": {
      "title": "Get Started",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Sublime Prerequisites\n\nBefore you begin, make sure you have:\n\n* **PiecesOS:** The core engine that powers all Pieces extensions. [Learn more about PiecesOS.](https://docs.pieces.app/products/core-dependencies/pieces-os)\n\n* **Sublime Text:** Make sure you’ve installed Sublime Text on your development machine.\n\nYou must have <a target=\"_blank\" href=\"https://beta.docs.pieces.app/products/core-dependencies/pieces-os\">**PiecesOS**</a> to use the Pieces for Sublime Plugin. We also recommend downloading the Pieces for Developers Desktop App.\n\n## Installing the Pieces for Sublime Text Plugin\n\nStart by installing Package Control, a required dependency for installing plugins and other tools within the Sublime Text environment.\n\nVisit the <a target=\"_blank\" href=\"https://packagecontrol.io/installation\">Package Control installation page</a> and follow the instructions to install Package Control in Sublime Text.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733962285453/d3ca8a87-0089-47ba-98eb-6de28622b43e.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Steps>\n  <Step title=\"Open Command Palette\">\n    Use the shortcut `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux) to open the command palette\n  </Step>\n\n  <Step title=\"Install Pieces Plugin\">\n    Using the command palette, search for `Package Control: Install Package`, then search for `Pieces` and select it\n  </Step>\n\n  <Step title=\"Restart Sublime\">\n    After installing the Pieces Plugin, restart the Sublime editor to ensure all the dependencies are loaded properly\n  </Step>\n</Steps>\n\n### Setting up PiecesOS\n\n<a target=\"_blank\" href=\"https://docs.pieces.app/products/core-dependencies/pieces-os\">PiecesOS</a> is required for the <a target=\"_blank\" href=\"https://packagecontrol.io/packages/Pieces\">Pieces for Sublime Text Plugin</a> to work.\n\nIf you haven’t installed it yet, click the buttons to download PiecesOS via the recommended method, or follow the alternative steps below.\n\n## Updating\n\nThe Pieces for Sublime Text Plugin will automatically update when a new version is available via `Package Control`.\n\nWhen the plugin updates, you’ll see a small success message pop-up in the center of your Sublime Text Editor.\n\n<Callout type=\"tip\">\n  **Update notifications** cover updates for both the Pieces for Sublime Text and PiecesOS.\n</Callout>\n\nYou can also manually update the plugin by opening your Command window in Sublime Text by using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux), locating the `Package Control: Upgrade Package`, and clicking the option.\n\nThis will auto-update the Pieces for Sublime Text Plugin.\n\n## Disconnect from Pieces Cloud\n\nConnecting to the Pieces Cloud is optional. However, it **provides additional features** like **data backups, shareable links, and more.** You can enjoy the main functionalities of Pieces without an account.\n\n<Callout type=\"info\">\n  Disconnecting from the Pieces Cloud logs you out of your Pieces account.\n</Callout>\n\nTo disconnect from the Pieces Cloud:\n\n<Steps>\n  <Step title=\"Open the Command Palette\">\n    Open the command palette\n  </Step>\n\n  <Step title=\"Disconnect the Cloud\">\n    Select `Pieces: Disconnect from Pieces Cloud`\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/getting_started/disconnect_from_pieces_cloud_sublime.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## Onboarding\n\nThe Pieces for Sublime Text plugin has an interactive walkthrough that shows all the steps in one panel. This onboarding page guides you on saving, viewing, and using saved materials, helping you get the most out of the Pieces for Sublime Text plugin.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/getting_started/whole_onboarding.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### PiecesOS Installation\n\nIf PiecesOS is not installed or running on your system, you can launch it here. This section allows you to install or open PiecesOS directly from within Sublime.\n\n### Create your First Snippet\n\nWhen you click `creation`, Pieces will automatically generate you a sample snippet in a new tab and give you a few steps that will walk you through saving a snippet—right click on the snippet, hover over `Pieces`, and select `Save to Pieces`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/getting_started/save_first_snippet.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### View your Saved Snippets\n\nClick `View Your Saved Materials`—Pieces Drive will open to your **Saved Materials**, displaying any snippets you saved before and the newly generated snippet.\n\n### Search for your Saved Snippet\n\nAfter clicking `searching`, a prompt window opens up where you can search for your snippet with [three optional ways to search](https://docs.pieces.app/products/extensions-plugins/sublime/drive/search-reuse).\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/getting_started/seearching_snippets.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Ask for Help\n\nAfter clicking the prompt, `Ask for help and get those bugs fixed`, PiecesOS will open a new snippet with a hidden bug in a new window and guide you through the process of fixing it. You can `right-click` the snippet, hover over `Pieces`, go to `Quick Actions`, and select `Fix a bug`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/getting_started/fixing_bug_onboarding.gif\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Pieces Copilot\n\nThis is when you're introduced to opening Pieces Copilot. When you select `Copilot`, Pieces will open a new tab with Pieces Copilot ready for a prompt!\n\nOnce you open the Copilot, the onboarding step is done. You can now ask [questions about your code](https://docs.pieces.app/products/extensions-plugins/sublime/copilot/chat), [document it](https://docs.pieces.app/products/extensions-plugins/sublime/copilot/documenting-code), [debug errors](https://docs.pieces.app/products/extensions-plugins/sublime/copilot/debugging-errors), or [refactor selected material](https://docs.pieces.app/products/extensions-plugins/sublime/copilot/refactoring)—all within the Sublime Text interface.\n\n### Explain\n\nYou might encounter some sections of code, whether from GitHub or something you haven't looked at in a while. Pieces provides an explanation feature to help you understand what's going on in the code—this section shows you how to use it.\n\nWhen you click `explanation`, a new tab will open. Right-click, hover over `Pieces`, go to `Ask Copilot`, and select `Explain`.\n\n### Explore the Features\n\nThe final three steps provide useful information to help you use PiecesOS without any problems. Select `documentation` to access this guide and learn more about Pieces for Sublime Text.\n\nIf you encounter more issues than expected, select `Pieces: Get Support` to access our support right away.\n\nIf you have more questions or want to join the Pieces community, select `Pieces: About` in step 10, which will open a tab with all our community and support links.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/getting_started/pieces_about.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n## Uninstalling\n\nTo uninstall the Pieces for Sublime Text Plugin, open your Command window in Sublime Text by using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux), locating the `Package Control: Remove Package`, looking for the option `Pieces` and clicking the option.\n\nIn order for Pieces to be completely uninstalled from the Sublime Text, you'll need to restart the IDE.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/getting_started/uninstalling_pieces_sublime_plugin.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  Restart your Sublime Text editor after uninstalling the plugin to complete to uninstallation process.\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.119Z",
    "filePath": "extensions-plugins/extensions-plugins/sublime/get-started.md"
  },
  "/docs/extensions-plugins/sublime/troubleshooting": {
    "slug": "/docs/extensions-plugins/sublime/troubleshooting",
    "metadata": {
      "title": "Troubleshooting",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Having Trouble with Pieces for Sublime Text?\n\nIf the Pieces for Sublime Text Plugin isn’t working as expected, try the following troubleshooting steps.\n\n<on-device-storage />\n\n### Ensure You Have the Latest Version(s)\n\nFirst, confirm you’re using the latest version of the <a target=\"_blank\" href=\"https://packagecontrol.io/packages/Pieces\">Pieces for Sublime Text Plugin</a> from Package Control and the latest version of [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os).\n\nThe minimum functioning version permitted is currently **1.4.3.**\n\n### Check PiecesOS Status\n\nCheck to make sure PiecesOS is running. PiecesOS must be running for the Pieces for Sublime Text Plugin to work.\n\n### Restart Sublime Text After Updates\n\nIf you’ve recently installed or updated PiecesOS or the Pieces for Sublime Text Plugin, restart the IDE.\n\nContact the <a target=\"_blank\" href=\"https://getpieces.typeform.com/to/mCjBSIjF#docs-sublime\">Pieces support team</a> if the issue still persists.\n\n### macOS-Specific Configuration\n\nMake sure that the `host` object inside the Pieces Settings file is **empty,** not set to `localhost:1000` as this creates issues with Package Control trying to load the Pieces Package, and can disable the plugin.\n\n### Reload the Plugin<a target=\"_blank\" href=\"https://docs.pieces.app/extensions-plugins/sublime#reload-the-plugin\">​</a>\n\nIf you're experiencing an issue or something isn't working properly, try reloading the plugin.\n\nTo do so, open the command palette using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows / Linux) and typing `Pieces: Reload Plugin`, then press Enter.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/troubleshooting/reload_plugin_sublime.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:58.123Z",
    "filePath": "extensions-plugins/extensions-plugins/sublime/troubleshooting.md"
  },
  "/docs/extensions-plugins/sublime": {
    "slug": "/docs/extensions-plugins/sublime",
    "metadata": {
      "title": "Sublime Text Plugin",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732292374232/664cf675-ce10-4145-a5f7-e3ddf3996008.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Pieces for Sublime Text Plugin\n\nThe <a target=\"_blank\" href=\"https://packagecontrol.io/packages/Pieces\">Pieces for Sublime Text Plugin</a> is a powerful tool that integrates directly into the Sublime Text editor. It allows users to manage saved code snippets and access [Pieces Copilot](https://docs.pieces.app/products/extensions-plugins/sublime/copilot) features.\n\n* [Pieces Copilot:](https://docs.pieces.app/products/extensions-plugins/sublime/copilot) Engage in AI-driven conversations to enhance productivity by generating code, adding comments, troubleshooting, and more—all contextualized to your project by adding files and folders as context.\n\n* [Pieces Drive](https://docs.pieces.app/products/extensions-plugins/sublime/drive): Effortlessly save, locate, and share frequently used code snippets to the Pieces Drive—making it easier to organize your work, quickly access important pieces of code, and collaborate effectively with others.\n\n<CardGroup cols={2}>\n  <Card title=\"Getting Started\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743515885562/36f40b96-ec11-4a3b-8542-4ce11bc6ff4a.webp\">\n    [Follow these instructions](https://docs.pieces.app/products/extensions-plugins/sublime/get-started) to download and install the Pieces for Sublime Text Plugin.\n  </Card>\n\n  <Card title=\"Troubleshooting\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743515892062/d99ff323-61f6-40b8-b761-08accc1484f2.webp\">\n    Explore [troubleshooting options,](https://docs.pieces.app/products/extensions-plugins/sublime/troubleshooting) navigate to our [support page,](https://docs.pieces.app/products/support) or <a target=\"_blank\" href=\"https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr\">directly book a call</a> with our engineers.\n  </Card>\n</CardGroup>\n\nThe Pieces for Sublime Text plugin offers developers **two main pillars of functionality**:\n\n1. **Pieces Copilot**: Offers [AI-assisted features](https://docs.pieces.app/products/extensions-plugins/sublime/copilot) like contextualized generative AI conversations, adding code comments, and troubleshooting code\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/sublime_text/about_current_selection.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n2. **Pieces Drive**: Enables you to [save, edit, search, and share useful code](https://docs.pieces.app/products/extensions-plugins/sublime/drive) snippets to boost your workflow productivity and streamline collaboration with others\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/sublime_text/save_to_pieces.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Using the Pieces Copilot\n\nInside your Sublime Text Editor, Pieces Copilot enables you to perform **various actions**, such as initiating a conversation directly within the editor using your preferred LLM about a specific code snippet, fragment, or folder.\n\nTo start, you can [initiate a conversation with the LLM of your choice](https://docs.pieces.app/products/extensions-plugins/sublime/copilot/chat), providing as much context as needed by adding files, folders, or even entire repositories to the conversation.\n\nTo explore available options, simply select a portion of your code, right-click, and hover over the `Pieces` item in the context menu. From here, you’ll find several quick actions, including:\n\n* `Explain`: Get detailed explanations of the code’s functionality.\n\n* `Quick Actions`: Gives 3 options to fix a bug in your code, modify the selected code, or add comments to the selection.\n\n- `Ask Copilot`: Gives you 2 options to ask the copilot about the selected code or to explain the selected code to you.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/sublime_text_plugin_assets/sublime_text/chatting_with_selection.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Using Pieces Drive\n\nUsers can save snippets by right-clicking the selected code and choosing the `Save to Pieces` option, edit saved materials with a simple command, and share snippets via generated shareable links.\n\nCommonly saved snippets include **utility functions, database queries, and API request templates**—these are frequently reused, so saving them streamlines development and keeps reusable code easily accessible.\n\nCommon materials types include utility functions, API requests, and reusable code blocks.\n\nWhen a snippet is saved, the plugin also automatically generates and associates meta data, like **tags, commit messages, code types, smart descriptions,** as well as **code authors and related resources.**\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733962137844/78f6c994-d7c7-4a50-b63d-88c83e7c8a2a.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Referencing & Reusing\n\nThere are 3 ways to [search through your saved snippets](https://docs.pieces.app/products/extensions-plugins/sublime/drive/search-reuse) in the Pieces for Sublime Text Plugin:\n\n* `Fuzzy Search`: Quickly find snippets even if your search term doesn’t match the saved text exactly. This is useful for locating snippets with slight variations in names or typos.\n\n* `Full-Text Search`: Searches through the entire content of your saved snippets. Ideal for when you remember part of the snippet but not the exact title or tags.\n\n* `Neural Code Search`: Uses AI to understand the context of your query, making it possible to find snippets even when your search term is related *conceptually* rather than *textually*. This is useful for complex searches where exact matches aren’t obvious.\n\nThese options allow you to search with vague queries or get specific when you know exactly what you’re looking for, so you can find and reuse your snippets.\n\nOnce you’ve located a snippet using one of the search methods, you can then refactor the code to your needs, share the code with other developers, or paste it directly into your code.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733962194701/f9aff393-efd8-43be-addf-b3ac37c118c8.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Download the Plugin\n\nReady to streamline your development? Download the <a target=\"_blank\" href=\"https://packagecontrol.io/packages/Pieces\">Pieces for Sublime Text Plugin</a> and follow our [installation guide to start.](https://docs.pieces.app/products/extensions-plugins/sublime/get-started)",
    "lastModified": "2025-06-04T17:24:58.002Z",
    "filePath": "extensions-plugins/extensions-plugins/sublime.md"
  },
  "/docs/extensions-plugins/untitled-pageasd/commands": {
    "slug": "/docs/extensions-plugins/untitled-pageasd/commands",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:58.139Z",
    "filePath": "extensions-plugins/extensions-plugins/untitled-pageasd/commands.md"
  },
  "/docs/extensions-plugins/untitled-pageasd/configuration": {
    "slug": "/docs/extensions-plugins/untitled-pageasd/configuration",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:58.145Z",
    "filePath": "extensions-plugins/extensions-plugins/untitled-pageasd/configuration.md"
  },
  "/docs/extensions-plugins/untitled-pageasd/get": {
    "slug": "/docs/extensions-plugins/untitled-pageasd/get",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:58.149Z",
    "filePath": "extensions-plugins/extensions-plugins/untitled-pageasd/get.md"
  },
  "/docs/extensions-plugins/untitled-pageasd/pieces-copilot/chat": {
    "slug": "/docs/extensions-plugins/untitled-pageasd/pieces-copilot/chat",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:58.164Z",
    "filePath": "extensions-plugins/extensions-plugins/untitled-pageasd/pieces-copilot/chat.md"
  },
  "/docs/extensions-plugins/untitled-pageasd/pieces-copilot/debugging-errors": {
    "slug": "/docs/extensions-plugins/untitled-pageasd/pieces-copilot/debugging-errors",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:58.171Z",
    "filePath": "extensions-plugins/extensions-plugins/untitled-pageasd/pieces-copilot/debugging-errors.md"
  },
  "/docs/extensions-plugins/untitled-pageasd/pieces-copilot/documenting-code": {
    "slug": "/docs/extensions-plugins/untitled-pageasd/pieces-copilot/documenting-code",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:58.176Z",
    "filePath": "extensions-plugins/extensions-plugins/untitled-pageasd/pieces-copilot/documenting-code.md"
  },
  "/docs/extensions-plugins/untitled-pageasd/pieces-copilot/llm-settings": {
    "slug": "/docs/extensions-plugins/untitled-pageasd/pieces-copilot/llm-settings",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:58.184Z",
    "filePath": "extensions-plugins/extensions-plugins/untitled-pageasd/pieces-copilot/llm-settings.md"
  },
  "/docs/extensions-plugins/untitled-pageasd/pieces-copilot/refactoring": {
    "slug": "/docs/extensions-plugins/untitled-pageasd/pieces-copilot/refactoring",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:58.190Z",
    "filePath": "extensions-plugins/extensions-plugins/untitled-pageasd/pieces-copilot/refactoring.md"
  },
  "/docs/extensions-plugins/untitled-pageasd/pieces-copilot": {
    "slug": "/docs/extensions-plugins/untitled-pageasd/pieces-copilot",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:58.154Z",
    "filePath": "extensions-plugins/extensions-plugins/untitled-pageasd/pieces-copilot.md"
  },
  "/docs/extensions-plugins/untitled-pageasd/pieces-drive/edit-and-update": {
    "slug": "/docs/extensions-plugins/untitled-pageasd/pieces-drive/edit-and-update",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:58.204Z",
    "filePath": "extensions-plugins/extensions-plugins/untitled-pageasd/pieces-drive/edit-and-update.md"
  },
  "/docs/extensions-plugins/untitled-pageasd/pieces-drive/saving-materials": {
    "slug": "/docs/extensions-plugins/untitled-pageasd/pieces-drive/saving-materials",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:58.211Z",
    "filePath": "extensions-plugins/extensions-plugins/untitled-pageasd/pieces-drive/saving-materials.md"
  },
  "/docs/extensions-plugins/untitled-pageasd/pieces-drive/search-and-reuse": {
    "slug": "/docs/extensions-plugins/untitled-pageasd/pieces-drive/search-and-reuse",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:58.216Z",
    "filePath": "extensions-plugins/extensions-plugins/untitled-pageasd/pieces-drive/search-and-reuse.md"
  },
  "/docs/extensions-plugins/untitled-pageasd/pieces-drive/sharing": {
    "slug": "/docs/extensions-plugins/untitled-pageasd/pieces-drive/sharing",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:58.221Z",
    "filePath": "extensions-plugins/extensions-plugins/untitled-pageasd/pieces-drive/sharing.md"
  },
  "/docs/extensions-plugins/untitled-pageasd/pieces-drive": {
    "slug": "/docs/extensions-plugins/untitled-pageasd/pieces-drive",
    "metadata": {
      "title": "Untitled Page",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "",
    "lastModified": "2025-06-04T17:24:58.194Z",
    "filePath": "extensions-plugins/extensions-plugins/untitled-pageasd/pieces-drive.md"
  },
  "/docs/extensions-plugins/untitled-pageasd/troubleshooting": {
    "slug": "/docs/extensions-plugins/untitled-pageasd/troubleshooting",
    "metadata": {
      "title": "Troubleshooting",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Troubleshooting Pieces for Neovim\n\nHere are links to support resources, documentation, and our Discord channel for troubleshooting related to the [Pieces for Neovim Extension](https://plugins.jetbrains.com/plugin/17328-pieces).\n\nYou can also find some specific troubleshooting steps for Neovim issues below.\n\n## Setting you Pieces Runtime for Neovim\n\nIf you’re getting an issue with your Python Runtime environment, you may have to edit your `init.vim`:\n\n<Steps>\n  <Step title=\"Open init.vim\">\n    Within `init.vim` above the line `plug#begin('~/.vim/plugged')` enter the line:\n\n    * `let g:python3_host_prog ='/path/to/your/python3.exe'`\n  </Step>\n</Steps>\n\n## Issues Installing PlugInstaller on Windows\n\nInstalling `PlugInstaller` on Windows can cause some issues due to differences from native terminals. To quickly install `PlugInstaller` on Windows, enter the command:\n\n```powershell\nNew-Item -ItemType Directory -Path \"$env:LOCALAPPDATA\\nvim-data\\site\\autoload\" -Force; Invoke-WebRequest \"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\" -OutFile \"$env:LOCALAPPDATA\\nvim-data\\site\\autoload\\plug.vim\"\n```\n\n## Check Neovim Providers Health\n\nA quick way to check if the Neovim provider health status is to follow the steps below:\n\n<Steps>\n  <Step title=\"Open Neovim\">\n    Open Neovim within a terminal with the command:\n\n    * `nvim`\n  </Step>\n\n  <Step title=\"Enter Checkhealth Command\">\n    To enter a commend, press the `esc` key on your keyboard and then enter:\n\n    * `:checkhealth provider`\n\n    This will check the status of your providers and will indicate which providers aren’t enabled or working.\n\n    **The only provider Pieces requires is Python.**\n  </Step>\n</Steps>\n\n## Updating[​](https://docs.pieces.app/extensions-plugins/jetbrains#updating)\n\nThe Pieces for Neovim Extension will update with a simple command within Neovim:\n\n* `:UpdateRemotePlugins`\n\nYou need to use this command within Neovim. You can do this in a simple `nvim` window and then exit.\n\n### Check PiecesOS Status\n\nYou can check PiecesOS health with:\n\n* `:PiecesHealth`\n\nYou can also check your PiecesOS version with the command:\n\n* `:PiecesOSVersion`\n\nBoth of these will return a warning if PiecesOS isn’t running properly.\n\n### Restart Neovim After Updates\n\nAfter updating PiecesOS, exit Neovim and\n\n## Reloading the Pieces Copilot Chat Window",
    "lastModified": "2025-06-04T17:24:58.226Z",
    "filePath": "extensions-plugins/extensions-plugins/untitled-pageasd/troubleshooting.md"
  },
  "/docs/extensions-plugins/visual-studio/commands": {
    "slug": "/docs/extensions-plugins/visual-studio/commands",
    "metadata": {
      "title": "Pieces for Visual Studio Extension Commands",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/commands/pieces_settings_dropshadow.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n# Commands for Pieces\n\nRead the documentation below to learn about the shortcuts and commands in the Pieces Copilot and Material Management system.\n\n## Shortcut Table\n\nShortcuts make a number of actions related to the <a target=\"_blank\" href=\"https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot\">Pieces Copilot</a> and <a target=\"_blank\" href=\"https://docs.pieces.app/products/extensions-plugins/visual-studio/drive\">Material Management ecosystem</a> accessible.\n\n***\n\n| **Command**                                                                                                                                      | **Windows/Linux** |\n| ------------------------------------------------------------------------------------------------------------------------------------------------ | ----------------- |\n| [Ask Copilot About Selection](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/chat#pieces-ask-copilot-about-selection) | `alt+m, a`        |\n| [Copy](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/search-reuse#viewing-and-reusing-saved-snippets)                  | `ctrl+c`          |\n| [Paste](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/search-reuse#viewing-and-reusing-saved-snippets)                 | `ctrl+v`          |\n| [Save Current Selection to Pieces](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/save-snippets#via-keyboard-shortcuts) | `alt+m, s`        |\n| <a target=\"_blank\" href=\"https://docs.pieces.app/products/extensions-plugins/visual-studio/drive\">Open Pieces Drive</a>                          | `alt+m, e`        |\n| [Open Pieces Copilot](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot)                                                 | `alt+m, c`        |\n| Open Pieces Account                                                                                                                              | `alt+m, p`        |\n| [Search Pieces](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/search-reuse#via-search-feature)                         | `alt+m, f`        |\n| [Share](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/sharing#via-keyboard-shortcut)                                   | `alt+m, l`        |\n\n***\n\n## Command Table\n\nYou can access these commands through the **Command Palette** using the shortcut `ctrl+shift+p`.\n\nType `Pieces >` followed by the desired command to filter and locate it from the list.\n\n***\n\n| **Pieces > Save Current Selection to Pieces**            | Saves the selected code snippet or active file to Pieces Drive.                                            |\n| -------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------- |\n| **Pieces > Save Active File to Pieces**                  | Save the active code file in the Visual Studio editor to the Pieces Drive.                                 |\n| **Pieces > Ask Copilot About Selection**                 | Launches the Pieces Copilot, allowing you to ask questions or get code insights on your current selection. |\n| **Pieces > Ask Copilot About Active File**               | Allows you to ask the Pieces Copilot about the active file open in the Visual Studio editor.               |\n| **Pieces > Explain Selection with Copilot**              | Explains the selection portion of code—its functionality, usage, and more.                                 |\n| **Pieces > Modify Selection with Copilot**               | Allows you to ask the Pieces Copilot to change a code selection with a query.                              |\n| **Pieces > Comment Selection with Copilot**              | Uses the Pieces Copilot to add helpful inline comments to your code selection.                             |\n| **Pieces > Share Current Selection**                     | Enables sharing of your selected code snippet or file.                                                     |\n| **Pieces > Search Pieces Drive**                         | Opens the Pieces Drive tab to the search bar, enabling you to search Pieces Drive quickly.                 |\n| **Pieces > Pieces Copilot**                              | Opens the Pieces Copilot side panel for contextual insights and assistance.                                |\n| **Pieces > Pieces Account**                              | Manages your Pieces account information and connection to the Pieces Cloud.                                |\n| **Pieces > Pieces Welcome Guide**                        | Opens the welcome guide for getting started with Pieces.                                                   |\n| **Pieces > Pieces Drive**                                | Launches the Pieces Drive interface to explore and manage saved materials.                                 |\n| **Pieces > Pieces for Visual Studio > User Preferences** | Accesses user settings for the Pieces for Visual Studio Extension.                                         |\n\n***",
    "lastModified": "2025-06-04T17:24:58.342Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio/commands.md"
  },
  "/docs/extensions-plugins/visual-studio/configuration": {
    "slug": "/docs/extensions-plugins/visual-studio/configuration",
    "metadata": {
      "title": "Configuration",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n# Configuring PiecesOS\n\nRead the documentation below on configuring PiecesOS with the Pieces for Visual Studio Extension to customize it to your exact needs.\n\n## Supported LLMs\n\nWe continuously update and optimize our plugins and extensions to [ensure compatibility with the latest LLMs](https://docs.pieces.app/products/large-language-models).\n\n[Read the documentation to learn how to switch your Pieces Copilot Runtime (LLM)](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/llm-settings) used by the Pieces for Visual Studio Extension directly within your IDE.\n\n## Opening Pieces Settings\n\nTo open the Pieces Settings in the **Pieces for Visual Studio Extension**, follow these steps:\n\n<Steps>\n  <Step title=\"Open the Views Dropdown\">\n    In the top left of the window, hover over `Views`, then hover over `Other Windows`, and lastly hover over `Pieces`.\n  </Step>\n\n  <Step title=\"Open and Adjust Settings\">\n    Select `Pieces Settings` view option. A new window will open in your solutions explorer for your Pieces settings.\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/configuration/pieces_new_settings.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Overriding Commands in Visual Studio\n\nTo modify the keyboard shortcuts for Pieces functionality in Visual Studio, such as <a target=\"_blank\" href=\"https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/save-snippets\">saving a snippet</a> or [launching the Copilot](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/chat#accessing-copilot-chat-in-vs-code), follow these steps:\n\n<Steps>\n  <Step title=\"Open the Options Menu\">\n    Navigate to `Tools > Options` from the top toolbar in Visual Studio\n  </Step>\n\n  <Step title=\"Access Keyboard Settings\">\n    In the **Options** window, expand the `Environment` section and select `Keyboard`\n  </Step>\n\n  <Step title=\"Search for a Pieces Command\">\n    Use the search bar to find the Pieces command you want to modify, such as `Pieces.SaveToPieces`\n  </Step>\n\n  <Step title=\"Assign a New Shortcut\">\n    Select the command from the list and enter your preferred shortcut in the `Press shortcut keys` field\n  </Step>\n\n  <Step title=\"Save Your Shortcut\">\n    Ensure your new shortcut doesn’t conflict with existing Visual Studio commands, then click `Assign` to save your changes\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/commands/pieces_keybinds_visual_studio.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nThis process enables you to customize keyboard shortcuts to fit your workflow seamlessly.\n\n## Settings Overview\n\nYou can configure several settings related to the Pieces for Visual Studio Extension, which directly affect the usability of some features. You can also enable or disable various preferences.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/configuration/general_view.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Account & Cloud Integrations\n\n* **Account Name:** Displays your chosen display name in the Pieces extension for Visual Studio.\n\n* **Account Email:** Displays the email address linked to your Pieces account.\n\n* **Early Access Program:** Indicates whether you are enrolled in the beta program.\n\n### Personal Cloud\n\n* **Status:** Shows whether your cloud is connected or disconnected and when it was last updated.\n\n* **Personal Domain:** Displays your custom subdomain (for example, `<your-domain>.`[`pieces.cloud`](http://pieces.cloud)).\n\n* **Backup & Restore Data:** Provides a button to back up or restore your cloud data.\n\n### Saved Material Auto-Enrichment\n\n* **Auto-Generated Context:** A dropdown menu allows users to select the level of context auto-enrichment (None, Low, Medium, High).\n\n### ML Processing\n\n* **Processing Mode:** You can choose between Local, Cloud, or Blended processing.\n\n* **Long-Term Memory Engine:** Toggles the memory engine on or off and shows its current version.\n\n* **Long-Term Memory Source Control:** Provides a button to manage which data sources feed into long-term memory.\n\n* **Clear Long-Term Memory Engine Data…:** Provides a button to purge persisted memory for a specified date range.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/configuration/ml_blended.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Model Context Protocol (MCP)\n\n* **Server URLs:** Provides a text field where you can list all of your MCP endpoint URLs.\n\n* **View Documentation:** Links to the official MCP usage documentation.\n\n### CodeLenses\n\n* **Enable Pieces Code-Lens:** Toggles the code-lens features on or off in the editor.\n\n* **Use Same Conversation For Code-Lens:** Shares a single Copilot conversation across all code-lens actions.\n\n### Code Block Actions\n\n* **Use Integrated Terminal:** Ensures that “Run In Terminal” uses Visual Studio’s integrated terminal instead of opening an external one.\n\n### Saved Materials\n\n* **Close Snippet Editor on Save:** Automatically closes the snippet editor when you save a snippet.\n\n* **Enable Automatic Link Copy:** Automatically copies the snippet’s shareable link to your clipboard upon saving.\n\n### PiecesOS Configs\n\n* **Launch on Startup:** Automatically starts the PiecesOS background service when Visual Studio launches.\n\n* **Auto Launch on Interaction:** Automatically starts PiecesOS the first time you interact with the extension.\n\n### Autocomplete\n\n* **Enable AutoComplete:** Suggests your saved snippets inline as you type code.\n\n### Git Integration\n\n* **Pieces › Save › Git: Related Links:** Attaches related commit links from your Git history when you save a snippet.\n\n* **Pieces › Save › Git: Related People:** Attaches commit author information from your Git history when saving a snippet.\n\n* **Pieces › Save › Git: Description:** Uses commit messages from your Git history as the default description for the snippet.\n\n### Notifications\n\n* **Show Update Extension Notification:** Prompts you at startup if a newer version of the extension is available.\n\n### Onboarding\n\n* **Reset Onboarding:** Resets the onboarding tutorial to run on the next launch.\n\n* **Launch Onboarding:** Reopens the onboarding tutorial at any time.\n\n### Telemetry & Analytics\n\n* **Telemetry & Diagnostics:** Shares anonymous usage and crash data to help improve the extension.\n\n* **Share Error Analytics:** Shares detailed error reports to help diagnose and fix issues.\n\n* **Share Usage Analytics:** Shares anonymized feature-usage metrics to guide future development.\n\n### Support\n\n* **Documentation:** Provides a link to the online Pieces documentation.\n\n* **Submit Feedback/Issues:** Provides a link to the feedback or issue tracker for reporting bugs and requesting features.\n\n## PiecesOS Information\n\n* **PiecesOS Version:** Displays the current version number of the PiecesOS service.\n\n* **Check for PiecesOS Updates:** Provides a button to check for and install PiecesOS updates manually.\n\n* **PiecesOS Port:** Displays the network port on which PiecesOS is listening.\n\n## Settings Applet\n\n* **Version:** Displays the current version number of the Settings Applet.\n\n***\n\nFor additional support resources, check out our [troubleshooting guide.](https://docs.pieces.app/products/extensions-plugins/visual-studio/troubleshooting)\n\n***",
    "lastModified": "2025-06-04T17:24:58.348Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio/configuration.md"
  },
  "/docs/extensions-plugins/visual-studio/copilot/chat": {
    "slug": "/docs/extensions-plugins/visual-studio/copilot/chat",
    "metadata": {
      "title": "Generative AI Conversations",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Accessing Copilot Chat in Visual Studio\n\nThere are four primary ways to access generative AI conversations with the Pieces Copilot.\n\nIf the Pieces Copilot window isn't open, you can open it using the methods below, or by opening the command palette with `ctrl+shift+p`, searching for `Pieces Copilot`, and selecting it or pressing enter, or by using the keybind `alt+m,c`.\n\n### via Right-Click Menu\n\n<Steps>\n  <Step title=\"Highlight Code and Right-Click\">\n    Highlight any code segment and right-click to open the tool menu.\n  </Step>\n\n  <Step title=\"Choose &#x22;Ask Copilot&#x22;\">\n    Choose an option from the list that best fits your use case:\n\n    * `Ask Copilot About Selection`\n\n    * `Ask Copilot About Active File`\n\n    * `Add Active File to Copilot Context`\n\n    * `Explain Selection with Copilot`\n  </Step>\n\n  <Step title=\"Enter Question\">\n    A new menu will appear, prompting you to enter your question. Type your query and press `Enter`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/ask_about_file.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### via Keyboard Shortcuts\n\nYou can also open up a dialogue with the Pieces Copilot chat—specifically the `Ask Copilot` option—by using the shortcut `alt+m` and then pressing `a`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/asking_question_input_modal_for_asking_about_selection.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Command Palette\n\nOpen the command palette with `ctrl+shift+p`, and enter commands, such as:\n\n`Pieces > Ask Copilot about Selection`: Generates suggestions or improvements for the selected code snippet.\n\n`Pieces > Ask Copilot About Active File`: Provides insights for the current file open in your Visual Studio editor.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/command_pallette.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nRead more about [what commands are available in the Pieces for Visual Studio Extension](https://docs.pieces.app/products/extensions-plugins/visual-studio/commands).\n\n### via AI Quick Actions\n\nOne quick way to get an explanation for a confusing or unclear function is by using the new [AI Quick Actions](https://docs.pieces.app/products/extensions-plugins/visual-studio#using-ai-quick-actions) feature in the Pieces for Visual Studio Extension.\n\nClick the `Pieces` tool above a code function, then select `Explain`. This will start a conversation about the selected function.\n\nYou can also right-click a selected portion of code, hover over `Pieces`, and select `Explain Selection with Copilot`.\n\nThis action triggers the Copilot Chat window, which provides a detailed explanation and summary of the code's logic.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/pieces_explain_quick_action.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThere is also `Pieces > Comment`, which you can read more about [here](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/documenting-code).\n\n## Contextualized Chats\n\nYou can use two levels of contextual awareness in Visual Studio to start a conversation or add code to an existing Copilot Chat with the Pieces Copilot.\n\n### Pieces > Ask Copilot About Selection\n\nUse the `Pieces > Ask Copilot About Selection` button to interact with Copilot about specific code snippets, functions, or classes.\n\nTo use this feature:\n\n<Steps>\n  <Step title=\"Select a Portion/Piece of Code\">\n    Select a portion of code or select a class in the solution explorer.\n  </Step>\n\n  <Step title=\"Right-Click\">\n    Open the tool menu by right-clicking your selection.\n  </Step>\n\n  <Step title=\"Locate “Ask Copilot About Selection”\">\n    Locate the `Pieces` tool menu section, hover over it, and select `Ask Copilot About Selection`.\n  </Step>\n\n  <Step title=\"Ask your Question\">\n    Type your prompt in the text input field and press `enter`.\n  </Step>\n</Steps>\n\nThis approach is perfect for **quick insights** or **guidance** on specific code functionality.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/asking_question_input_modal_for_asking_about_selection.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Pieces > Ask Copilot About Active File\n\nThe `Pieces > Ask About Active File` feature targets the current file, providing specific insights and help with debugging.\n\nThere are two ways to access this command:\n\n1. Right-click inside your file, hover over `Pieces`, and select the `Ask Copilot about Active File`. Then enter your query into the drop-down text input field.\n\n2. Open the command palette using `ctrl+shift+p` and enter `Pieces > Ask Copilot About Active File`. Then enter your query into the drop-down text input field.\n\n<Callout type=\"tip\">\n  You can also use the default keybind to ask Pieces Copilot about the active file by pressing `alt+m,a`\n</Callout>\n\nAfter you enter your question, Pieces Copilot will analyze the file's context to provide precise responses that you can accept and insert at the cursor, directly placing them into your code environment.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/ask_about_file.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis feature helps you understand file dependencies, methods, and structure. It also detects potential issues, suggests improvements, and more.\n\n<Callout type=\"tip\">\n  The `Pieces > Ask About Active File` feature can also be applied during onboarding purposes to get helpful explanations for unfamiliar code.\n</Callout>\n\n## Adding Context to Copilot Chats\n\nYou can add context to a chat by adding `Files`**,** `Folders`**,** `Snippets`**,** `Websites`**,** and `Messages`**.**\n\nThis flexibility is especially useful when reference materials are not directly accessible from Visual Studio or when you want to compartmentalize context, minimizing overlap by keeping files or folders from other projects separate from your active workflow.\n\nTo do this, you can select the **Starred Message Icon** in the bottom-left corner of your Copilot Chat window, which you can open from the Visual Studio sidebar.\\`\n\nClick the **Starred Message Icon**, then add whatever context items you need.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/adding_context.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Adding Code Snippets\n\nYou can insert code snippets as a code block in any Copilot Chat by clicking the `{ }` icon in the chat window and pasting your code.\n\nThis feature is particularly helpful for referencing code that isn't in the active file, making comparisons, and receiving tailored suggestions.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/snippet_in_chat.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Extracting Code from Screenshots\n\nYou can extract code directly from screenshots through the Copilot Chat menu. Select `Extract Code from Screenshot`, choose the desired screenshot from your File Explorer, and confirm.\n\nPieces Copilot will scan the screenshot, generate the code from the image, and display it in the chat. You can copy the code, insert it at your cursor, save it as a snippet, and more.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/extracting_code.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Adding Folders from File Explorer\n\nTo add folders to your Copilot Chat context, click the **Starred Message Icon** in the bottom-left corner of the Copilot Chat window, accessible from the Visual Studio sidebar.\n\nYou can then choose which type of context you’d like to add, but in our case, we’ll choose a `folder`.\n\nThis will open a new prompt to guide you through adding folders to the context.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/chat/add_folder_to_context.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Improving Code Consistency & Standardization\n\nThe Pieces Copilot helps improve code quality by identifying inconsistencies and providing actionable suggestions for standardization.\n\n### Naming Inconsistencies\n\nSuppose functions across your workspace use inconsistent naming patterns (e.g., `authenticateUser` in `authHandler.go` vs. `retrieveUserProfile` in `userHandler.go`). In that case, can suggest adopting a standardized naming convention for better readability and maintainability, like this:\n\n```go\n// authHandler.go\nfunc authenticateUser(ctx context.Context, credentials Credentials) (User, error) {\n    if credentials.Username == \"\" || credentials.Password == \"\" {\n        return User{}, errors.New(\"missing credentials\")\n    }\n}\n```\n\n### Inconsistent Error Handling\n\nIf error-handling strategies vary across files (e.g., structured errors in `authService.go` vs. inconsistent handling in `userService.go`), Pieces Copilot can standardize the approach. For example:\n\n```go\n// authService.go\nfunc LoginUser(credentials Credentials) (string, error) {\n    token, err := authenticate(credentials)\n    if err != nil {\n        return \"\", fmt.Errorf(\"login failed: %w\", err)\n    }\n    return token, nil\n}\n```",
    "lastModified": "2025-06-04T17:24:58.363Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio/copilot/chat.md"
  },
  "/docs/extensions-plugins/visual-studio/copilot/documenting-code": {
    "slug": "/docs/extensions-plugins/visual-studio/copilot/documenting-code",
    "metadata": {
      "title": "Code Comments",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Commenting Code Selections with Pieces Copilot\n\nPieces Copilot **analyzes** and **comments on selected code**, generating precise, line-by-line explanations. This enhances readability and makes your code easier to understand.\n\n### via Pieces > Comment\n\nA quick way to add documentation to a function is by using the [AI Quick Actions](https://docs.pieces.app/products/extensions-plugins/visual-studio#using-ai-quick-actions) feature, visible above actionable tasks in your code. This feature allows you to generate comments to explain the logic and purpose of your functions directly within your editor.\n\nTo get started:\n\n<Steps>\n  <Step title=\"Locate the Pieces Quick Actions\">\n    Look for the `Pieces` button above individual functions in your code.\n  </Step>\n\n  <Step title=\"Open the Pieces Menu\">\n    Click the Pieces `Quick Action` button to open the available options.\n  </Step>\n\n  <Step title=\"Select the Comment Option\">\n    Choose `Comment` from the menu to let the Copilot generate meaningful documentation for the function.\n  </Step>\n\n  <Step title=\"Accept Changes\">\n    Review the generated comments and click `Accept Changes` to insert them into your code.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/documenting_code/adding_comments_quick_action.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nYou can also right-click a selected portion of code, hover over `Pieces`, and choose `Comment Selection with Copilot`. Pieces Copilot will suggest changes that contain comments on new sections.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/documenting_code/hover_over_comment.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Why Use Code Comments?\n\nCode comments are essential for maintaining a clean and well-documented codebase. They **provide context for reviewers**, allowing them to focus on functionality and **understand complex reasoning**, making the code easier to follow and maintain.\n\nGood documentation improves code readability and accelerates onboarding for people unfamiliar with the codebase. This dual benefit supports **current and** **future development** by creating a strong **foundation for upgrades and iterations**.\n\nComments also serve as a memory aid, helping you remember the purpose and function of the code when revisiting it after a long time away.\n\nThat’s what makes the Pieces Copilot’s commenting feature so powerful. Whether you’re documenting a single function or hundreds of lines of code, simply highlight the desired code, click the `Pieces` CodeLens button, select **Comment**, and let Copilot take care of the rest.",
    "lastModified": "2025-06-04T17:24:58.370Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio/copilot/documenting-code.md"
  },
  "/docs/extensions-plugins/visual-studio/copilot/llm-settings": {
    "slug": "/docs/extensions-plugins/visual-studio/copilot/llm-settings",
    "metadata": {
      "title": "Switching LLMs",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Switching LLMs\n\nCurrently, the Pieces for Visual Studio Extension supports over 54 cloud and local models, [which you can find here.](https://docs.pieces.app/products/large-language-models)\n\n## How To Configure Your LLM Runtime\n\nSwitching your LLM model in the Pieces for Visual Studio Extension is simple. You can select the model that best suits your needs.\n\nHow to change your LLM:\n\n<Steps>\n  <Step title=\"Open the Copilot Chat View\">\n    Open the Copilot Chat view by clicking the `Pieces Copilot Icon` in the sidebar.\n  </Step>\n\n  <Step title=\"Locate the Active Model\">\n    Locate the **Active Model** in the bottom-left corner of the view where the current model (e.g., *GPT-4o Mini*) is displayed.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/llm_settings/changing_active_model.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n\n  <Step title=\"View the Models\">\n    Click on `Change Model` to open the **Manage Copilot Runtime** modal.\n  </Step>\n\n  <Step title=\"Choose your Desired Model\">\n    Browse the list of local and cloud models, and select your preferred model.\n  </Step>\n</Steps>\n\nYou can also use Ollama as your LLM runtime, which you can [read more about here](https://docs.pieces.app/products/core-dependencies/ollama).\n\nFrom here, you can browse and select from various available models, such as the local and cloud-based models listed [in the table at the top of this page.](https://docs.pieces.app/products/extensions-plugins/visual-studio/configuration#supported-llms)\n\nOnce you’ve chosen a new model, the switch is instant, allowing you to continue your work seamlessly with the selected model's capabilities—*no need to restart or refresh anything.*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/llm_settings/showing_llms.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\nCloud-hosted models offer access to the latest AI capabilities, while on-device models ensure offline functionality, making Pieces Copilot adaptable to your specific workflow and environment.\n\n***",
    "lastModified": "2025-06-04T17:24:58.375Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio/copilot/llm-settings.md"
  },
  "/docs/extensions-plugins/visual-studio/copilot/refactoring": {
    "slug": "/docs/extensions-plugins/visual-studio/copilot/refactoring",
    "metadata": {
      "title": "Refactoring Code",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Modifying your Code with Pieces Copilot\n\nModify your code to change error handling, rename functions, and add functionality in one way.\n\n### via Right-Click Menu\n\nRight-click the highlighted code you want to modify, hover over `Pieces`, and click `Modify Selection with Copilot`.\n\nOnce you click `Modify Selection with Copilot`, Pieces Copilot opens the Chat window in the Visual Studio sidebar, showing the proposed changes.\n\nReview the modifications and decide whether to `Accept` them or use the `Insert at Cursor` option to place the suggestion where your cursor is. The updates will automatically be added to your codebase at the selected point, right at your cursor.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/refactoring/modify_code_right_click.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis method provides a quick and efficient way to refactor and improve your code without disrupting your workflow.\n\n<Callout type=\"tip\">\n  You can use `Modify Selection with Copilot` to add detailed logging to essential functions for better debugging and to break down long methods into smaller, more modular functions.\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.381Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio/copilot/refactoring.md"
  },
  "/docs/extensions-plugins/visual-studio/copilot": {
    "slug": "/docs/extensions-plugins/visual-studio/copilot",
    "metadata": {
      "title": "Pieces Copilot",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Generative AI Conversations\n\nFacing an issue or not sure how to tackle a coding challenge? You can [ask the Pieces Copilot specific coding questions](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/chat) directly in Visual Studio using Pieces Copilot in the `Solution Explorer`.\n\nYou can ask any question that doesn’t require context, such as *“What is the basic format for a JSON object?”,* or more in-depth questions where the Pieces Copilot needs context from your active code.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/pieces_copilot_main/copilot_chat_in_active_code_file.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Adding Conversation Context\n\nContextual awareness enables the Pieces Copilot to help you solve problems more quickly by providing answers that are relevant to the issue you're dealing with and your code.\n\nYou can add context by selecting specific lines of code or entire files directly from your active file.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/pieces_copilot_main/hovering_on_ask_copilot_about_selection_command_right_click_menu.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nStart by right-clicking some selected code and selecting one of the following options from the tool menu:\n\n* `Ask Copilot About Selection`: Includes the active selected code in the conversation.\n\n* `Ask Copilot About Active File`: Includes the entire active file with the conversation for a broader range of context.\n\nTo use this feature, include details like error messages or [file context](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/chat#adding-context-to-copilot-chats) for more accurate responses from the LLM conversation.\n\nYou can also add multiple files and other items as context to your prompt, giving the Pieces Copilot comprehensive information to assist you in troubleshooting.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/pieces_copilot_main/adding_context_to_chat.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Pieces Copilot Tools\n\nExplore the powerful AI tools and features in the Pieces for Visual Studio Extension.\n\n### Documenting Code\n\nEasily generate insightful code comments with the Pieces for Visual Studio Extension. Pieces Copilot understands your code’s structure and function, [creating clear and useful comments to improve readability and simplify maintenance](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/documenting-code#commenting-code-selections-with-pieces-copilot).\n\nTo add documentation and comments to your code, select the code snippet, right-click, hover over `Pieces`, and click `Comment Selection with Copilot`.\n\nThis opens Pieces Copilot in the Visual Studio sidebar, adding documentation to the highlighted snippet. You can then select one of the `Insert at Cursor` or `Accept Changes` options to add the comments to your code.\n\nYou can also click `Pieces > Comment`, an AI Quick Action that lives above accessible functions within your code.\n\n<Callout type=\"info\">\n  Use this feature to maintain consistency in documentation and simplify handoffs for collaborative projects.\n</Callout>\n\n### Generate & Update Code\n\nWith the Pieces for Visual Studio extension, you can easily change code to adapt to new requirements or insert quick fixes with two powerful Pieces Copilot commands:\n\n* `Modify Selection with Copilot`: [Edit or transform the selected code snippet](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/refactoring#modifying-your-code-with-pieces-copilot) to improve readability, optimize performance, or adapt it for specific needs.\n\n* `Explain Selection with Copilot`: [Get a clear explanation of what the selected code does](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/chat#accessing-pieces-copilot-in-vs-code), making it easier to understand and document.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/pieces_copilot_main/saving_snippet_keybind.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Selecting Your Pieces Copilot Runtime\n\nChoose between [different LLMs directly within Visual Studio](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/llm-settings) by accessing the sidebar and selecting your preferred model by clicking the currently utilized LLM under `Active Model`.\n\nOptions include lightweight models for simple queries, advanced models for in-depth analysis, and **local** and **cloud-based LLMs.**\n\nThis flexibility lets you customize Pieces Copilot to fit your development needs, focusing on either speed or accuracy.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/pieces_copilot/pieces_copilot_main/selecting_LLM_runtime.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nRead more about [what LLMs are available ](https://docs.pieces.app/products/extensions-plugins/visual-studio/configuration#supported-llms)within the Pieces for Visual Studio Extension.\n\n## Pieces Copilot As a Daily Driver\n\nThe Pieces Copilot is a powerful, adaptable tool that grows with you as you use it—*so use it!*\n\n***\n\n<AccordionGroup>\n  <Accordion title=\"Collaborative Coding Made Easy\">\n    Generate detailed comments and documentation to improve team collaboration and reduce onboarding times, ensuring a consistent team coding style.\n  </Accordion>\n\n  <Accordion title=\"Troubleshoot and Resolve Bugs Swiftly\">\n    Use the Pieces Copilot in Visual Studio to speed up bug fixing. Its contextual understanding and suggested solutions make troubleshooting quicker, keeping your project on track.\n  </Accordion>\n\n  <Accordion title=\"Quick Prototyping\">\n    Generate initial implementations and boilerplate code for prototypes and fast-paced projects. Perfect for hackathons, PoCs, and other time-sensitive tasks.\n  </Accordion>\n\n  <Accordion title=\"Skill Enhancement\">\n    Pieces Copilot is also a learning tool. It helps you discover best practices, new paradigms, and advanced techniques in real-time.\n  </Accordion>\n\n  <Accordion title=\"Efficient Code Refactoring\">\n    Optimize your codebase with innovative refactoring suggestions. Pieces Copilot analyzes your code patterns, recommends structural improvements, and provides optimizations for better performance and readability.\n  </Accordion>\n</AccordionGroup>\n\n***\n\n<a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio\">Download the Pieces for Visual Studio Extension today!</a>",
    "lastModified": "2025-06-04T17:24:58.353Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio/copilot.md"
  },
  "/docs/extensions-plugins/visual-studio/drive/edit-update": {
    "slug": "/docs/extensions-plugins/visual-studio/drive/edit-update",
    "metadata": {
      "title": "Editing",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## How to Edit Snippets\n\nTo modify code you’ve saved to your personal repository, you can use the Pieces Drive view in Visual Studio.\n\nIf you don’t have it open, use the command palette shortcut `ctrl+shift+p` and type Pieces Drive, then click it or press `enter` to open the view.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/edit_update/opening_pieces_drive_via_command_palette.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Steps>\n  <Step title=\"Locating a Snippet\">\n    Inside the Pieces Drive view, you can select the snippet you want to edit from the scrollable list of saved materials, or use the **Search Bar** to enter a query and locate your desired snippet.\n  </Step>\n\n  <Step title=\"Open the Snippet\">\n    To start editing the material saved from your repository, click the **Pencil Icon**. Hovering over this icon reveals an `Edit Selected Material` + `ctrl+e` tooltip.\n  </Step>\n\n  <Step title=\"Edit the Snippet\">\n    Once you click the **Pencil Icon,** your saved code will open in a new tab and automatically be redirected to that tab. Make your changes as needed.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/edit_update/edit_and_insert_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n\n  <Step title=\"Save the Snippet\">\n    After making the desired changes to the code snippet, use `ctrl+s` to save the snippet, after which you will be returned to your active file.\n\n    You’ll see a success message at the top of the active file indicating your changes have been made successfully.\n  </Step>\n</Steps>\n\n### Material Management Actions\n\nFrom within the Pieces Drive view, you can click the **three vertical dots** to review a `Quick Actions` tab that shows available metadata that you can view or directly adjust for that snippet.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/edit_update/editing_snippet_metadata.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can view the table below for a comprehensive list of available actions.\n\n***\n\n| `Reclassify`            | Set your custom snippet classification.                                                                                                 |\n| ----------------------- | --------------------------------------------------------------------------------------------------------------------------------------- |\n| `Rename`                | Change the name (title) of the material as it appears in your Pieces Drive.                                                             |\n| `Duplicate`             | Create a duplicate of the saved material—unmodified or modified to be more performant, readable, as a template, or in another language. |\n| `Related Links`         | View, add, or remove related resources that provide additional context to the snippet.                                                  |\n| `Tags`                  | Add or remove tags to the snippet’s metadata.                                                                                           |\n| `Shareable Link`        | Generate or copy a shareable link for the saved material.                                                                               |\n| `Annotations`           | View or edit the automatically generated description for that saved code.                                                               |\n| `Anchors`               | Add associated files and directories to the material.                                                                                   |\n| `Related People`        | Manage related code authors or coworkers.                                                                                               |\n| `Sensitive Information` | Manually add or remove a sensitive information tag to the snippet, if not automatically generated.                                      |\n| `Delete Piece`          | Remove this saved material from Pieces Drive.                                                                                           |\n\n***\n\n## Additional Tools while Editing\n\nWhen you edit a saved snippet, you are opening a new file in Visual Studio to make those edits, which means that other Pieces functionalities, like functionalities provided by Pieces Copilot and Pieces Drive, are entirely available to you.\n\nFor example, when editing a snippet, right-clicking selected code will present you with the same toolbar and Pieces-related options (like `Save Current Selection to Pieces` or `Share Current Selection`).\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/edit_update/showing_actions_in_edit_view.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis makes it easy to modify your saved code with the power that the Pieces for Visual Studio Extension gives you.",
    "lastModified": "2025-06-04T17:24:58.395Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio/drive/edit-update.md"
  },
  "/docs/extensions-plugins/visual-studio/drive/save-snippets": {
    "slug": "/docs/extensions-plugins/visual-studio/drive/save-snippets",
    "metadata": {
      "title": "Saving",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Saving Materials\n\nSave code to Pieces Drive with the Pieces for Visual Studio Extension by using the right-click menu or hotkeys.\n\nUse this feature to save all kinds of useful code materials, such as:\n\n* API endpoint definitions\n\n* Utility functions or commonly used helper methods\n\n* Code templates for starting new modules\n\n* Reusable logic for error handling or authentication\n\nSuppose the Pieces Copilot window isn't open. In that case, you can open it using the methods below, or by opening the command palette with `ctrl+shift+p`, searching for `Pieces Drive`, and selecting it, or pressing enter, or by using the keybind `alt+m,e`.\n\n### via Right-Click Menu\n\n<Steps>\n  <Step title=\"Highlight Selection\">\n    Select the portion of code you’d like to save.\n  </Step>\n\n  <Step title=\"Right-Click\">\n    Right-click on the highlighted section and hover over the `Pieces` option.\n  </Step>\n\n  <Step title=\"Select Save to Pieces\">\n    Choose the `Save to Pieces` option to save the selection to Pieces Drive.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/material_management_redo.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### via Keyboard Shortcuts\n\nIf you prefer not to use your cursor, you can quickly save your selected code with keyboard shortcuts.\n\nTo do this:\n\n<Steps>\n  <Step title=\"Highlight Selection\">\n    Select the portion of code you’d like to save\n  </Step>\n\n  <Step title=\"Use Shortcut\">\n    Use the `alt+m, s` shortcut to save the selection to Pieces Drive\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/saving_snippets/saving_snippet_keybind.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### via Copilot Chat\n\nYou can save any code block from your Copilot Chat by clicking Pieces > `Save to Pieces`. This includes code generated by Pieces Copilot, code blocks you've added as context but haven't saved as individual snippets, and any other code.\n\nJust click the `Save to Pieces` button on any code block in the Copilot Chat view.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/saving_snippets/hoverig_over_pieces_save_copilot.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Saving Active Files to Pieces\n\nIf you want to save a *big snippet, save* your entire file directly to Pieces.\n\nTo save your active file:\n\n<Steps>\n  <Step title=\"Right-Click\">\n    Right-click within your active file.\n  </Step>\n\n  <Step title=\"Locate the Pieces Section\">\n    Hover over the `Pieces` item in the right-click options.\n  </Step>\n\n  <Step title=\"Save Active File to Pieces\">\n    Click `Save Active File to Pieces`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/save_active_file_to_pieces.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nThere are plenty of scenarios in which saving an entire file to your Pieces Drive is ideal, such as to:\n\n* **Preserve Complex Codebases**: Save large, complete files like utility libraries, configuration files, or classes to keep all related functionality together.\n\n* **Reuse in Future Projects**: Use full files in new projects without rebuilding smaller parts.\n\n* **Keep Independent Files Versioned**: Store standalone files, like scripts or tools, as separate backups or versions outside source control.\n\n## What’s Stored When You Save a Snippet\n\nWhen you save a snippet to your Pieces Drive, more than just the code is stored.\n\nThe Pieces Copilot captures:\n\n* `Type`: Categorizes the snippet (e.g., API call, function, class) with its code language.\n\n* `Associated Tags`: Keywords related to the snippet for easier searching.\n\n* `Custom Description`**:** Specifies precisely which *lines* (in numerical form) the snippet is from and the file from which it originated—very useful for mind-mapping.\n\n* `Smart Description`: AI-generated descriptions that summarize the snippet’s purpose and function.\n\n* `Suggested Searches`: Related searches that help you discover similar snippets.\n\n* `Related Links`: References to documentation, code repositories, or other relevant resources.\n\n* `Related People`: Associated collaborators or contributors.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/opened_markdown_snippet.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nAdditionally, the Pieces Copilot **checks saved snippets for sensitive information**, such as API keys, passwords, or authentication tokens, to ensure no confidential data is stored by mistake.\n\n## Where Saved Snippets Live\n\nSaved snippets are stored locally on your device, ensuring offline accessibility. This also means that any Pieces for Developers extension, plugin, or even the Pieces Desktop App, has constant, up-to-date access to your saved materials.\n\nYou can find your saved snippets in the `Pieces Drive` menu.\n\n[Read more about how to find your saved snippets here.](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/search-reuse#finding-saved-snippets)",
    "lastModified": "2025-06-04T17:24:58.402Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio/drive/save-snippets.md"
  },
  "/docs/extensions-plugins/visual-studio/drive/search-reuse": {
    "slug": "/docs/extensions-plugins/visual-studio/drive/search-reuse",
    "metadata": {
      "title": "Searching Pieces Drive",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Finding Saved Snippets\n\nIn Visual Studio, you can locate your snippets in two main ways.\n\n### via Pieces Sidebar\n\nTo locate your snippets, use the Pieces Sidebar menu or the search feature:\n\n<Steps>\n  <Step title=\"Open the Pieces Drive\">\n    There are three main ways to search your Pieces Drive via the Pieces Sidebar\n\n    **via Right-Click Menu**\n\n    Right-click in your editor window, hover over `Pieces`, and select `Search Pieces Drive`.\n\n    **via Keyboard Shortcut**\n\n    1. You can quickly open the search bar menu by pressing `alt+m`, letting go, and then quickly pressing the `f` key.\n\n    Once you’ve opened the search bar, you can enter your search query to search for a specific snippet.\n  </Step>\n\n  <Step title=\"Open a Snippet\">\n    Click on the snippet to see its content, metadata, and quick actions.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/saving_snippets/opening_snippet_markdown.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### via Search Feature\n\nIf you know exactly what you’re looking for, you can search for specific snippets:\n\n<Steps>\n  <Step title=\"Click the Search Bar\">\n    Open the search bar at the top of the Pieces Drive Sidebar.\n  </Step>\n\n  <Step title=\"Enter Your Search Query\">\n    Type your search query into the search box.\n  </Step>\n\n  <Step title=\"Navigate the Results\">\n    Scroll through the results or use the arrow keys to select your desired snippet.\n  </Step>\n\n  <Step title=\"Open the Snippet\">\n    Click on the snippet to open it and view its content, metadata, and quick actions.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/saving_snippets/searching_snippets.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n<Callout type=\"tip\">\n  Search using tags, descriptions, names, types, or languages to narrow your results.\n</Callout>\n\n## Adding Filters to Your Search\n\nTo refine your search results, you can sort and filter saved snippets in the Pieces Drive Sidebar.\n\n### Filtering Snippets\n\n<Steps>\n  <Step title=\"Click on the Search Bar\">\n    Click the search bar at the top of the Pieces Drive Sidebar.\n  </Step>\n\n  <Step title=\"Use Quick Filters\">\n    Apply quick filters like `Titles`, `Annotations`, or `Content` that show up below the search bar.\n  </Step>\n\n  <Step title=\"Filter by Tags or Keywords\">\n    Enter specific tags or keywords in the search bar to narrow down the snippets shown.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/saving_snippets/filtering_snippets.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### Sorting Snippets\n\n<Steps>\n  <Step title=\"Click the Sorting Icon\">\n    Click the icon at the top of the Pieces Drive sidebar (like the clock icon for recent). The icon changes depending on the sorting method you choose.\n  </Step>\n\n  <Step title=\"Choose Sorting Order\">\n    Choose your sorting order: `Recent`, `Suggested`, `Alphabetical`, or `Language`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/saving_snippets/sorting_snippets.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## Viewing and Reusing Saved Snippets\n\n[Saved snippets](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/save-snippets) can be viewed with their metadata by opening them directly from the Pieces Sidebar. Just click on them once you find them.\n\nFrom this view, use Quick Actions to copy the snippet or insert it at your cursor in the editor. Click `Open Markdown Preview` to **see the snippet in markdown preview mode,** or click on the snippet for a quick overview.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/opened_markdown_snippet.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nFrom this view, you can highlight and right-click to copy, or use `ctrl+c` to copy to your clipboard.\n\n### via Pieces Sidebar\n\nIn the Pieces Drive sidebar, you can insert a snippet into your note by clicking the `Insert at Cursor` button.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/saving_snippets/inserting_snippet_via_drive.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can right-click a snippet and select `Copy to Clipboard` to paste it wherever you need.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/search_resuse/hovering_over_copy_to_clipboard.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Previewing Saved Snippets\n\nWhen using the Pieces Drive sidebar in Visual Studio, click on the **three vertical dots** on a saved code snippet to **delete** it or choose from 6 other options:\n\n***\n\n| `View Preview`     | `Start Copilot Chat`      | `Copy to Clipboard`     |\n| ------------------ | ------------------------- | ----------------------- |\n| `Insert at cursor` | `Generate Shareable Link` | `Open Markdown Preview` |\n\n***\n\n## Real-Time Snippet Streaming\n\nEvery product in the Pieces Suite uses [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os) to collect information about the context of your snippets.\n\nWhen you change a snippet in the [Pieces for Developers Desktop App](https://docs.pieces.app/products/desktop)—such as its name, description, tags, or any other metadata—those updates automatically appear in your [Pieces for Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio) without needing to refresh.\n\n<Callout type=\"info\">\n  If your snippets aren’t updating immediately, refer to the [troubleshooting guide](https://docs.pieces.app/products/extensions-plugins/visual-studio/troubleshooting) for instructions on refreshing your snippet list.\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.408Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio/drive/search-reuse.md"
  },
  "/docs/extensions-plugins/visual-studio/drive/sharing": {
    "slug": "/docs/extensions-plugins/visual-studio/drive/sharing",
    "metadata": {
      "title": "Sharing Snippets",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n# Sharing Snippets with Pieces\n\nWith this feature, you can generate a unique, shareable link for any saved material directly from your active file in Visual Studio or with a shortcut.\n\n## How to Share a Snippet\n\nThere are two ways to share saved snippets within Visual Studio: using the right-click tool menu or keyboard shortcuts.\n\nThis link can easily be shared via email, Discord, Slack, or other platforms. The recipient can view the snippet **without needing to have a Pieces account.**\n\n### via Right-Click Menu\n\nShareable Pieces links for your code snippets can be generated by right-clicking a portion of selected code, hovering over the `Pieces` item in the pop-up menu, then clicking `Share Current Selection`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/sharing/share_current_selection.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Keyboard Shortcut\n\nYou can generate shareable links for your code snippets using the `alt+M, L` keyboard shortcut after highlighting the desired code within your active file.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/sharing/generating_share_link_keybind.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Generating Links for Existing Saved Snippets\n\nIf you save a material, but didn’t generate a shareable link at the time, no problem. You can still generate a shareable link (or copy, regenerate, or delete the existing link) from the **Quick Menu** within the Pieces Drive view.\n\n<Steps>\n  <Step title=\"Open the Pieces Drive View\">\n    Open the Pieces Drive view and find the saved material for which you want to generate a shareable link.\n  </Step>\n\n  <Step title=\"Launch the Quick Menu\">\n    Once you’ve located the saved material you want to share, click the **three vertical dots** to open the **Quick Menu.**\n  </Step>\n\n  <Step title=\"Generate the Shareable Link\">\n    After the quick menu opens, you’ll see a section titled **Shareable Link**. Click `Generate Shareable Link` to generate it and automatically copy it to your clipboard.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/sharing/share_current_snippet_quick_menu.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n    You can also generate the link using the right-click menu if you edit the saved material. This opens the code in an independent file. To do this, right-click the selected piece, hover over `Pieces`, and click `Share Current Selection`.\n  </Step>\n\n  <Step title=\"Share the Saved Material\">\n    Your shareable link has now been copied to your clipboard, so you can share it with anyone—no need for them to have a Pieces Account.\n  </Step>\n</Steps>\n\n## Enriched Sharing Experience\n\nWhen you `Share` a snippet, it’s not just the code included. The snippet has additional metadata to provide context—[you can read more about that here.](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/save-snippets#whats-stored-when-you-save-a-snippet)\n\n* `Snippet Type`: Identify the language or framework, such as Python or React.\n\n* `Tags`: Useful keywords for quick categorization.\n\n* `Description`: A short summary of what the snippet does.\n\n* `Related Links`: Helpful resources or documentation tied to the snippet.\n\n* `Author Information`: A record of who created the snippet.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731514684555/707b0769-5b68-448c-811b-a44d2414a10d.png?auto=compress,format&format=webp\" alt=\"\" align=\"left\" fullwidth=\"true\" />\n\n## What Information Gets Shared\n\nWhen a snippet is saved to the Pieces Drive, the code is [enriched with valuable information](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/save-snippets#whats-stored-when-you-save-a-snippet) such as related people, links, annotations, tags, and an automatically-generated description.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/shared_snippet_in_browser.png\" alt=\"\" align=\"middle\" fullwidth=\"true\" />\n\n### Sensitive Information Watchdog\n\nThe `Share` feature does more than allow you to effectively share snippets across your entire team and other communities, though.\n\nYou'll see a section titled **Sensitive Information:**\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732743695009/a44bf8b1-67b7-4db0-a6af-87798c8df9ed.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nOur in-house ML model scans snippets for potentially sensitive information, like API keys or passwords, and alerts you so that you can make an informed decision before sharing the snippet.  \n\nThe scan happens locally using on-device machine learning models **before the snippet is uploaded to the cloud** for sharing. This allows you to make an informed decision about sharing your code.",
    "lastModified": "2025-06-04T17:24:58.413Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio/drive/sharing.md"
  },
  "/docs/extensions-plugins/visual-studio/drive": {
    "slug": "/docs/extensions-plugins/visual-studio/drive",
    "metadata": {
      "title": "Pieces Drive",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Materials in Pieces Drive\n\nWith the <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio\">Pieces for Visual Studio Extension</a>, you can [save all types of code snippets](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/save-snippets) directly to your Pieces Drive and easily find, [edit](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/edit-update), [share](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/sharing), and [reuse](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/search-reuse) them whenever you need.\n\nHere are some examples of developer materials you can reuse:\n\n***\n\n| `Logging Utilities`    | A helper function for detailed server-side logging with timestamps and error levels.                        | Speeds up debugging and monitoring by inserting reliable logging methods.   |\n| ---------------------- | ----------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------- |\n| `Validation Functions` | A function to validate JSON payloads or form inputs before submission.                                      | Ensures data integrity with reusable, thoroughly tested validation logic.   |\n| `API Integration Code` | Prewritten `Axios` code for making GET or POST requests, complete with error handling and response parsing. | Reduces repetitive work when integrating RESTful APIs or GraphQL endpoints. |\n| `Component Templates`  | A React functional component template with basic hooks and styling setup.                                   | Provides a consistent starting point for building new components.           |\n| `Database Queries`     | A MongoDB query to retrieve active user data filtered by last login.                                        | Streamlines database tasks by reusing optimized query patterns              |\n\n***\n\n## Boosting Productivity with Snippet Management\n\nThe Pieces for Visual Studio extension connects you with your code and project files, letting you focus on building great software while offering tools for efficient code reuse and management.\n\n* **Improved Productivity**: Access and reuse saved code snippets quickly, so you can spend more time solving new problems than revisiting old ones.\n\n* **Contextual Awareness**: Snippets come with metadata, descriptions, and links to relevant searches, helping you remember their origin, purpose, and best usage scenarios.\n\n* **Code Standardization**: Share best practices and reusable components to ensure consistent coding practices and conventions across teams and projects.\n\nUse the Pieces for Visual Studio Extension to effectively capture, manage, and reuse snippets, streamlining your daily tasks and improving your workflow.\n\n### Save & Organize\n\nEasily [save a function, script, or piece of boilerplate](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/save-snippets) directly from the tool menu.\n\nThese snippets are saved to your personal repository and enriched with context, metadata, and tags, making them easy to retrieve whenever you need them.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/opened_markdown_snippet.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nTo save a snippet in Visual Studio, right-click on the selected code and choose `Save Current Selection to Pieces`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/saving_snippet_to_pieces.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can also save the entire file to your Pieces Drive by right-clicking anywhere in your code, hovering over `Pieces` in the tool menu, and clicking `Save Active File to Pieces`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/save_active_file_to_pieces.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Search & Reuse\n\nYou can directly search through your collection of saved materials from within Visual Studio, allowing you to find snippets quickly by keyword or context.\n\nTo search, you can either right-click, hover over `Pieces`, and select `Search Pieces Drive` or click the search bar in your Pieces Drive view and type your query.\n\nThen, enter your query into the search bar and press `enter` to view the search results.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/searching_snippets.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nAny related snippets will appear in the results list. From there, you can press `enter` to view your snippet, complete with all its saved context, neatly rendered in Markdown as a separate tab.\n\n### Edit & Update\n\nYour snippets can change as your project grows, adapts to new requirements, or when you switch to new files. In the Pieces Drive view, search for a snippet and click the **edit (pencil) icon** to open it in a new tab in Visual Studio.\n\nEdit your code and use `ctrl+s` to save, updating the snippet in your repository.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/searching_editing_saving_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis keeps your library current and aligned with your project's progress, making your materials more efficient in the long run.\n\n### Sharing\n\nSharing useful code snippets can help overcome productivity hurdles, especially if a co-developer is new to the project or less experienced.\n\nFor instance, a teammate handling server monitoring can use your shared script to automate daily tasks without extra setup.\n\nThese shared links also come with their [original enriched metadata](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/save-snippets#whats-stored-when-you-save-a-snippet), including tags, descriptions, and other details.\n\nTo share a snippet using the Pieces Extension for Visual Studio, right-click on selected code, hover over `Pieces`, and choose `Share Current Selection`. This will send your code to the cloud, generate a link, and copy it to your clipboard.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/using_snippets/using_snippets_MAIN/shared_snippet_in_browser.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  You can send anyone a shareable link containing your code snippet, even if they don’t use Pieces or have a Pieces for Developers account.\n</Callout>\n\n## Use Cases\n\nWith the Pieces for Visual Studio Extension, your snippets transform into a robust library of reusable code. You can organize, search, edit, and share these snippets across various projects.\n\nHere are some ways you might use them:\n\n### Reusable Scheduling Functions\n\nSuppose you often work on projects that require scheduling tasks at regular intervals.\n\nInstead of writing the same code for each new project, you can write a reusable function, then save it to your Pieces Drive.\n\nThis enables you to apply a well-designed scheduling function across different applications, such as this:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\n// A reusable function to schedule tasks at a specified interval\nfunc scheduleTask(interval time.Duration, task func()) {\n\tticker := time.NewTicker(interval)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\ttask()\n\t\t}\n\t}\n}\n```\n\n### File System Monitoring\n\nSuppose you frequently work on projects that involve monitoring file system changes. In that case, you can [save a helpful snippet to your Pieces Drive](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/save-snippets#saving-snippets) that does precisely that, using generic and reusable naming conventions:\n\n```python\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\nimport time\n\nclass FileMonitorHandler(FileSystemEventHandler):\n    def on_modified(self, event):\n        print(f\"File modified: {event.src_path}\")\n\n    def on_created(self, event):\n        print(f\"File created: {event.src_path}\")\n\n    def on_deleted(self, event):\n        print(f\"File deleted: {event.src_path}\")\n\ndef monitor_directory(directory=\".\"):\n    observer = Observer()\n    event_handler = FileMonitorHandler()\n    observer.schedule(event_handler, directory, recursive=True)\n    observer.start()\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n\nif __name__ == \"__main__\":\n    monitor_directory()  # Monitors the current directory\n```\n\n## **Additional Snippet Scenarios**\n\nReview some additional scenarios and use cases for Pieces Snippets and see how the <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio\">Pieces for Visual Studio Extension</a> could benefit you and your workflow.\n\n***\n\n<AccordionGroup>\n  <Accordion title=\"Testing Framework Templates\">\n    Streamline testing by saving snippets for your frequently used testing functions or unit test templates.\n  </Accordion>\n\n  <Accordion title=\"Command-Line Utilities\">\n    Save command-line instructions as snippets to quickly retrieve deployment commands, Docker setups, and other essential terminal operations.\n  </Accordion>\n\n  <Accordion title=\"Quickly Create New Projects\">\n    Import saved setup scripts, configuration files, and commonly used dependencies to speed up project setup and ensure consistency across new projects.\n  </Accordion>\n\n  <Accordion title=\"Error Handling & Logging\">\n    You can also save standard logging functions or error-handling snippets that can be reused across applications, promoting consistent error management.\n  </Accordion>\n</AccordionGroup>\n\n***\n\n<a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio\">Download the Pieces for Visual Studio Extension today!</a>",
    "lastModified": "2025-06-04T17:24:58.385Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio/drive.md"
  },
  "/docs/extensions-plugins/visual-studio/get-started": {
    "slug": "/docs/extensions-plugins/visual-studio/get-started",
    "metadata": {
      "title": "Get Started",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Prerequisites for Visual Studio\n\nBefore installation, you'll need:\n\n* **PiecesOS:** The main engine that powers Pieces for Visual Studio functionality. [Learn more about PiecesOS.](https://docs.pieces.app/products/core-dependencies/pieces-os)\n\n* **Visual Studio:** Visual Studio is installed on your development machine.\n\n* **Windows:** Visual Studio is no longer available on macOS and is exclusively designed and maintained for Windows devices.\n\n<Callout type=\"alert\">\n  PiecesOS must be installed to enable the Pieces for Visual Studio Extension. For enhanced functionality, we also recommend the Pieces for Developers Desktop App.\n</Callout>\n\n## Installation\n\n<Steps>\n  <Step title=\"Extensions\">\n    Open Visual Studio and navigate to the **Extensions** view in your toolbar.\n  </Step>\n\n  <Step title=\"Search for the Pieces Extension\">\n    Search for **Pieces for Visual Studio** and click `Install`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/get_started/hovering_install.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n\n  <Step title=\"Restart\">\n    Restart Visual Studio after installing the extension to complete the setup.\n  </Step>\n\n  <Step title=\"Use the Pieces for Visual Studio Extension\">\n    Once you’ve restarted Visual Studio, the **Pieces Account, Pieces Copilot,** and **Pieces Drive** views will automatically open as docked tabs in your `Solution Explorer` view.\n  </Step>\n</Steps>\n\nAlternatively, you can download the .VSIX installer from the <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio\">Visual Studio Marketplace</a> and install it manually.\n\n### Setting Up PiecesOS\n\nPiecesOS is a background service that runs on your computer. It handles local data processing and manages custom machine learning (ML) models used in Pieces software.\n\nTo use the <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for Visual Studio Extension</a>, you must install <a target=\"_blank\" href=\"https://docs.pieces.app/products/core-dependencies/pieces-os\">PiecesOS</a> on your operating system.\n\nClick below to download PiecesOS for Windows.\n\n<get-started-windows />\n\n<Callout type=\"tip\">\n  For enhanced security and better system integration, we recommend installing the `.exe` version, as more security protocols recognize and accept `.exe` files more than `.appinstaller` packages.\n</Callout>\n\n## Updating\n\nThe Pieces for Visual Studio Extension will automatically update when a new version is available.\n\n<Callout type=\"tip\">\n  The `Auto Update` setting is enabled by default.\n</Callout>\n\n## Pieces Cloud / Pieces Account\n\nConnecting to the Pieces Cloud is optional. However, it **provides additional features** like **data backups,** [**shareable links**](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/sharing)**, and more.** You can enjoy the main functionalities of Pieces without an account.\n\nYou can log into your account and connect to the Pieces Cloud from the **Pieces Account** view, a tab which can be found next to the `Solution Explorer` view in your IDE’s sidebar.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/get_started/pieces_account_view.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nFrom here, you can click `Sign In / Sign Out` under the **Account** section, or `Connect / Disconnect` under the **Cloud** section.\n\nConnecting your Pieces account and personal cloud allows you to access features like data backups and shareable links, but it is not required.\n\n## Onboarding\n\nThe Pieces for Visual Studio extension has an interactive walkthrough that shows all of the steps in one panel. This onboarding page guides you on saving, viewing, and using saved materials, as well as how to get the most out of the Pieces for Visual Studio extension.\n\n### Save Your First Material\n\nClick `Save your first material`, and Pieces will open the [Pieces Drive](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive) to save a sample snippet, showing you how it works.\n\nYou'll see the snippet immediately in the **Saved Materials** list. This demonstrates how Pieces captures items and keeps them organized for easy reuse.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/get_started/saving_first_material.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### View Your Saved Materials\n\nClick `View Your Saved Materials`, and Pieces Drive will open to your **Saved Materials**, displaying any snippets you saved earlier along with the new snippet generated above.\n\n### Check Out the Pieces Copilot\n\nClick `Open Your Pieces Copilot` to open the Pieces Copilot side panel. In the Pieces Copilot, you'll find **suggested prompts**, options to set context from folders or files, and quick options to access your saved materials.\n\nOnce you open the Copilot, the onboarding process is complete. You're ready to [ask questions about your code](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/chat), [document it](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/documenting-code), or [refactor a selected material](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/refactoring)—all within the Visual Studio interface.\n\n### Ask Copilot with Your New Material\n\nClick `Ask Copilot about Your Material`, and Pieces will add the new snippet to the Copilot chat with the sample prompt “What does this code do?”. Press `Enter` to send your snippet to the Copilot, and you'll get an explanation or suggestions about the snippet.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/get_started/opening_test_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Customize your Experience\n\nThis section allows you to `Open Pieces Settings` where you’re able to customize the way Pieces work in Visual Studio. [You can view the options here](https://docs.pieces.app/products/extensions-plugins/visual-studio/configuration).\n\n### Supercharge Your Workflow\n\nClick `Pieces Documentation` to access our complete guide, which includes advanced tips, setup instructions, and best practices. Select `Reset Steps` to revisit any onboarding step at any time.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/get_started/supercharge_workflow.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"info\">\n  You can also opt into never showing the steps again by clicking `Do not show this again`.\n</Callout>\n\n## Uninstallation\n\nTo uninstall the Pieces for Visual Studio Extension, follow these steps:\n\n<Steps>\n  <Step title=\"Extensions\">\n    Open Visual Studio and navigate to the **Extensions** view in your toolbar\n  </Step>\n\n  <Step title=\"Search for the Pieces Extension\">\n    Search for Pieces for Visual Studio or navigate to the `Installed` tab and find the **Pieces Extension** in your list of installed extensions, then click `Uninstall`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/get_started/visual_studio_extension_in_ide.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n\n  <Step title=\"Restart\">\n    Restart Visual Studio after uninstalling the extension to complete the uninstallation process\n  </Step>\n</Steps>",
    "lastModified": "2025-06-04T17:24:58.417Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio/get-started.md"
  },
  "/docs/extensions-plugins/visual-studio/troubleshooting": {
    "slug": "/docs/extensions-plugins/visual-studio/troubleshooting",
    "metadata": {
      "title": "Troubleshooting",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n# Having Issues with Visual Studio?\n\nRead the documentation below for a series of basic troubleshooting steps you can take if the Pieces for Visual Studio Extension isn’t working as expected.\n\n<on-device-storage />\n\n## Quick Checks\n\nMany issues stem from an out-of-date version of PiecesOS or a system inadequately powered to run local models. Find out more below.\n\n### Ensure You Have the Latest Versions\n\nFirst, ensure you're using the latest version of the <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.PiecesVisualStudio\">Pieces for Visual Studio Extension</a> from the Visual Studio Marketplace and the newest version of [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os). The minimum supported version is Visual Studio 2022 — 17.9.0 or higher.\n\n### Check the Settings for Pieces\n\nIt's common for users to adjust a setting in Pieces for Visual Studio that leads to unexpected actions. Double-check your [configuration](https://docs.pieces.app/products/extensions-plugins/visual-studio/configuration) to ensure everything is set as you expect.\n\n### PiecesOS\n\nPiecesOS and the Pieces Desktop Application update automatically if installed through the Pieces Suite Installer.\n\nFor standalone installations (non-macOS/Linux store-based), updates are checked daily or upon application launch, prompting you to install or delay.\n\nSee your specific OS page for platform-specific instructions on updating PiecesOS:\n\n* [macOS](https://docs.pieces.app/products/meet-pieces/troubleshooting/macos#updating-piecesos)\n\n* [Windows](https://docs.pieces.app/products/meet-pieces/troubleshooting/windows#updating-piecesos)\n\n* [Linux](https://docs.pieces.app/products/meet-pieces/troubleshooting/linux#updating-piecesos)\n\n### Minimum System Requirements for Pieces Software\n\nRegardless of platform, your device should meet the following basic system specifications for using the Pieces for Developers software.\n\n***\n\n| **Component**      | **Minimum**                                                                   | **Recommended**                      | **Notes**                                                        |\n| ------------------ | ----------------------------------------------------------------------------- | ------------------------------------ | ---------------------------------------------------------------- |\n| *CPU*              | Any modern CPU                                                                | Multi-core CPU                       | Avoid dual-core processors—aim for at least a 4-core CPU.        |\n| *RAM (Local Mode)* | 8 GB total system RAM with 2 GB free                                          | 16 GB total system RAM or more       | Applies when PiecesOS is running locally.                        |\n| *RAM (Cloud Mode)* | 8 GB total system RAM with 1 GB free                                          | 16 GB total system RAM or more       | Applies when PiecesOS is running in cloud mode.                  |\n| *Disk Space*       | 2 GB minimum (1 GB for PiecesOS + 0.5–1 GB for data), with at least 4 GB free | 8 GB with at least 6 GB free or more | Ensure additional free space for data storage and future growth. |\n\n***\n\n## Checking Hardware\n\nIt may be necessary to verify your system’s specifications if you experience ongoing issues.\n\nSee the OS-specific pages for instructions on how to check CPU, RAM, and GPU details:\n\n* [macOS](https://docs.pieces.app/products/meet-pieces/troubleshooting/macos#checking-cpu-type)\n\n* [Windows](https://docs.pieces.app/products/meet-pieces/troubleshooting/windows#checking-hardware-specifications)\n\n* [Linux](https://docs.pieces.app/products/meet-pieces/troubleshooting/linux#checking-system-information)\n\n### Restart Visual Studio After Updates\n\nIf you’ve recently installed or updated PiecesOS or the Pieces for Visual Studio Extension, restart the IDE.\n\nContact the <a target=\"_blank\" href=\"https://getpieces.typeform.com/to/mCjBSIjF#docs-vscode\">Pieces support team</a> if the issue still persists.\n\n### Refreshing Copilot Chats\n\nYou might need to restart or refresh the Pieces Copilot chat, especially if you're using a cloud LLM and lose your WiFi connection.\n\nThis can sometimes cause the LLM to hang, appearing to generate a response but eventually timing out or getting stuck in a loop.\n\nTo fix this, click the **three vertical dots** in the top-right corner of your Copilot Chat window and select `Refresh`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/troubleshooting/refresh_copilot_chat.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:58.422Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio/troubleshooting.md"
  },
  "/docs/extensions-plugins/visual-studio-code/commands": {
    "slug": "/docs/extensions-plugins/visual-studio-code/commands",
    "metadata": {
      "title": "Commands",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Pieces for VS Code Extension Commands\n\nBelow is a table containing every command that is available to use in the <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for VS Code Extension</a>.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/commands/settings_pieces.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Shortcut Table\n\nThere are a number of actions related to the <a target=\"_blank\" href=\"https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot\">Pieces Copilot</a> and [Pieces Drive management ecosystem](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive) that are accessible with shortcuts.\n\n***\n\n| **Command**                                                                                                                                           | **macOS**   | **Windows/Linux** |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------- | ----------- | ----------------- |\n| [Ask Copilot About Selection](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/chat#pieces-ask-copilot-about-selection) | `shift+⌘+a` | `ctrl+shift+a`    |\n| [Copy](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/search-reuse#viewing-and-reusing-saved-snippets)                  | `⌘+c`       | `ctrl+c`          |\n| [Paste](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/search-reuse#viewing-and-reusing-saved-snippets)                 | `⌘+v`       | `ctrl+v`          |\n| [Save Current Selection to Pieces](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/save-snippets#via-keyboard-shortcuts) | `shift+⌘+’` | `ctrl+shift+v`    |\n| [Search Pieces](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/search-reuse#via-search-feature)                         | `⌥+⌘+p`     | `ctrl+alt+p`      |\n| [Share](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/sharing#via-keyboard-shortcut)                                   | `shift+⌘+i` | `ctrl+shift+i`    |\n\n***\n\n## Command Table\n\nYou can easily access these commands through the **Command Palette** using the shortcuts—`⌘+shift+p` (macOS) and `ctrl+shift+p` (Windows/Linux).\n\nSimply type `Pieces:` followed by the desired command.\n\n***\n\n| **Pieces Copilot: Focus on Pieces Copilot View** | Launches the Pieces Copilot in the side panel, providing contextual insights and assistance for the currently open code.                               |\n| ------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| **Pieces Drive: Focus on About View**            | Opens the Pieces Drive window, showing information about the Pieces for VS Code Extension, the Pieces Community, and Support resources.                |\n| **Pieces Drive: Focus on Connect View**          | Opens the Pieces Drive window, showing the status of your Pieces account if it is connected to the Pieces Cloud.                                       |\n| **Pieces: Ask Copilot About Active File**        | Allows you to ask the Pieces Copilot about the active file open in the VS Code Editor.                                                                 |\n| **Pieces: Ask Copilot About Selection**          | Opens up a prompt for you to ask the Pieces Copilot a specific question about a selection.                                                             |\n| **Pieces: Ask Copilot About Workspace**          | Ask the Pieces Copilot for insights about your entire workspace, including saved files and snippets.                                                   |\n| **Pieces: Comment Selection with Copilot**       | Allows the Pieces Copilot to automatically generate comments for your selected code snippet.                                                           |\n| **Pieces: Explain Selection with Copilot**       | Generates a detailed explanation for the highlighted code selection using the Pieces Copilot.                                                          |\n| **Pieces: Import User Materials to Pieces**      | Import external user materials (i.e. snippets) into Pieces Drive to integrate them into your workflow seamlessly.                                      |\n| **Pieces: Launch PiecesOS**                      | Opens the PiecesOS desktop application. Note that PiecesOS must be running to utilize all VS Code extension features.                                  |\n| **Pieces: Modify Selection with Copilot**        | Refactor or enhance selected code by describing your intended modification. Pieces Copilot will implement the changes.                                 |\n| **Pieces: Open Copilot**                         | Opens the Pieces Copilot on the left-hand side of the VS Code IDE.                                                                                     |\n| **Pieces: Disconnect from Pieces Cloud**         | Disconnect from your Pieces Cloud account while keeping local functionality intact.                                                                    |\n| **Pieces: Connect to Pieces Cloud**              | Connect to the Pieces Cloud and sync VS Code with Pieces Cloud.                                                                                        |\n| **Pieces: Sign into Pieces**                     | Sign into your Pieces Cloud account and sync local databases.                                                                                          |\n| **Pieces: Refresh Snippets**                     | Refresh your saved code snippets in the Pieces.                                                                                                        |\n| **Pieces: Save Active File to Pieces**           | Save the active code file in the VS Code editor to Pieces.                                                                                             |\n| **Pieces: Save Current Selection to Pieces**     | Save a selected code snippet to Pieces.                                                                                                                |\n| **Pieces: Search Pieces**                        | Launches the search bar where you can view and search for conversations, saved snippets, projects, and other interactions you have with the Pieces OS. |\n| **Pieces: Sign Out of Pieces**                   | Log out of your Pieces account entirely, disabling both local and cloud-connected features.                                                            |\n| **View: Show Pieces Copilot**                    | Opens the Pieces Copilot by the side of the VS Code editor.                                                                                            |\n| **View: Show Pieces Drive**                      | Opens the Pieces Drive window.                                                                                                                         |\n\n***",
    "lastModified": "2025-06-04T17:24:58.238Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code/commands.md"
  },
  "/docs/extensions-plugins/visual-studio-code/configuration": {
    "slug": "/docs/extensions-plugins/visual-studio-code/configuration",
    "metadata": {
      "title": "Configuration",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Settings, Models, and More\n\nLearn how to configure the Pieces for VS Code Extension—from choosing your preferred LLM to customizing settings, shortcuts, and snippet behaviors.\n\n### Supported LLMs\n\nWe constantly update and configure our plugins and extensions to work with the latest LLMs.\n\nThe Pieces for VS Code Extension [currently supports over 54 different LLMs.](https://docs.pieces.app/products/large-language-models)\n\n[Read documentation on how to switch your Pieces Copilot Runtime (LLM)](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/llm-settings#how-to-configure-your-llm-runtime) utilized by the Pieces for VS Code Extension within your IDE.\n\n## Opening Pieces Settings\n\nTo open the **Pieces Settings** in the Pieces for VS Code Extension, select the `Pieces Settings` icon within your sidebar. This will open the new Pieces Settings bar.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/configuration/new_opening_settings.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can also access **Pieces Settings** in the bottom-left corner of the screen, where it says `Pieces Settings`.\n\n## Overriding Commands in VS Code\n\nIf you’d like to adjust the keyboard shortcuts for Pieces functionality in VS Code, such as [saving a snippet](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/save-snippets) or [previewing markdown](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/search-reuse#viewing-and-reusing-saved-snippets), follow these steps:\n\n<Steps>\n  <Step title=\"Open Keyboard Shortcuts\">\n    Open the **Keyboard Shortcuts** editor by pressing `⌘+k+s` (macOS) or `ctrl+k+s` (Windows/Linux)\n  </Step>\n\n  <Step title=\"Locate the Pieces Command\">\n    Use the **search bar at the top of the editor** to locate the Pieces command you want to modify, such as `Save Current Selection`\n  </Step>\n\n  <Step title=\"Edit the Keybind\">\n    Click the **pencil icon** next to the command and select `Add Keybinding`\n  </Step>\n\n  <Step title=\"Enter Preferred Shortcut\">\n    **Enter your preferred shortcut**—be sure it doesn’t conflict with an existing VS Code command—i.e., `⌘+shift+'` (macOS) or `ctrl+shift+'` on (Windows/Linux)\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/configuration/new_settings_overview.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## Settings Overview\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/configuration/new_settings_overview.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Account & Cloud Integrations\n\n* **Account Name:** Displays your chosen display name in the extension.\n\n* **Account Email:** Displays the email address associated with your account.\n\n* **Early Access Program:** Indicates whether you are enrolled in the beta program.\n\n### Personal Cloud\n\n* **Status:** Shows whether your cloud is connected or disconnected and displays the last-updated timestamp.\n\n* **Personal Domain:** Displays your custom subdomain (for example, `<your-domain>.`[`pieces.cloud`](http://pieces.cloud)).\n\n* **Backup & Restore Data:** Provides a button to back up or restore all of your personal cloud data.\n\n### Saved Material Auto-Enrichment\n\n* **Auto-Generated Context:** A dropdown menu allows you to select how much context is auto-generated (None, Low, Medium, High).\n\n### ML Processing\n\n* **Processing Mode:** You can choose between Local, Cloud, or Blended resource usage.\n\n* **Long-Term Memory Engine:** Toggles the long-term memory engine on or off and displays its current version.\n\n* **Long-Term Memory Source Control:** Provides a link to manage which memory sources are used for long-term storage.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/configuration/ml_proceess_vscode.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Utilities\n\n* **Clear Long-Term Memory Engine Data…:** Provides a button to purge persisted memory for a specified date range.\n\n### Model Context Protocol (MCP)\n\n* **Server URLs:** Provides a text field where you can list all of your MCP endpoint URLs.\n\n* **View Documentation:** Links to the official MCP usage documentation for guidance.\n\n### CodeLens\n\n* **Enable Pieces Code-Lens:** Toggles the code-lens features on or off in the editor.\n\n* **Use Same Conversation For Code-Lens:** Shares a single Copilot conversation across all code-lens actions.\n\n### Saved Materials\n\n* **Close Snippet Editor on Save:** Automatically closes the snippet editor when you save a snippet.\n\n* **Enable Automatic Link Copy:** Automatically copies the snippet’s shareable link to your clipboard upon saving.\n\n### PiecesOS Configs\n\n* **Launch on Startup:** Automatically launches the PiecesOS background service when VS Code starts.\n\n* **Auto Launch on Interaction:** Automatically starts PiecesOS the first time you interact with the extension.\n\n### Autocomplete\n\n* **Enable AutoComplete:** It suggests saved snippets are inline as you type code in the editor.\n\n### Git Integration\n\n* **Pieces › Save › Git: Related Links:** Attaches related commit links when saving a snippet.\n\n* **Pieces › Save › Git: Related People:** Attaches the commit authors as metadata when saving a snippet.\n\n* **Pieces › Save › Git: Description:** Uses commit messages as the default description for the saved snippet.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/configuration/git_integration.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Notifications\n\n* **Show Update Extension Notification:** Prompts you on startup if a new extension version is available.\n\n### Onboarding\n\n* **Launch Onboarding:** Reopens the onboarding tutorial to help you learn how to use the extension.\n\n### Telemetry & Analytics\n\n* **Telemetry & Diagnostics:** Shares anonymous usage and crash data to help improve the extension.\n\n* **Share Error Analytics:** Shares detailed error analytics to help diagnose and fix bugs.\n\n* **Share Usage Analytics:** Shares anonymized usage patterns to inform future feature development.\n\n### Support\n\n* **Documentation:** Provides a link to the online Pieces documentation.\n\n* **Submit Feedback/Issues:** Provides a link to the GitHub issues page or support form for reporting bugs or requesting features.\n\n### PiecesOS Information\n\n* **PiecesOS Version:** Displays the current version number of the PiecesOS service.\n\n* **Check for PiecesOS Updates:** Provides a button to check for and install PiecesOS updates manually.\n\n* **PiecesOS Port:** Displays the network port on which PiecesOS is listening.\n\n### Settings Applet\n\n* **Version:** Displays the current version number of the Settings Applet.\n\n***\n\nFor additional support resources, check out our [troubleshooting guide.](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/troubleshooting)",
    "lastModified": "2025-06-04T17:24:58.243Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code/configuration.md"
  },
  "/docs/extensions-plugins/visual-studio-code/copilot/chat": {
    "slug": "/docs/extensions-plugins/visual-studio-code/copilot/chat",
    "metadata": {
      "title": "Generative AI Conversations",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Pieces Copilot — in your IDE\n\nPieces Copilot brings the power and flexibility of local and cloud-hosted LLMs together with the context-aware Long-Term Memory Engine for intelligent & aware conversations, code documentation, smart debugging, and more.\n\n## Accessing Copilot Chat in VS Code\n\nThere are three ways to primary ways to access generative AI chats with the Pieces Copilot.\n\n### via Right-Click Menu\n\n<Steps>\n  <Step title=\"Highlight Any Code Segment\">\n    Highlight any code segment and right-click to open the tool menu\n  </Step>\n\n  <Step title=\"Select a Management Option\">\n    Choose `Ask Copilot About Selection`, `Ask Copilot About Active File`, or `Explain Selection with Copilot` from the tool menu depending on your use case\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/chat/click_on_explain.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### via Keyboard Shortcuts\n\nYou can also open up a dialogue with the Pieces Copilot—specifically the `Ask Copilot About Selection` option—by using the shortcut `⌘+shift+a` (macOS) or `ctrl+shift+a` (Windows/Linux).\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732737809517/52d91b01-2106-4c4d-9e39-607943fcdc33.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Command Palette\n\nOpen the command palette with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux), and enter commands such as:\n\n* `Pieces: Ask Copilot About Active File`: This function provides insights into the current file open in your VS Code editor.\n\n* `Pieces: Ask Copilot About Selection`: Generates suggestions or improvements for the selected code snippet.\n\n* `Pieces: Ask Copilot About Workspace`: Offers context-aware assistance across your entire workspace.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732737874527/2573ead1-b1fc-4a41-838d-c3509d54d2e6.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nRead more about [what commands are available in the Pieces for VS Code Extension.](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/commands)\n\n### via AI Quick Actions\n\nUse the new [AI Quick Actions](https://docs.pieces.app/products/extensions-plugins/visual-studio-code#using-ai-quick-actions) feature in the Pieces for VS Code Extension to quickly get an explanation for a confusing or forgotten function's logic.\n\nTry using the `Pieces: Explain` tool above your code to start a conversation about a particular function.\n\nThis triggers the Copilot Chat window, which outputs an explanation and summary of the code function.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/chat/pieces_explain_copilot_action.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nIn addition, there is also `Pieces: Comment`, which you can read more about [here.](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/documenting-code)\n\n## Contextualized Chats\n\nThere are 3 different levels of contextual awareness that you can utilize when initiating a Copilot chat (or adding code to an existing chat) with the Pieces Copilot.\n\n### Pieces: Ask Copilot About Selection\n\nUsing the `Pieces: Ask Copilot About Selection` command lets you interact with Copilot regarding specific code snippets, functions, or classes.\n\nTo use this feature:\n\n<Steps>\n  <Step title=\"Choose a Portion of Code\">\n    Select a portion of code that you’d like to inquire about\n  </Step>\n\n  <Step title=\"Open the Command Palette\">\n    Open the command palette with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux). Type and run the `Pieces: Ask Copilot About Selection` command\n  </Step>\n\n  <Step title=\"Enter Your Prompt\">\n    Type your prompt in the text input field and press `return` (macOS) or `enter` (Windows/Linux)\n\n    <Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732738498253/f36bb3c0-3fae-4570-a5a1-b5baa8231d12.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nThis approach is ideal for localized queries where you need **quick insights** or **guidance** **on specific code functionality**.\n\n### Pieces: Ask Copilot About Active File\n\nThe `Pieces: Ask About Active File` feature focuses on the current file, offering tailored insights and assistance with debugging.\n\nThere are two ways to access this command:\n\n1. Right-click inside your file and select the `Ask Copilot about Active File`, then enter your query into the dropdown text input field.\n\n2. Open the command palette using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux) and enter `Pieces: Ask About Active File`.\n\nOnce you've entered your question, the Pieces Copilot will analyze the file's context to deliver precise responses.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/chat/ask_about_active_file.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis feature is useful for better understanding file dependencies, methods, and structure, detecting potential issues, suggesting improvements, and more.\n\n<Callout type=\"tip\">\n  The `Pieces: Ask About Active File` the feature can also be applied during onboarding to get helpful explanations for unfamiliar code.\n</Callout>\n\n### Pieces: Ask Copilot About Workspace\n\nWith the `Pieces: Ask Copilot About Workspace` command, you can extend the Pieces Copilot’s assistance to fit the project scope.\n\nTo use this command:\n\n<Steps>\n  <Step title=\"Open the Command Palette\">\n    Open the command palette `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux)\n  </Step>\n\n  <Step title=\"Enter the Command and Query\">\n    Enter `Pieces: Ask Copilot About Workspace` and type your question\n  </Step>\n</Steps>\n\nThis is ideal for large projects where a project-wide perspective is needed, specifically for identifying inconsistencies in naming conventions across multiple files, in error handling, or resolving global code redundancies.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732738797364/b0e79b08-11d3-473a-a10a-daedb1667862.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Adding Context to Copilot Chats\n\nYou can add context to a chat by adding `Files`**,** `Folders`**,** `Snippets`**,** `Websites`**,** and `Messages`**.**\n\nThis flexibility comes in handy when items you want to serve as reference material is not directly accessible from VS Code, or if you want to compartmentalize context and minimize overlap by keeping files or folders from other projects separate from your active file’s workflow.\n\nTo do this, select the Starred Message Icon in the bottom-left corner of your Copilot Chat window, which is openable from the VS Code sidebar.\n\nClick the **Starred Message Icon,** then add whatever context items you need.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/chat/add_files_to_context.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Adding Code Snippets\n\nYou can paste snippets of code as a code block inside any Copilot Chat by clicking the `{ }` icon inside the chat window, then pasting in your code.\n\nThis is useful for bringing in code that isn’t present immediately in the active file as context, or for comparisons and suggestions.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734126869579/98158d85-2072-4479-8290-069fda210cff.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Extracting Code from Screenshots\n\nYou can also extract code from screenshots directly from the Copilot chat menu by selecting `Extract Code from Screenshot`, selecting the desired screenshot from your **Finder** (macOS) or **File Explorer** (Windows/Linux) menu, and confirming.\n\nPieces Copilot will then scan the screenshot and generate the code captured from the image into the chat, from which you can copy, insert at your cursor, save it as a snippet, and more.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/chat/extract_code_from_screenshot_vs_code.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Adding Folders from File Explorer\n\nSuppose you right-click on a folder or file in your file explorer in VS Code. In that case, you’ll see three options: `Pieces: Add to Copilot Context`, `Pieces: Ask Copilot` and `Pieces: Save File to Pieces`, so you can take any folder in the project you’re working in and immediately have the Pieces Copilot interact with it.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734128702503/4b2c56b7-8d51-42be-8d3c-f4b13b9f7701.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Adding Pieces MCP\n\nAdding the Pieces MCP to VS Code is simple and enables you to perform a wide range of Pieces actions with the GitHub Copilot.\n\n<Steps>\n  <Step title=\"Open the Command Palette\">\n    To open the command palette, press `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux).\n  </Step>\n\n  <Step title=\"Search for MCP: Add Server\">\n    After the command palette opens, enter `MCP: Add Server` and select the option that appears matching that query.\n  </Step>\n\n  <Step title=\"Select HTTP\">\n    In the new MCP menu, select `HTTP (server-ssent events)` and a new menu will appear.\n\n    Enter `http://localhost:39300/model_context_protocol/2024-11-05/sse` as the URL for the Pieces MCP server. Once the URL is entered, press `return` (macOS) or `enter` (Windows/Linux).\n\n    > screenshot of the url entered into the enter server url box\n  </Step>\n\n  <Step title=\"Name the Server\">\n    After entering your server URL, you can enter a name for the server. It’s recommended to name it `PiecesMCP`, but you can put whatever you’d like here.\n  </Step>\n\n  <Step title=\"Select Workspace\">\n    You will then be prompted to choose workspaces:\n\n    * `User Settings` — Make the MCP available in any project you work on within VS Code.\n\n    * `Workspace Settings` — Save the MCP locally to the current project you’re working on.\n\n    After selecting your workspace, VS Code will open a `settings.json` file. You can manually adjust the MCP server in this file. Otherwise, you can close it.\n\n    > screenshot of the json ?\n  </Step>\n</Steps>\n\n## Improving Code Consistency & Standardization\n\nThe Pieces Copilot helps improve code quality by identifying inconsistencies and providing actionable suggestions for standardization.\n\n### Naming Inconsistencies\n\nIf functions across your workspace use inconsistent naming patterns (e.g., `authenticateUser` in `authHandler.go` vs. `retrieveUserProfile` in `userHandler.go`), Pieces Copilot can suggest adopting a standardized naming convention for better readability and maintainability, like this:\n\n```c\n// authHandler.go\nfunc authenticateUser(ctx context.Context, credentials Credentials) (User, error) {\n    if credentials.Username == \"\" || credentials.Password == \"\" {\n        return User{}, errors.New(\"missing credentials\")\n    }\n}\n```\n\n### Inconsistent Error Handling\n\nIf error-handling strategies differ across files (e.g., structured errors in `authService.go` vs. inconsistent handling in `userService.go`), Pieces Copilot can help unify the approach:\n\n```c\n// authService.go\nfunc LoginUser(credentials Credentials) (string, error) {\n    token, err := authenticate(credentials)\n    if err != nil {\n        return \"\", fmt.Errorf(\"login failed: %w\", err)\n    }\n    return token, nil\n}\n```",
    "lastModified": "2025-06-04T17:24:58.257Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code/copilot/chat.md"
  },
  "/docs/extensions-plugins/visual-studio-code/copilot/debugging-errors": {
    "slug": "/docs/extensions-plugins/visual-studio-code/copilot/debugging-errors",
    "metadata": {
      "title": "Debugging Errors",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Fixing Bugs with Pieces Copilot\n\nThe Pieces Copilot in the <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for VS Code Extension</a> offers AI-driven debugging that **simplifies finding and fixing code issues in VS Code.** This feature not only speeds up troubleshooting but also provides an opportunity to learn from the fixes suggested by the AI.\n\n## Using the Debugging Tool\n\nTo start debugging, locate your project's error or problematic code segment.\n\n<Callout type=\"tip\">\n  Errors are usually indicated by **red underscoring** surrounding the error or problematic lines of code.\n</Callout>\n\nThen, right-click on the error, open the quick fix menu, and select `Pieces: Fix`. You will also see a **Yellow Lightbulb**. Clicking the **Yellow Lightbulb** will show `Pieces: Fix`, allowing you to debug the error on that line quickly.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/debugging_errors/pieces_fix_quick_action.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nPieces Copilot will utilize whichever LLM you have currently active and analyze the issue. Then, it will open a Copilot chat with suggestions, regenerate the code, and provide the option `Insert at Cursor` with fresh code comments.\n\nYou can then choose to `Accept` or `Insert at Cursor`. `Insert at Cursor` will place the fixed code at the pointer’s position. `Accept` will replace the broken code with the fixed version.\n\n## Why Debug with Pieces Copilot?\n\nDebugging with Pieces Copilot smoothens error resolution and provides AI-driven insights in an experience that doesn’t detract from your workflow in VS Code.\n\nThis saves time by reducing the need to search for solutions online or navigate extensive documentation, keeping your workflow efficient and reducing distractions.\n\nAdditionally, each suggested fix includes an explanation, helping you understand and improve your coding practices as you debug.\n\n<Callout type=\"tip\">\n  The Pieces Copilot proactively identifies code issues—highlight your code, click the **Yellow Lightbulb,** and let it analyze the problem(s).\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.265Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code/copilot/debugging-errors.md"
  },
  "/docs/extensions-plugins/visual-studio-code/copilot/documenting-code": {
    "slug": "/docs/extensions-plugins/visual-studio-code/copilot/documenting-code",
    "metadata": {
      "title": "Documenting Code",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Adding Documentation with Pieces\n\nPieces Copilot can analyze and **comment on any selected portion of your code,** explaining its logic line by line to help ensure that it is not only readable but also easy to understand for others.\n\n## How To Add Code Comments\n\nThere are two ways to add code comments to your selected\n\n### via Right-Click Menu\n\nTo add comments to your code from the toolbar, select the desired lines, right-click, hover over `Pieces`, and choose `Comment Selection with Copilot`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/documenting_code/hover_over_comment.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nPieces Copilot will generate clear, contextual comments for the selected code inside the chat window.\n\nYou can then click `Insert at Cursor` to insert the fix at the location of your cursor. You can also click `Accept Changes` to place the code comments directly between your lines of code at the precise location from which you selected the code.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/documenting_code/insert_at_cursor_code_comments.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Pieces: Comment\n\nA quicker way of adding documentation to a function you may have previously overlooked is to click the `Pieces: Comment` tool, which appears above actionable tasks in your code that are visible on your screen.\n\nThis new [AI Quick Actions](https://docs.pieces.app/products/extensions-plugins/visual-studio-code#using-ai-quick-actions) feature—similar to CodeLens actions that sit above functions nearest your cursor—can generate quick, insertable comments to explain the purpose and logic of your code.\n\nTo get started, look for the **AI Quick Actions** buttons above individual functions in your code.\n\nOnce you’ve located the **AI Quick Actions**, left-click on `Pieces: Comment`, then click `Accept Changes` to insert the newly commented code in the original code’s location.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/documenting_code/add_comments_quick_action.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Why Use Code Comments?\n\nCode comments play a vital role in **maintaining a clean, well-documented codebase.**\n\nThey **provide context for reviewers** to focus on functionality and **make complex reasoning transparent,** ensuring easier code to follow and maintain.\n\nGood documentation improves code readability and accelerates onboarding for people unfamiliar with the codebase. This is a twofold benefit—it supports **current and future development,** and creates a strong **foundation for upgrading and reiterating.**\n\nComments help you remember the purpose and function of the code, making it easier to revisit and understand after a long time away.\n\nThat’s why this specific feature is so powerful. Need a few hundred lines of code documented? No problem—just `Comment Selection with Copilot`.",
    "lastModified": "2025-06-04T17:24:58.270Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code/copilot/documenting-code.md"
  },
  "/docs/extensions-plugins/visual-studio-code/copilot/llm-settings": {
    "slug": "/docs/extensions-plugins/visual-studio-code/copilot/llm-settings",
    "metadata": {
      "title": "LLM Settings",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Switching LLMs\n\nThe <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for VS Code Extension</a> currently supports [54 different LLMs](https://docs.pieces.app/products/large-language-models), including both cloud-hosted and local models.\n\n## How To Configure Your LLM Runtime\n\nSwitching your LLM model in the Pieces for VS Code Extension is a straightforward process, giving you the flexibility to choose the model that best suits your needs.\n\nHow to change your LLM:\n\n<Steps>\n  <Step title=\"Open the Copilot Chat View\">\n    Open the Copilot Chat view by clicking the **Pieces Copilot** icon in the sidebar.\n  </Step>\n\n  <Step title=\"Locate the Active Model\">\n    Locate the **Active Model** in the bottom-left corner of the view where the current model (e.g., *GPT-4o Mini*) is displayed.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/llm_settings/circling_change_model_icon.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n\n  <Step title=\"View the Models\">\n    Click on `Change Model` to open the **Manage Copilot Runtime** modal.\n  </Step>\n\n  <Step title=\"Choose Your Desired Model\">\n    Browse the list of local and cloud models and select your preferred model.\n  </Step>\n</Steps>\n\nFrom here, you can browse and select from a variety of available models, such as the local and cloud-based models listed [in the tables on this page.](https://docs.pieces.app/products/core-dependencies/ollama/supported-models)\n\n<Callout type=\"tip\">\n  Cloud-hosted models offer access to the latest AI capabilities, while on-device models ensure offline functionality, making Pieces Copilot adaptable to your specific workflow and environment.\n</Callout>\n\nOnce you’ve chosen a new model, the switch is instant, allowing you to continue your work seamlessly with the selected model's capabilities—*no need to restart or refresh anything.*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/llm_settings/selecting_llm_from_modal.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:58.275Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code/copilot/llm-settings.md"
  },
  "/docs/extensions-plugins/visual-studio-code/copilot/refactoring": {
    "slug": "/docs/extensions-plugins/visual-studio-code/copilot/refactoring",
    "metadata": {
      "title": "Refactoring",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Refactoring Code\n\nRefactoring is vital for improving your code's structure and maintainability without changing its behavior. The <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for VS Code Extension</a> simplifies this process with its `Modify Selection with Copilot` feature.\n\n## Modifying your Code with Pieces Copilot\n\nYou can modify your code to include changes to error handling, changing function names, and adding functionality in two different ways.\n\n### via Right-Click Menu\n\nRight-click a highlighted piece of code you’d like to modify, then hover over `Pieces` and click on `Modify Selection with Copilot`.\n\nOnce you click `Modify Selection with Copilot`, Pieces Copilot will open the Copilot chat window in the VS Code sidebar, generating and showcasing the proposed changes.\n\nYou can review the modifications and decide whether to accept them, automatically integrating the updates into your codebase from the point the code was selected—i.e, at your cursor.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/refactoring/modify_selection.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Command Palette\n\nYou can also access the `Modify Selection with Copilot` feature quickly using shortcut commands in VS Code.\n\nPress `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux) to open the command palette, then type `Pieces: Modify Selection with Copilot`.\n\nOnce the input modal is visible at the top of your IDE, enter in your prompt—i.e, whatever changes you’d like made to the code—then press `return` (macOS) or `enter` (Windows/Linux).\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732739726856/596f060f-437e-4d6f-bdeb-132ab57ff444.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis method offers a fast, efficient way to refactor and improve your code without interrupting your workflow.\n\n<Callout type=\"tip\">\n  You can use `Modify Selection with Copilot` to add detailed logging to critical functions for improved debugging and restructure long methods into smaller, more modular functions.\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.281Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code/copilot/refactoring.md"
  },
  "/docs/extensions-plugins/visual-studio-code/copilot": {
    "slug": "/docs/extensions-plugins/visual-studio-code/copilot",
    "metadata": {
      "title": "Pieces Copilot",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Overview\n\nPieces Copilot within the <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for VS Code Extension</a> integrates advanced AI capabilities into your coding workflow, like swappable LLMs for adding code comments, generating additional code, debugging, and more.\n\nThe Pieces Copilot allows you to generate intelligent code comments, access AI Quick Actions, and ask variable-context coding questions without leaving Visual Studio Code.\n\n## Generative AI Conversations\n\nFacing an issue or not sure how to tackle a coding challenge? You can [ask the Pieces Copilot specific coding questions](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/chat) directly in VS Code using the Copilot Chat side window.\n\nYou can ask any question that doesn’t require context, such as *“What is the basic format for a JSON object?”,* or more in-depth questions where the Pieces Copilot needs context from your active code.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732736633318/f96645a1-a52f-455e-b128-84cf9d2f2c80.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Adding Conversation Context\n\nContextual awareness allows the Pieces Copilot to help you overcome obstacles faster by providing answers that are *actually* relevant to the current issue you’re facing and to your code.\n\nTo use this feature, include details like error messages or [file context](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/chat#adjusting-conversation-context) for more accurate responses from the LLM conversation.\n\nYou can also [add multiple files and other items as context](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/chat#adding-items-to-copilot-chats) to your question, giving the Pieces Copilot comprehensive information to help you troubleshoot.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732736690908/a20309cb-50cc-44ab-9866-e5ab301bb4c8.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nStart by right-clicking some code and selecting one of the following options from the tool menu:\n\n* `Ask Copilot About Selection`: Includes the active selected code in the chat.\n\n* `Ask Copilot About Active File`: Includes the entire active file with the Copilot chat for a broader range of context.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/MAIN_pieces_copilot/hover_over_ask_active_file.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Pieces Copilot Tools\n\nDiscover powerful AI-powered tools and features within the Pieces for VS Code Extension.\n\n### Documenting Code\n\nEasily generate insightful code comments with the Pieces for VS Code Extension. By understanding your code’s structure and function, [Pieces Copilot creates clear and useful comments](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/documenting-code#commenting-code-selections-with-pieces-copilot) to enhance readability and simplify maintenance.\\\n\\\nTo add documentation and comments to code, select the code snippet—no matter how long—then right-click, hover on `Pieces`, and click `Comment Selection with Copilot`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/MAIN_pieces_copilot/hover_over_comment.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis opens the Pieces Copilot in the VS Code sidebar, where documentation is automatically generated for the highlighted snippet. You can then select `Insert at Cursor` to add the comments directly to your code.\n\nYou can also click `Pieces: Add Comments`, which is an [AI Quick Action](https://docs.pieces.app/products/extensions-plugins/visual-studio-code#using-ai-quick-actions) that lives above accessible functions within your code.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/MAIN_pieces_copilot/add_comments_quick_action.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  Use this feature to maintain consistency in documentation and simplify handoffs for collaborative projects.\n</Callout>\n\n### AI-Powered Debugging Tools\n\nDetect and address code issues quickly with Pieces for VS Code Extension [Code Debugging feature.](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/debugging-errors) It pinpoints problems, suggests solutions, and provides detailed context, making bug fixes faster and more intuitive.\n\nThe code debugging feature is particularly useful for tackling complex debugging tasks and ensuring code quality across projects.\n\nUsing this feature is simple—click the **lightbulb** icon near an error—marked with a red underline—to see the `Pieces: Fix` option, then click it.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/pieces_copilot/MAIN_pieces_copilot/pieces_fix_quick_action.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Generate & Update Code\n\nWith the Pieces for VS Code extension, you can enhance your workflow with two powerful Pieces Copilot commands:\n\n* `Modify Selection with Copilot`: [Edit or transform the selected code snippet](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/refactoring#modifying-your-code-with-pieces-copilot) to improve readability, optimize performance, or adapt it for specific needs.\n\n* `Explain Selection with Copilot`: [Get a clear explanation of what the selected code does](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/chat#accessing-pieces-copilot-in-vs-code), making it easier to understand and document.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731382876801/88c397c2-519e-45a6-b15d-53afc59fba02.png?auto=compress,format&format=webp\" alt=\"\" align=\"left\" fullwidth=\"true\" />\n\n## Selecting Your Pieces Copilot Runtime\n\nChoose between [different LLMs directly within VS Code](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/llm-settings) by accessing the sidebar and selecting your preferred model by clicking the currently-utilized LLM under `Active Model`—e.g., Claude 3.5 Sonnet, GPT-4o, etc.\n\nOptions range from lightweight models for simple queries to advanced models for in-depth analysis, as well as **local** and **cloud-based LLMs.**\n\nThis flexibility allows you to tailor Pieces Copilot to your specific development needs, whether it’s speed or accuracy.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732737435734/dce7140b-934e-42ef-bb82-9cff7bd5b620.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nRead more about [what LLMs are available for use](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/configuration#supported-llms) with the Pieces for VS Code Extension.\n\n## Pieces MCP\n\nThe new Pieces MCP enables you to utilize the LTM (Long-Term Memory) within any of your preferred IDEs, including VS Code.\n\nThe [Pieces MCP](http://google.com/link-to-the-mcp-docs-in-chat) works inline with GitHub Copilot within VS Code, allowing you to use your favorite Pieces actions directly within your VS Code or VS Code forks.\n\n> screenshot of the pieces mcp within VS Code\n\n## Pieces Copilot As a Daily Driver\n\nThe Pieces Copilot is a powerful, adaptable tool that grows with you as you use it—*so use it!*\n\n***\n\n<AccordionGroup>\n  <Accordion title=\"Collaborative Coding Made Easy\">\n    Generate detailed comments and documentation for better team collaboration and also reduce onboarding times, creating a unified coding style across teams.\n  </Accordion>\n\n  <Accordion title=\"Troubleshoot and Resolve Bugs Swiftly\">\n    Use the Pieces Copilot in VS Code to streamline the bug-fixing process. Its contextual understanding and suggested solutions make troubleshooting faster, keeping your project on course.\n  </Accordion>\n\n  <Accordion title=\"Quick Prototyping\">\n    Generate initial implementations and boilerplate code for prototypes and fast-paced projects. Ideal for hackathons, PoCs, and other time-sensitive tasks.\n  </Accordion>\n\n  <Accordion title=\"Skill Enhancement\">\n    Pieces Copilot doubles as a learning tool, helping you explore best practices, new paradigms, and advanced techniques in real-time.\n  </Accordion>\n\n  <Accordion title=\"Efficient Code Refactoring\">\n    Optimize your codebase through intelligent refactoring recommendations. The Pieces Copilot analyzes your code patterns suggests structural improvements and delivers optimizations for both performance and readability.\n  </Accordion>\n</AccordionGroup>\n\n***\n\n<a target=\"_blank\" href=\"https://pieces.app/plugins/vs-code\">Download the Pieces for VS Code Extension today!</a>",
    "lastModified": "2025-06-04T17:24:58.248Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code/copilot.md"
  },
  "/docs/extensions-plugins/visual-studio-code/drive/edit-update": {
    "slug": "/docs/extensions-plugins/visual-studio-code/drive/edit-update",
    "metadata": {
      "title": "Edit & Update",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Editing\n\nMaintaining an up-to-date library of code snippets in the <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for VS Code Extension</a> is made easy through seamless editing.\n\n## How to Edit Snippets\n\nTo modify an existing snippet, follow these steps:\n\n<Steps>\n  <Step title=\"Open the Pieces Drive\">\n    Open the Pieces Drive via the VS Code sidebar\n  </Step>\n\n  <Step title=\"Start Editing the Snippet\">\n    Locate a snippet you want to edit and select `Edit` from the quick menu or right click the snippet and select `Edit` from the menu\n  </Step>\n\n  <Step title=\"Edit your Snippet\">\n    Make your changes, then save using `⌘+s` (macOS) or `ctrl+s` (Windows/Linux)\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/edit_and_update/editing_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n<Callout type=\"tip\">\n  After saving, the editor will automatically return to the main snippet view, with your changes applied instantly.\n</Callout>\n\n## Actions from the Pieces Drive View\n\nWhen you left-click on a saved snippet in the Pieces Drive, you are presented with a tool menu filled with Pieces functionalities—some of which are related to the [Pieces Copilot](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot), and others which are designated [material management](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive) actions.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/right_click_options_from_drive.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Pieces Copilot Actions\n\nTo access the material management view, select one of the snippets from Pieces Drive. From this view, you can select a number of Copilot-centric actions—view them in the table below.\n\n***\n\n| `Add to Copilot Context` | Adds the snippet to the context of your existing Copilot Chat conversation.                                         |\n| ------------------------ | ------------------------------------------------------------------------------------------------------------------- |\n| `Ask Copilot`            | Triggers the input modal and lets you type a prompt directly into the field without changing your active file view. |\n| `Insert at Cursor`       | Inserts the code snippet at the point of your cursor inside your active file.                                       |\n| `Shareable Links`        | Shows shareable links that have been generated for that snippet, if applicable.                                     |\n\n***\n\n### Material Management Actions\n\nBelow the Pieces Copilot actions, you can easily change a snippet’s name, description, classification, and other enriched metadata—view them in the table below.\n\n***\n\n| `Annotations`            | Add, adjust or delete annotations for the snippet.                                          |\n| ------------------------ | ------------------------------------------------------------------------------------------- |\n| `Related Links`          | Add or remove links to the snippet’s metadata.                                              |\n| `Tags`                   | Add or remove tags to the snippet’s metadata.                                               |\n| `Reclassify`             | Set your own custom snippet classification.                                                 |\n| `Edit Selected Material` | Edit the content of the snippet.                                                            |\n| `Rename`                 | Change the name (title) of the snippet as it appears in your repository of saved materials. |\n| `Delete`                 | Delete the snippet.                                                                         |\n\n***\n\n## Additional Tools while Editing\n\n*Layers upon layers of functionality*—that’s the goal of all Pieces for Developers plugins and extensions.\n\nWhen you edit a snippet (by locating it in the Pieces Drive menu and clicking `Edit`), every single bit of Pieces functionality is available to you, even though you are in a view that’s removed from your main file.\n\nInstead, the `Edit` view *becomes* your main file, so you can [generate code comments, debug, add it to context, and more.](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot)\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/edit_and_update/comments_inside_editing_snippet_view.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:58.295Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code/drive/edit-update.md"
  },
  "/docs/extensions-plugins/visual-studio-code/drive/save-snippets": {
    "slug": "/docs/extensions-plugins/visual-studio-code/drive/save-snippets",
    "metadata": {
      "title": "Saving Materials",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Saving Code Snippets to Pieces Drive\n\nSaving developer materials, like snippets of boilerplate code, is a great way to create a collection of useful code in your Pieces Drive.\n\nThis helps you save time when writing generic code that you've written in different forms before. The Pieces for VS Code Extension has a *Save Materials* feature to help you do exactly that.\n\nYou can use this feature to save all kinds of useful code materials, like:\n\n* API endpoint definitions\n\n* Utility functions or commonly used helper methods\n\n* Code templates for starting new modules\n\n* Reusable logic for error handling or authentication\n\n## How to Save Materials\n\nThere are three ways to save code with the Pieces for VS Code Extension—through the right-click menu, by saving with hotkeys, or through the Pieces Copilot Chat view.\n\n### via Right-Click Menu\n\nTo capture useful code snippets and save them to your Pieces Drive via the right-click menu:\n\n<Steps>\n  <Step title=\"Choose your Snippet\">\n    Highlight the code you want to save\n  </Step>\n\n  <Step title=\"Open the Pieces Menu\">\n    Right-click on the highlighted code and hover on the `Pieces` option\n  </Step>\n\n  <Step title=\"Save your Snippet\">\n    Select either `Save Current Selection to Pieces` or `Save Active File to Pieces`\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/saving_snippets/right_click_save_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nThis will trigger a success message in the bottom-right corner of your screen to let you know that the save was successful.\n\n### via Keyboard Shortcuts\n\nIf you’re a developer who avoids using their cursor as much as possible, you can instantly save your selected code using keyboard shortcuts.\n\nTo do this:\n\n<Steps>\n  <Step title=\"Choose your Snippet\">\n    Highlight the code you want to save\n  </Step>\n\n  <Step title=\"Save your Snippet\">\n    Use the `⌘+shift+v` (macOS) or `ctrl+shift+v` (Windows/Linux) shortcut\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/saving_snippets/keybind_save_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### via Copilot Chat\n\nYou can take any code block existing in your Copilot Chat and click `Save to Pieces`—like code generated by Pieces Copilot, code blocks you added as context that weren’t saved as individual snippets, and any other kind of code.\n\nTo do so, click the `Save to Pieces` button on any code block within the Copilot Chat view.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734128918736/49e96fb8-7d25-4f16-96ce-16ed9e3fd6b9.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Saving Active Files to Pieces\n\nIf you want to save a *really* big snippet, try saving your entire file directly to Pieces Drive.\n\nTo save your active file:\n\n<Steps>\n  <Step title=\"Right-Click the File\">\n    Right-click within your active file\n  </Step>\n\n  <Step title=\"Locate Pieces Options\">\n    Hover over the `Pieces` item\n  </Step>\n\n  <Step title=\"Save the File\">\n    Click `Save Active File to Pieces`\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/saving_snippets/save_active_file_to_pieces.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nThere are plenty of scenarios in which saving an entire file to your Pieces Drive is ideal, such as to:\n\n* **Preserve Complex Codebases**: Save larger, cohesive files like utility libraries, configuration files, or classes to ensure you capture all interconnected functionality in one place.\n\n* **Reuse in Future Projects**: Easily repurpose full files in new projects without reconstructing smaller snippets.\n\n* **Keep Independent Files Versioned**: Maintain standalone files, such as scripts or tools, as independent backups or versions outside of source control.\n\n## What’s Stored When You Save a Snippet\n\nWhen you save a snippet to your Pieces Drive, it’s more than just the code that gets stored.\n\nThe Pieces Copilot captures:\n\n* `Type`: Categorizes the snippet (e.g., API call, function, class) with it’s code language.\n\n* `Associated Tags`: Keywords associated with the snippet for easier searching.\n\n* `Custom Description`**:** Specifies precisely which *lines* (in numerical form) the snippet is from, as well as the file from which it originated—very useful for mind-mapping.\n\n* `Smart Description`: AI-generated descriptions that summarize the snippet’s purpose and function.\n\n* `Suggested Searches`: Related searches that help you discover similar snippets.\n\n* `Related Links`: References to documentation, code repositories, or other relevant resources.\n\n* `Related People`: Associated collaborators or contributors.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732741621504/140ab238-3a62-45cd-b454-a56e2dca5d0c.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nAdditionally, the Pieces Copilot **scans saved snippets for sensitive information**, such as API keys, passwords, or authentication tokens, to ensure no confidential data is accidentally stored.\n\n## Where Saved Snippets Live\n\nSaved snippets are stored locally on your device, ensuring accessibility even when offline. This also means that any Pieces for Developers extension or plugin—or even the Pieces Desktop App—has constant, up-to-date access to your saved materials with Pieces Drive.\n\nThere are two ways to find your saved snippets—via the `Pieces Drive` menu, or with the `Pieces: Search Pieces` feature.\n\n[Read more about how to find your saved snippets here.](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/search-reuse#finding-saved-snippets)",
    "lastModified": "2025-06-04T17:24:58.303Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code/drive/save-snippets.md"
  },
  "/docs/extensions-plugins/visual-studio-code/drive/search-reuse": {
    "slug": "/docs/extensions-plugins/visual-studio-code/drive/search-reuse",
    "metadata": {
      "title": "Search & Reuse",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Locate Materials in Pieces Drive\n\nTo locate your snippets, open a file in VS Code and use one of two methods—searching with the Pieces Drive menu, or with keyboard shortcuts.\n\n## How to Search for Saved Materials\n\nYou can search for snippets of code and other materials saved to your Pieces Drive right from within the editor. You can also apply search filters to help narrow down results.\n\n### via Pieces Drive\n\nIf you want to access your saved snippets directly within the VS Code editor, you can:\n\n<Steps>\n  <Step title=\"Locate Pieces Drive\">\n    Open the `Pieces Drive` from the VS Code sidebar\n  </Step>\n\n  <Step title=\"Filter, Search, and Explore\">\n    Once the `Pieces Drive` is open, you have access to a wide range of options that allow you sort through your snippets\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/opening_a_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### via Search Feature\n\nYou can also use `Pieces: Search Pieces` to find specific snippets—this is where you’ll **enter a specific query**, which is useful when you know exactly what you want:\n\n<Steps>\n  <Step title=\"Open the Command Palette\">\n    Open the **Command Palette** using `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux)\n  </Step>\n\n  <Step title=\"Enter the Command\">\n    Type `Pieces: Search Pieces`\n  </Step>\n\n  <Step title=\"Enter your Search Query\">\n    Enter your search query, **scrolling or using the arrow keys** to navigate the list\n  </Step>\n\n  <Step title=\"Choose your Desired Snippet\">\n    Press `return` (macOS) or `enter` (Windows/Linux) on your desired snippet to open it and it’s saved metadata in a new tab\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/search_snippets.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n<Callout type=\"tip\">\n  You can search with tags, descriptions, names, types, or even languages themselves to narrow down your search.\n</Callout>\n\n## Adding Filters to your Search\n\nSaved Snippets being viewed in the Pieces Drive can be filtered down by snippet tags, coding languages, and snippet titles.\n\nTo filter through your snippets:\n\n<Steps>\n  <Step title=\"Open Pieces Drive\">\n    Open `Pieces Drive` via the VS Code sidebar\n  </Step>\n\n  <Step title=\"Select the Search Bar\">\n    Select the search bar at the top of the Pieces Drive\n  </Step>\n\n  <Step title=\"Choose the Filter Option\">\n    After clicking on the search bar, you’ll have the option to quick filter by `Titles`, `Annotations`, or `Content`\n  </Step>\n\n  <Step title=\"Enter your Query\">\n    Using the filter, enter a search query in the search bar\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/filtering_snippets.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nWhen you’ve finished entering your filters, the Pieces Explorer will only display the snippets that match your filters. You can clear this by clicking the siphon icon with an `x` over it.\n\n<Callout type=\"tip\">\n  For any tags you don’t want to set, you can leave them blank by just pressing `return` (macOS) or `enter` (Windows/Linux).\n</Callout>\n\n## Viewing and Reusing Saved Snippets\n\n<a target=\"_blank\" href=\"https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/save-snippets\">Saved snippets</a> can be viewed alongside their saved metadata by opening up them up directly from the Pieces Drive or by clicking on them once they’ve been found using the `Pieces: Search Pieces` function from the dropdown list. You can also right click on the editor and select `Search Pieces` in the right-click options.\n\nAfter opening a snippet, the **snippet in markdown preview mode** opens up in a separate window.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/opened_markdown_snippet.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nFrom this view, you can then highlight the code and right-click to copy the code to your clipboard, or use the `⌘+c` (macOS) or `ctrl+c` (Windows/Linux) shortcut.\n\n### via Right-Click Menu\n\nThe Pieces for VS Code Extension provides a host of actions that appear once you right-click a snippet from within the Pieces Drive menu.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/right_click_menu_drive.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThere are a number of available material management and Pieces Copilot-related actions available on this menu, [which you can read more about here](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/edit-update#actions-from-the-editing-view)—or view an expanded table of them below.\n\n### via Pieces Sidebar\n\nYou can view snippets by opening up the Pieces Drive sidebar in your VS Code by clicking the Pieces Drive icon on the left-hand side of your screen.\n\nOnce in the sidebar, you can insert a snippet and place it exactly where you want it in your code by clicking `Insert at `Cursor.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/insert_at_cursor.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can also right-click a snippet and select `Copy` to copy it to the clipboard, allowing you to paste it anywhere you need.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/search_and_reuse/drive_copy_to_clipboard.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Previewing Saved Snippets\n\nWhile using the `Pieces: Search Pieces` function, you can click on one of the snippets on the dropdown list to view it’s code before selecting the snippet.\n\n***\n\n| `Add to Copilot Context` | `Ask Copilot`     | `Copy`        |\n| ------------------------ | ----------------- | ------------- |\n| `Insert at Cursor`       | `Shareable Links` | `Annotations` |\n| `Links`                  | `Tags`            | `Reclassify`  |\n| `Edit`                   | `Rename`          | `Delete`      |\n\n***\n\n## Real-Time Snippet Streaming\n\nEvery product within the Pieces Suite utilizes <a target=\"_blank\" href=\"https://docs.pieces.app/products/core-dependencies/pieces-os\">PiecesOS</a> to gather information regarding the context of your snippets.\n\nWhen you modify a snippet in the <a target=\"_blank\" href=\"https://docs.pieces.app/products/desktop\">Pieces for Developers Desktop App</a>—like changing its name or description, tags, or any other metadata—those updates are automatically shown in your Pieces Drive without the need for refreshing.\n\n<Callout type=\"tip\">\n  If your snippets aren’t updating immediately, refer to the [troubleshooting guide](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/troubleshooting) for instructions on how to refresh your snippet list.\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.308Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code/drive/search-reuse.md"
  },
  "/docs/extensions-plugins/visual-studio-code/drive/sharing": {
    "slug": "/docs/extensions-plugins/visual-studio-code/drive/sharing",
    "metadata": {
      "title": "Sharing",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## How to Share a Saved Snippet\n\nThe `Share` feature in the <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for VS Code Extension</a> makes sharing your saved code snippets with colleagues, teams, or the wider development community easy.\n\nThere are 3 ways to share saved snippets—by using the tool menu, keyboard shortcuts, or by right-clicking on previously-saved snippets within the Pieces Drive.\n\n<Callout type=\"tip\">\n  This link can easily be shared via email, Discord, Slack, or other platforms. The recipient can view the snippet **without needing to have a Pieces account.**\n</Callout>\n\n### via Right-Click Menu\n\nShareable Pieces links for your code snippets can be generated by right-clicking a portion of selected code, hovering over the `Pieces` item in the pop-up menu, then clicking `Share`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/sharing/share_right_click.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Keyboard Shortcut\n\nYou can share snippets using the `⌘+shift+i` (macOS) or `ctrl+shift+i` (Windows/Linux) after highlighting your desired lines of code in your active file.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/sharing/generating_snippet_shortcuts.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Generating Links for Existing Snippets\n\nIf you save a material, but didn’t generate a shareable link at the time—no problem. You can still generate a shareable link (or copy, regenerate or delete the existing link) from the Pieces Drive.\n\n<Steps>\n  <Step title=\"Open the Pieces Drive\">\n    Open the **Pieces Drive** via the Pieces Drive icon in the VS Code sidebar\n  </Step>\n\n  <Step title=\"Share the Snippet\">\n    After finding the snippet you want to share, right-click it and choose `Generate Shareable Link` from the options.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/sharing/generate_shareable_link.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n\n  <Step title=\"Wait for the Link and Copy\">\n    After generating the link, a new modal will appear, wait for the snippet to be shared with an automatically generated link or manually copy the link from the modal\n  </Step>\n</Steps>\n\nIf you have generated a link for that snippet previously, the `More Actions` menu options will automatically adjust to include 3 new actions:\n\n* `Open in Browser`: Opens the existing shareable link in your desired browser.\n\n* `Refresh Link`: Regenerates the link—this is important if a snippet has been edited or updated, as a new link will be required to contain the new changes.\n\n* `Revoke Link`: Revokes the shareable link so that anyone with the existing link to that snippet will be barred from future access.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/sharing/generate_share_link_drive.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Enriched Sharing Experience\n\nWhen you `Share` a snippet, it’s not just the code that’s included. The snippet comes with additional metadata to provide context—[you can read more about that here.](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/save-snippets#whats-stored-when-you-save-a-snippet)\n\n* `Snippet Type`: Identify the language or framework, such as Python or React.\n\n* `Tags`: Useful keywords for quick categorization.\n\n* `Description`: A short summary of what the snippet does.\n\n* `Related Links`: Helpful resources or documentation tied to the snippet.\n\n* `Author Information`: A record of who created the snippet.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731514684555/707b0769-5b68-448c-811b-a44d2414a10d.png?auto=compress,format&format=webp\" alt=\"\" align=\"left\" fullwidth=\"true\" />\n\n## What Information Gets Shared\n\nWhen a snippet is saved to the Pieces Cloud, the code is [enriched with valuable information](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/save-snippets#whats-stored-when-you-save-a-snippet) such as related people, links, annotations, tags, and an automatically-generated description.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731623145740/ec60e89f-ac2f-4396-b6a8-ad94f57d9745.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Sensitive Information Watchdog\n\nThe `Share` feature does more than just allow you to effectively share snippets across your entire team and other communities, though.\n\nYou'll see a section titled **Sensitive Information:**\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732743695009/a44bf8b1-67b7-4db0-a6af-87798c8df9ed.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nOur in-house ML model scans snippets for potentially sensitive information, like API keys or passwords, and alerts you so that you can make an informed decision before sharing the snippet.  \n\nThe scan happens locally using on-device machine learning models **before the snippet is uploaded to the cloud** for sharing—that way, you can make an informed decision about sharing your code.",
    "lastModified": "2025-06-04T17:24:58.315Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code/drive/sharing.md"
  },
  "/docs/extensions-plugins/visual-studio-code/drive": {
    "slug": "/docs/extensions-plugins/visual-studio-code/drive",
    "metadata": {
      "title": "Pieces Drive",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Using Pieces Drive in VS Code\n\nThe <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for VS Code Extension</a> improves development productivity and time management by providing powerful features like [saving](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/save-snippets) and [reusing](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/search-reuse) saved materials, so your most important code is always available.\n\n## Use Cases & Examples\n\nLet’s take a look at some examples:\n\n***\n\n| `Logging Utilities`    | A helper function for detailed server-side logging with timestamps and error levels.                        | Speeds up debugging and monitoring by inserting reliable logging methods.   |\n| ---------------------- | ----------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------- |\n| `Validation Functions` | A function to validate JSON payloads or form inputs before submission.                                      | Ensures data integrity with reusable, thoroughly tested validation logic.   |\n| `API Integration Code` | Prewritten `axios` code for making GET or POST requests, complete with error handling and response parsing. | Reduces repetitive work when integrating RESTful APIs or GraphQL endpoints. |\n| `Component Templates`  | A React functional component template with basic hooks and styling setup.                                   | Provides a consistent starting point for building new components.           |\n| `Database Queries`     | A MongoDB query to retrieve active user data filtered by last login.                                        | Streamlines database tasks by reusing optimized query patterns.             |\n\n***\n\n## Boosting Productivity with Snippet Management\n\nWith the Pieces for VS Code Extension, you can improve your productivity, standardize code, and maintain clarity across teams and projects by leveraging prewritten code.\n\nThe Pieces for VS Code Extension connects you with your development environment, so you can focus on what matters—building great software—while empowering you with tools for efficient code reuse.\n\n* **Improved Productivity:** Focus on solving new problems rather than resolving old ones.\n\n* **Contextual Awareness:** Snippets enriched with metadata, descriptions, and links to relevant searches help you remember the origin, purpose, and ideal usage scenarios for each piece of code.\n\n* **Code Standardization:** Sharing best practices and reusable components helps developers ensure uniform coding practices and conventions are available across different teams and projects.\n\nBy using the Pieces for VS Code Extension you can capture and manage these snippets in Pieces Drive to streamline daily tasks and enhance your workflow in several ways:\n\n### Save & Organize\n\nEasily [save a function, script, or piece of boilerplate](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/save-snippets) right from the tool menu or with a keyboard shortcut.\n\nNot only are these snippets saved to your personal Pieces Drive, but they’re enriched with context, metadata, and tags for easy retrieval.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732740557545/d30c5f19-ca19-454a-8e1c-d0e9db4b95f5.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nTo do this save a code snippet, right-click, and then hover on `Pieces` and choose `Save Current Selection to Pieces`—or you can use the keyboard shortcut by using `⌘+shift+’` (macOS) or `ctrl+shift+v` (Windows/Linux).\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/MAIN_using_snippets/keybind_save_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Search & Reuse\n\nYou can directly [search through your collection of saved materials](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/search-reuse) from within VS Code, allowing you to quickly find snippets by keyword or context.\n\nTo search, you can access the `Search Pieces` action in to ways—either from the command palette or with the right-click menu.\n\nIn both scenarios, you then enter your query into the dropdown menu, and press `return`(macOS) or `enter` (Windows/Linux).\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/MAIN_using_snippets/show_new_pieces_drive.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nAny related snippets will appear in the results list. From there, you can press `return`(macOS) or `enter` (Windows/Linux) to view your snippet, complete with all its saved context, rendered neatly inside the editor.\n\n### Edit & Update\n\nYour snippets can evolve as your project grows as you adapt to changing project requirements, or when you move onto new files within your codebase.\n\nIn the `Saved Materials` section of the **Pieces Drive**, you can [open your saved snippets or update the code](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/edit-update#how-to-edit-snippets) to meet current needs, and save the updated version back to Pieces.\n\nThis ensures that your library stays current, relevant, and aligned with your project’s progress—plus, making your materials more efficient only helps you in the long run.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/using_snippets/MAIN_using_snippets/right_click_menu_drive.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Sharing\n\n[Share your snippets directly with team members](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/sharing#how-to-share-a-saved-snippet), even if they don’t use Pieces.\n\n<Callout type=\"tip\">\n  You can send a shareable link containing your code snippet to anyone, even if they don’t use Pieces or have a Pieces for Developers account.\n</Callout>\n\nSharing bits of code you find useful can remove productivity blockers if co-developer is unfamiliar with the project, or if they’re a junior.\n\nFor example, a teammate working on server monitoring can use your shared script to automate daily tasks without additional setup.\n\nThese shared links also include their [original enriched metadata](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/save-snippets#whats-stored-when-you-save-a-snippet), like tags, descriptions, and other information.\n\nTo share a snippet in VS Code, you can either highlight some lines of code, right-click, hover over `Pieces` and click `Share` or use keyboard shortcuts—`⌘+shift+i` (macOS) or `ctrl+shift+i` (Windows/Linux).\n\nThis creates a link you can share with teammates, ensuring easy access to your reusable code.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732741148257/c227792e-1abb-432e-9b46-15a486403994.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Use Cases\n\nWith Pieces for VS Code Extension, your snippets become a robust library of reusable code that you can organize, search, edit, and share across projects.\n\nHere are some examples of how you can use them:\n\n### Reusable Scheduling Functions\n\nImagine you’re frequently working on projects that involve scheduling tasks at regular intervals.\n\nInstead of rewriting the same logic for each new project, you can [save an evergreen snippet to your Pieces Drive.](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/save-snippets#saving-snippets)\n\nThis allows you to reuse a well-crafted scheduling function across multiple applications that’s useful in a variety of scenarios:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\n// A reusable function to schedule tasks at a specified interval\nfunc scheduleTask(interval time.Duration, task func()) {\n\tticker := time.NewTicker(interval)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\ttask()\n\t\t}\n\t}\n}\n```\n\n### File System Monitoring\n\nIf you frequently work on projects that involve monitoring file system changes, you can [save a helpful snippet to your Pieces Drive](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/save-snippets#saving-snippets) that does exactly that, using generic and reusable naming conventions:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/fsnotify/fsnotify\"\n)\n\n// A reusable function to monitor file system changes\nfunc watchFileChanges(path string) {\n\twatcher, err := fsnotify.NewWatcher()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer watcher.Close()\n\n\terr = watcher.Add(path)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfor {\n\t\tselect {\n\t\tcase event := <-watcher.Events:\n\t\t\tif event.Op&fsnotify.Write == fsnotify.Write {\n\t\t\t\tfmt.Println(\"Modified file:\", event.Name)\n\t\t\t}\n\t\tcase err := <-watcher.Errors:\n\t\t\tfmt.Println(\"Error:\", err)\n\t\t}\n\t}\n}\n```\n\n## **Additional Snippet Scenarios**\n\nRead up on some additional scenarios and use cases for Pieces Drive and see how the <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for VS Code Extension</a> could benefit you and your workflow.\n\n***\n\n<AccordionGroup>\n  <Accordion title=\"Testing Framework Templates\">\n    Streamline testing by saving snippets for your frequently used testing functions or unit test templates.\n  </Accordion>\n\n  <Accordion title=\"Command-Line Utilities\">\n    Save command-line instructions as snippets to quickly retrieve deployment commands, Docker setups, and other essential terminal operations.\n  </Accordion>\n\n  <Accordion title=\"Error Handling & Logging\">\n    You can also save common logging functions or error-handling snippets that can be reused across applications, promoting consistent error management.\n  </Accordion>\n\n  <Accordion title=\"Quickly Create New Projects\">\n    Import saved setup scripts, configuration files, and commonly used dependencies to speed up project setup and ensure consistency across new projects.\n  </Accordion>\n</AccordionGroup>\n\n***\n\n<a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Download the Pieces for VS Code Extension today!</a>",
    "lastModified": "2025-06-04T17:24:58.285Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code/drive.md"
  },
  "/docs/extensions-plugins/visual-studio-code/forks": {
    "slug": "/docs/extensions-plugins/visual-studio-code/forks",
    "metadata": {
      "title": "VS Code Forks",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Pieces for Cursor, Windsurf & Trae\n\nDevelopers love Visual Studio Code because it’s open-source and flexible.\n\nSince this IDE is open-source, the extensions available for the base code editor (VS Code) can also be found in the extension marketplace pages for these VS Code forked IDEs.\n\n### What Is A VS Code Fork?\n\nA **VS Code fork** is an independent IDE that starts with Microsoft’s MIT-licensed VS Code code-base, then layers on its own features (often AI tooling or workflow tweaks).\n\nBecause the underlying extension API is the same, the [Pieces for VS Code Extension](https://docs.pieces.app/products/extensions-plugins/visual-studio-code) installs and runs in these forks exactly as it does in stock VS Code.\n\n## Installation for Supported Forks\n\nFollow the steps below to get started with the Pieces for VS Code Extension in Cursor, Windsurf, or Trae.\n\n### Cursor\n\nCursor layers ChatGPT-style assistance and refactoring tools on top of VS Code.\n\nYou can download installers for macOS, Windows or Linux from the <a target=\"_blank\" href=\"https://www.cursor.com/downloads\">official site.</a>\n\n1. Open Cursor.\n\n2. Press `ctrl+shift+x` (Windows/Linux) or `cmd+shift+x` (macOS) to open the **Extensions** marketplace.\n\n3. Search *“Pieces for VS Code”* and click `Install`.\n\n4. Reload Cursor when prompted and make sure PiecesOS is running.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/vs_code_forks/cursor_installation.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Windsurf\n\nMarketed as the first “agentic IDE,” Windsurf ships Codeium’s AI features in a standalone editor.\n\n<Callout type=\"info\">\n  *Windsurf* was formerly known as the *Codeium Editor.*\n</Callout>\n\nGet the latest build for your OS from the <a target=\"_blank\" href=\"https://windsurf.com/download\">Windsurf download page</a>.\n\n1. Open Windsurf.\n\n2. Press `ctrl+shift+x` (Windows/Linux) or `cmd+shift+x` (macOS) to open the **Extensions** marketplace.\n\n3. Search *“Pieces for VS Code”* and click `Install`.\n\n4. Reload Windsurf when prompted and make sure PiecesOS is running.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/vs_code_forks/windsurf_installation.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Trae\n\nTrae focuses on collaborative AI coding and performance boosts. Download packages for macOS, Windows or Linux from <a target=\"_blank\" href=\"https://www.trae.ai/download\">Trae’s download page.</a>\n\n<Callout type=\"info\">\n  *Trae* was previously known as *MarsCode.*\n</Callout>\n\n1. Open Trae.\n\n2. Press `ctrl+shift+x` (Windows/Linux) or `cmd+shift+x` (macOS) to open the **Extensions** marketplace.\n\n3. Search *“Pieces for VS Code”* and click `Install`.\n\n4. Reload Trae when prompted and make sure PiecesOS is running.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/vs_code_forks/trae_installation.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n## Updating\n\nAuto-update is enabled by default—so when there’s an update available for download, or an update has finished downloading, you’ll see a pop-up modal in the bottom-right corner of your IDE.\n\n<Callout type=\"tip\">\n  Pieces checks for new versions automatically in all three IDEs.\n</Callout>\n\nIf you want to force an update, search *“Extensions: Check for Updates”* in the command palette, which you can access by using the `ctrl+shift+p` (Windows/Linux) or `cmd+shift+p` (macOS) shortcut.\n\n## Connecting to Pieces Cloud\n\nSign in from the **Pieces** sidebar to enable encrypted backup, shareable links and cross-device sync.\n\nYou can work entirely offline, utilizing the local LLMs provided by PiecesOS inside of the Pieces for VS Code Extension.\n\nHowever, it **provides additional features** like **data backups, shareable links, and more.**\n\n## Uninstallation\n\n1. Press `ctrl+shift+x` (Windows/Linux) or `cmd+shift+x` (macOS) to open the **Extensions** marketplace.\n\n2. Locate **Pieces for VS Code**, then on the extension’s page, click `Uninstall` to remove the extension.\n\n<Callout type=\"alert\">\n  Restart your VS Code IDE after removing the extension to complete the uninstallation process.\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.319Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code/forks.md"
  },
  "/docs/extensions-plugins/visual-studio-code/get-started": {
    "slug": "/docs/extensions-plugins/visual-studio-code/get-started",
    "metadata": {
      "title": "Get Started",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Prerequisites\n\nBefore installation, you'll need:\n\n* **PiecesOS:** The main engine that powers Pieces for VS Code functionality. [Learn more about PiecesOS.](https://docs.pieces.app/products/core-dependencies/pieces-os)\n\n* **VS Code:** Visual Studio Code should already be installed on your development machine.\n\n<Callout type=\"alert\">\n  PiecesOS must be installed to enable the Pieces for VS Code Extension. For enhanced functionality, we also recommend the Pieces for Developers Desktop App.\n</Callout>\n\n## Setting Up PiecesOS\n\nTo use the <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for VS Code Extension</a>, you must install <a target=\"_blank\" href=\"https://docs.pieces.app/products/core-dependencies/pieces-os\">PiecesOS</a> on your operating system.\n\nFollow the specific setup steps below:\n\n<get-started-install />\n\n## Installation\n\n1. Open VS Code and navigate to the **Extensions** view, then search for **Pieces for VS Code** and click `Install`\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732735809045/38bfb971-66e8-4789-8a9d-7dd153d98a30.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"info\">\n  Alternatively, download the .VSIX installer from the <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">VS Code Marketplace</a> and install it manually.\n</Callout>\n\n2. Restart VS Code after installing the extension to complete the setup.\n\n3. Enable **Pieces Tool Windows** by going to `View`, then `Tool Windows`, and enable whichever Pieces Windows that best suit your workflow\n\n### Updating\n\nThe <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for VS Code Extension</a> will automatically update when a new version is available.\n\n<Callout type=\"tip\">\n  The `Auto Update` setting is enabled by default.\n</Callout>\n\n### Pieces Cloud\n\nConnecting to the Pieces Cloud is optional. However, it **provides additional features** like **data backups, shareable links, and more.** You can enjoy the main functionalities of Pieces without an account.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/updated_vs_screenshots/main/connect_to_cloud.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nDisconnecting from the Pieces Cloud logs you out of your Pieces account.\n\nTo disconnect from the Pieces Cloud:\n\n<Steps>\n  <Step title=\"Open the Command Palette\">\n    Open the command palette in VS Code with `⌘+shift+p` (macOS) or `ctrl+shift+p` (Windows/Linux)\n  </Step>\n\n  <Step title=\"Disconnect from the Cloud\">\n    Enter `Pieces: Disconnect from Pieces Cloud` and choose the option\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/get_started/disconnect_from_pieces_cloud.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Onboarding\n\nThe Pieces for VS Code extension includes an interactive walkthrough that shows the different steps in one panel. This onboarding page will teach you how to save, view, and use saved materials and fully utilize Pieces for Visual Studio Code.\n\n### Save Your First Material\n\nWhen you click `Save Your First Material`, Pieces automatically opens the [Pieces Drive](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive) and stores a sample snippet to show you how everything works.\n\nYou’ll see that snippet immediately in the Saved Materials list, giving you a quick demonstration of how Pieces captures items and organizes themes.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/get_started/opening_example_snippet.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### View Your Saved Materials\n\nBy clicking `View Your Saved Materials`, Pieces Drive will open up to your **Saved Materials**—showing you any saved snippets you had before and the newly generated saved snippet.\n\n### Check Out the Pieces Copilot\n\nClicking `Open Your Copilot` triggers the Pieces Copilot side panel, as shown in the screenshots. In the Pieces Copilot, you’ll find **suggested prompts**, options to set context from folders or files, and quick links to your saved materials.\n\nOnce you open the Copilot, the onboarding step is marked as complete. You're ready to ask [questions about your code](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/chat), [document it](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/documenting-code), or [refactor a selected material](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/refactoring)—all within the VS Code interface.\n\n### Ask Copilot with Your Material\n\nWhen you click `Ask Copilot about Your Material`, Pieces automatically adds the newly saved snippet to the Copilot chat with a sample prompt (like “What does this code do?”). Press `Enter` to send your snippet to the Copilot, and you’ll immediately receive an explanation or suggested improvements.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/get_started/ask_about_material.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Supercharge Your Workflow\n\nClicking `Pieces Documentation` opens our guide with advanced tips, setup instructions, and best practices. Choosing `View All Steps` lets you revisit any onboarding step at any time.\n\nThe right side includes extra resources and helpful videos, including community channels and tutorials, to help you master Pieces and maintain a smooth development flow.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/get_started/supercharge_workflow.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"info\">\n  If you need extra support, you can find [helpful resources here](https://docs.pieces.app/products/support).\n</Callout>\n\n## Uninstallation\n\nTo uninstall the Pieces for VS Code Extension, press `⌘+shift+x` (macOS) or `ctrl+shift+x` (Windows/Linux) to open the extensions tab. Then, search for the `Pieces for VS Code` extension and click `Uninstall`.\n\n<Callout type=\"alert\">\n  Restart your VS Code IDE after removing the extension to complete the uninstallation process.\n</Callout>\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732735910690/24eb8b81-05cd-4737-8789-10312688d8db.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:58.322Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code/get-started.md"
  },
  "/docs/extensions-plugins/visual-studio-code/troubleshooting": {
    "slug": "/docs/extensions-plugins/visual-studio-code/troubleshooting",
    "metadata": {
      "title": "Troubleshooting",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Having Trouble with Pieces for VS Code?\n\nIf the Pieces for VS Code Extension isn’t working as expected, try the following troubleshooting steps.\n\n<on-device-storage />\n\n### Download the Latest Version(s)\n\nFirst, confirm you’re using the latest version of the <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for VS Code Extension</a> from the Visual Studio Marketplace and the latest version of <a target=\"_blank\" href=\"https://docs.pieces.app/products/core-dependencies/pieces-os\">PiecesOS</a>.\n\nThe minimum functioning version permitted is currently **10.1.12.**\n\n### Restart VS Code After Updates\n\nIf you’ve recently installed or updated PiecesOS or the Pieces for VS Code Extension, restart the IDE.\n\nContact the [Pieces support team](https://getpieces.typeform.com/to/mCjBSIjF#docs-vscode) if the issue still persists.\n\n### Pieces-Specific Fixes\n\nVerify the health and status of PiecesOS and check off the boxes below if you are experiencing issues with Pieces Drive or Pieces Copilot within the Pieces for VS Code Extension.\n\n### Check PiecesOS Status\n\nCheck to make sure PiecesOS is running. PiecesOS must be running for the Pieces for VS Code Extension to work.\n\n### Refreshing Copilot Chats\n\nYou may need to restart or refresh the Pieces Copilot chat, especially if you’re using a cloud LLM and disconnect from WiFi.\n\nThese scenarios can occasionally cause the LLM to ‘hang’—to appear as if generating a response but eventually timing out, entering an infinite response loop, or experiencing other issues.\n\nTo do this, click the **three vertical dots** in the top-right corner of your Copilot Chat window, and click `Refresh`.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732750665281/0ed8f785-aa34-4285-8b68-022aff96dda9.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:58.328Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code/troubleshooting.md"
  },
  "/docs/extensions-plugins/visual-studio-code": {
    "slug": "/docs/extensions-plugins/visual-studio-code",
    "metadata": {
      "title": "Visual Studio Code Extension",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732641483589/fe76a57c-5b66-48c4-8f1e-375f03883073.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Pieces for Visual Studio Code\n\nThe <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for VS Code Extension</a> is a versatile tool that integrates seamlessly with the VS Code editor and IDEs based on VS Code, such as Cursor.\n\nIt provides users with a streamlined way to manage and interact with saved code snippets and harness the capabilities of the AI-powered [Pieces Copilot](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot) directly within their coding environment.\n\n* [Pieces Copilot](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot): Engage in AI-driven conversations to enhance productivity by generating code, adding comments, troubleshooting, and more—all contextualized to your project by adding files and folders as context, with or without the powerful Long-Term Memory Engine (LTM).\n\n* [Pieces Drive](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive): Effortlessly save, locate, and share frequently used code snippets to your Pieces Drive—Making it easier to organize your work, quickly access essential pieces of code, and collaborate effectively with others.\n\n<CardGroup cols={2}>\n  <Card title=\"Getting Started\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732641306052/bf1c7729-8524-4adc-87af-62f098a42dd0.png\">\n    Follow [these instructions](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/get-started) to download and install the Pieces for VS Code Extension.\n  </Card>\n\n  <Card title=\"Support & Troubleshooting\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732641309569/1515d9f1-50bd-49de-b536-1fc3a8fb882b.png\">\n    Explore [troubleshooting options](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/troubleshooting), navigate to our [support page](https://docs.pieces.app/products/support), or <a target=\"_blank\" href=\"https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr\">directly book a call</a> with our engineers.\n  </Card>\n</CardGroup>\n\n<guides-overview-card />\n\nThis extension is designed to offer **two main pillars of functionality** for developers working in the Visual Studio Code environment—Pieces Copilot and Pieces Drive.\n\n## Enhanced AI Assistance\n\nThrough Pieces Copilot, developers can generate code solutions with [context-based AI conversations](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/chat), [add code comments](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/documenting-code), troubleshoot, and fix bugs inside VS Code.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/MAIN_vs_code_extension/new_right_click_menu.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Integrated Snippet Management\n\nWith Pieces Drive embedded in VS Code, developers can also [save, edit, search, and share their code snippets,](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive) boosting productivity by keeping reusable code accessible.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/updated_vs_screenshots/main/updated_no_saved_mats_view.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Using Pieces Copilot\n\nInside VS Code, the Pieces Copilot offers **several powerful actions** to enhance your coding workflow using generative AI.\n\nTo start, you can [initiate a conversation with the LLM of your choice](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/chat), providing as much context as needed by adding files, folders, or even entire repositories to the chat.\n\nTo explore options, select a portion of code, right-click, and hover over the `Pieces` item in the context menu.\n\nFrom here, you’ll find several quick actions, including:\n\n* `Modify Selection with Copilot`: Edit or transform the selected code to improve readability, optimize performance, or adapt it for other needs.\n\n* `Explain Selection with Copilot`: Get detailed explanations of the code’s functionality.\n\n* `Comment Selection with Copilot`: Generate inline comments to improve code clarity.\n\nYou can also use the `Ask Copilot About Active File` action to provide more context about your project. This helps Pieces Copilot **better understand your entire file** and **deliver more relevant suggestions.**\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/MAIN_vs_code_extension/hover_over_ask_active_file.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Using AI Quick Actions\n\nThe Pieces Copilot now comes packaged with **AI Quick Actions**, which are similar to CodeLens actions that sit above functions nearest your cursor.\n\nWith the new `Pieces: Comment` tool, the Pieces Copilot can [generate meaningful, insertable documentation](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/documenting-code) explaining your code’s purpose and function, and `Pieces: Explain` can quickly [generate a breakdown of some code logic](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/chat#via-pieces-explain) while simultaneously initiating a Copilot chat in the side window.\n\n***\n\n| `Pieces: Comment` | `Pieces: Explain` |\n| ----------------- | ----------------- |\n\n***\n\nTo get started, look for the **AI Quick Actions** buttons in your code. These buttons relocate depending on the location of the nearest visible functions. Then, click the documentation or explanation tool, depending on your use case.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/updated_vs_screenshots/main/pieces_quick_actions_add_comments.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Using Pieces Drive\n\nSaving and managing code snippets within Pieces Drive in the VS Code extension is **simple** and **efficient**.\n\nTo save a snippet, right-click the selected code, hover over `Pieces`, and choose `Save Current Selection to Pieces`. You can also use the `Share` option to share snippets with others.\n\n<Callout type=\"tip\">\n  Common snippet types include utility functions, API requests, and reusable code blocks.\n</Callout>\n\nWhen you save snippets to your Drive, Pieces enriches them with AI-generated metadata, such as [tags, titles, authorship details, and descriptions,](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/save-snippets#whats-stored-when-you-save-a-snippet) keeping everything organized and accessible.\n\nYou can find brief descriptions below of the different material management options available within the Pieces for VS Code Extension:\n\n* `Save Current Selection to Pieces`: Right-click a code block and [save it to Pieces Drive with AI-enriched metadata](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/save-snippets#whats-stored-when-you-save-a-snippet), ensuring easy access to frequently used snippets.\n\n* `Save Active File to Pieces`: [Save the entire active file to your repository](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/save-snippets#saving-active-files-to-pieces) in one action—ideal for preserving larger scripts or complete files.\n\n* `Ask Copilot About Selection`: [Start a conversation with Pieces Copilot](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/chat#pieces-ask-copilot-about-selection) to gain insights, explanations, or suggestions for improvement for the selected code.\n\n* `Ask Copilot About Active File`: [Analyze the active file with Pieces Copilot](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/copilot/chat#pieces-ask-about-active-file) to get insights and recommendations for your codebase.\n\n* `Share`: [Share snippets with your team](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/sharing) by creating distributable copies of reusable code.\n\n* `Search Pieces`: Quickly [find specific snippets in your repository](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/search-reuse#via-search-feature) using keywords, tags, or titles.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/MAIN_vs_code_extension/save_active_file_to_pieces.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Referencing & Reusing\n\nThe <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for VS Code Extension</a> offers powerful search tools to quickly find and access your saved snippets.\n\nYou can [perform broad searches or refine results using specific terms](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/search-reuse#via-search-feature) like function names, keywords, or tags, making it easy to locate the exact code you need.\n\nTo search, right-click, hover over `Pieces`, and select `Search Pieces`.\n\nThis opens a search bar where you can input queries to find your snippets. Once found, [snippets can be shared or copied](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/drive/search-reuse#viewing-and-reusing-saved-snippets) directly into your project.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/vs_code_extension_assets/MAIN_vs_code_extension/share_right_click.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Download the Extension\n\nReady to streamline your development? Download the <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for VS Code Extension</a> and follow our [installation guide to start.](https://docs.pieces.app/products/extensions-plugins/visual-studio-code/get-started)",
    "lastModified": "2025-06-04T17:24:58.229Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio-code.md"
  },
  "/docs/extensions-plugins/visual-studio": {
    "slug": "/docs/extensions-plugins/visual-studio",
    "metadata": {
      "title": "Visual Studio Extension",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/icons_banners/visual-studio.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Pieces for Visual Studio Extension\n\nThe <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for Visual Studio Extension</a> is a powerful and versatile tool that integrates seamlessly with the Visual Studio IDE, enhancing productivity and enabling efficient code management.\n\nIt provides users with a streamlined solution for managing and interacting with saved code snippets through the Pieces Drive, while leveraging the AI-powered capabilities of the Pieces Copilot—all directly within their development environment.\n\n* [Pieces Copilot](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot): Engage in AI-driven conversations to enhance productivity by generating code, adding comments, troubleshooting, and more—all contextualized to your project by adding files and folders as context, with or without the powerful Long-Term Memory Engine (LTM).\n\n* [Pieces Drive](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive): Effortlessly save, locate, and share frequently used code snippets to your Pieces Drive—Making it easier to organize your work, quickly access essential pieces of code, and collaborate effectively with others.\n\n<CardGroup cols={2}>\n  <Card title=\"Getting Started\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1738594724152/53e7f635-9e95-4d4b-8a8a-21f2b5a69f6b.png\">\n    Follow [these instructions](https://docs.pieces.app/products/extensions-plugins/visual-studio/get-started) to download and install the Pieces for Visual Studio IDE Extension.\n  </Card>\n\n  <Card title=\"Support & Troubleshooting\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1738291474469/028feb3e-99e7-433b-8ff8-300d49b22d14.webp\">\n    Explore [troubleshooting options](https://docs.pieces.app/products/extensions-plugins/visual-studio/troubleshooting), navigate to our [support page](https://docs.pieces.app/products/support), or <a target=\"_blank\" href=\"https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr\">directly book a call</a> with our engineers.\n  </Card>\n</CardGroup>\n\n<guides-overview-card />\n\nThis extension is designed to offer **two main pillars of functionality** for developers working in the Visual Studio IDE—Pieces Copilot and Pieces Drive.\n\n### AI Assistance with Pieces Copilot\n\nThrough Pieces Copilot, developers can generate code solutions with [context-based AI conversations](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/chat), [add code comments](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/documenting-code), <a target=\"_blank\" href=\"https://docs.pieces.app/products/extensions-plugins/visual-studio/troubleshooting\">troubleshoot</a>, and fix bugs inside Visual Studio.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/pieces_highlighted_showing_pieces_options.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Material Management with Pieces Drive\n\nWith Pieces Drive and PiecesOS built into Visual Studio, developers can [save](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/save-snippets), [edit](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/edit-update), [search](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/search-reuse), and [share](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/sharing) their code easily.\n\nThis feature allows developers to keep their favorite code in a personal, easy-to-access library. They can quickly review past work, find related authors and links with the extra details saved with each piece, and much more.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/snippet_saved_materials_open_in_sidebar.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Using Pieces Copilot\n\nInside Visual Studio, the Pieces Copilot offers **several powerful actions** to enhance your coding workflow using generative AI.\n\nTo begin, you can [initiate a conversation with the LLM of your choice](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/chat) by right-clicking and selecting the `Ask Copilot About Selection` or any of the available Copilot Chat options.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/right_click_asking_about_something.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nFor added context, you can also add specific files, folders or even entire repositories to the conversation so that the LLM utilized by Pieces Copilot has a comprehensive understanding of your project and the task at hand.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/add_folders_to_context.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can also access `Pieces: Explain / Modify / Comment Selection with Copilot` commands from the right-click menu to easily get a breakdown of the code’s logic, make changes such as adding error handling, or add comments to your code.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/hovering_explain.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Using AI Quick Actions\n\nThe Pieces Copilot comes packaged with **AI Quick Actions**, which are similar to CodeLens actions that sit above functions nearest to your cursor.\n\nThese Quick Actions are nested under `Pieces`, which automatically sits above applicable functions.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/nested_pieces_in_function.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"alert\">\n  Unfortunately, Visual Studio does not support CodeLens features for Python, so **AI Quick Actions will not work in Python files.**\\\n  \\\n  Supported languages for CodeLens features (AI Quick Actions) include **C/C++, C#, Basic, VBScript, TypeScript, and JavaScript.**\n</Callout>\n\nWith the new `Pieces > Comment` tool, the Pieces Copilot can generate meaningful, insertable documentation that explains your code's purpose and function.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/using_ai_quick_actions.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nAdditionally, the `Pieces > Explain` feature can quickly generate a code logic breakdown while initiating a Copilot Chat conversation in the side window, providing deeper insights and context.\n\n***\n\n| Pieces > Comment | Pieces > Explain |\n| ---------------- | ---------------- |\n\n***\n\n## Managing Your Code Snippets\n\nSaving and managing code snippets with Pieces for Visual Studio extension is quick and effortless.\n\nTo save a snippet, simply right-click the selected code, hover over `Pieces`, and select `Save Current Selection to Pieces` or `Save Active File to Pieces`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/material_management_redo.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nSnippets are automatically stored in your Pieces Drive, keeping them organized and accessible—you can search for them using the `Search Pieces Drive` function, which can be found in the right-click menu.\n\nAdditionally, you can use the `Share Current Selection` option to share snippets with others directly from the extension easily.\n\n<Callout type=\"tip\">\n  Common snippet types include utility functions, API requests, and reusable code blocks.\n</Callout>\n\nWhen you save snippets to your repository, Pieces enriches them with AI-generated metadata, including [tags, titles, authorship details, and descriptions](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/save-snippets#whats-stored-when-you-save-a-snippet), ensuring everything stays organized and accessible.\n\nBelow is a brief overview of the various material management options available within the Pieces for Visual Studio Extension:\n\n* `Save Current Selection / Active File to Pieces`: Right-click a selected block of code or your entire active file and [save it to your Pieces Drive with AI-enriched metadata](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/save-snippets#whats-stored-when-you-save-a-snippet), ensuring easy access to frequently used snippets.\n\n* `Ask Copilot About Selection`: [Start a conversation with Pieces Copilot](https://docs.pieces.app/products/extensions-plugins/visual-studio/copilot/chat#accessing-copilot-chat-in-vs-code) to gain insights, explanations, or suggestions for improvement for the selected code.\n\n* `Share Current Selection`: [Share snippets with your team](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/sharing) by creating distributable copies of reusable code.\n\n* `Search Pieces Drive`: [Find specific snippets in your repository](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/search-reuse#via-search-feature) using keywords, tags, or titles.\n\n### **Referencing & Reusing**\n\nThe <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=MeshIntelligentTechnologiesInc.pieces-vscode\">Pieces for Visual Studio Extension</a> provides robust search tools to help you quickly find and access your saved snippets.\n\nYou can [perform broad searches or narrow your results by using specific terms](https://docs.pieces.app/products/extensions-plugins/visual-studio/drive/search-reuse#via-search-feature) such as function names, keywords, or tags, making locating the exact code you need effortless.\n\nRight-clicking anywhere in your active file, hovering over `Pieces`, and selecting `Search Pieces Drive` will open up the search bar in the Pieces Drive view—from there, enter your query or use filters to find the saved material you’re looking for.\n\nAs you search, snippets matching your query will be displayed in a filtered list of your previously saved snippets.\n\nFrom there, you can open the snippet and see its metadata in markdown or use the Pieces Drive window to edit the enriched metadata saved alongside it.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/visual_studio_extension_assets/visual_studio_extension_MAIN/snippet_saved_materials_open_in_sidebar.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Download the Extension\n\nReady to streamline your development? Download the Pieces for Visual Studio Extension and follow our [installation guide to start.](https://docs.pieces.app/products/extensions-plugins/visual-studio/get-started)",
    "lastModified": "2025-06-04T17:24:58.332Z",
    "filePath": "extensions-plugins/extensions-plugins/visual-studio.md"
  },
  "/docs/extensions-plugins": {
    "slug": "/docs/extensions-plugins",
    "metadata": {
      "title": "Extensions & Plugins",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "# Extensions & Plugins\n\nPieces integrates seamlessly with your favorite development tools through our extensions and plugins.\n\n## Available Extensions\n\n### IDE Extensions\n- **[Visual Studio Code](/docs/extensions-plugins/visual-studio-code)** - Full-featured VS Code extension\n- **[JetBrains](/docs/extensions-plugins/jetbrains)** - Support for all JetBrains IDEs\n- **[Visual Studio](/docs/extensions-plugins/visual-studio)** - Microsoft Visual Studio integration\n- **[Sublime Text](/docs/extensions-plugins/sublime)** - Lightweight Sublime Text plugin\n- **[Neovim](/docs/extensions-plugins/neovim-plugin)** - Vim-based editor support\n\n### Other Integrations\n- **[JupyterLab](/docs/extensions-plugins/jupyterlab)** - Jupyter notebook integration\n\nChoose an extension above to get started!",
    "lastModified": "2025-06-04T17:24:57.752Z",
    "filePath": "extensions-plugins.md"
  },
  "/docs/getting-started": {
    "slug": "/docs/getting-started",
    "metadata": {
      "title": "Getting Started",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "---\ntitle: \"Getting Started with Pieces\"\npath: \"/docs/getting-started\"\nvisibility: \"PUBLIC\"\ndescription: \"Welcome to Pieces! This guide will help you get up and running with our AI-powered code management platform.\"\nslug: \"welcome\"\n---\n\n# Getting Started with Pieces\n\nWelcome to Pieces! This guide will help you get up and running with our AI-powered code management platform.\n\n## Quick Start\n\n<CardGroup cols={3}>\n<Card title=\"Installation\" image=\"\" href=\"/docs/meet-pieces/windows-installation-guide\" icon=\"📥\">\nDownload and install Pieces on your development machine\n</Card>\n\n<Card title=\"Quick Start\" image=\"\" href=\"/docs/quick-guides/overview\" icon=\"⚡\">\nStart saving and organizing your first code snippets\n</Card>\n\n<Card title=\"Extensions\" image=\"\" href=\"/docs/extensions-plugins\" icon=\"🔗\">\nIntegrate Pieces into your development workflow\n</Card>\n</CardGroup>\n\n## What is Pieces?\n\nPieces is an AI-powered code repository that helps developers save, organize, and reuse code snippets. It provides intelligent code management with features like:\n\n- **Smart Tagging:** Automatically categorize your code snippets\n- **AI Search:** Find code using natural language queries\n- **IDE Integration:** Works seamlessly with popular development environments\n- **Team Collaboration:** Share knowledge across your development team\n- **Version Control:** Track changes to your code snippets over time\n\n## Core Concepts\n\n### Code Snippets\nThe fundamental unit in Pieces is a code snippet. Each snippet can contain code in any language, along with metadata like tags, descriptions, and context information.\n\n### Collections\nOrganize related snippets into collections. Collections help you group code by project, technology, or any other criteria that makes sense for your workflow.\n\n### AI-Powered Features\nPieces uses AI to enhance your coding experience by providing intelligent suggestions, automatic tagging, and natural language search capabilities.\n\n## Next Steps\n\nReady to start using Pieces? Follow our installation guide to get set up:\n\n1. **[Install Pieces](/docs/meet-pieces/fundamentals)** - Learn about the core components\n2. **[Download the Desktop App](/docs/desktop/download)** - Get the main Pieces application\n3. **[Install Extensions](/docs/extensions-plugins)** - Add Pieces to your favorite IDE\n4. **[Quick Start Guide](/docs/quick-guides/overview)** - Start saving your first snippets\n\n:::info[Ready to Get Started?]\nThe fastest way to get up and running is to install the Pieces Desktop App and start saving your first code snippets.\n\n[Install Pieces Desktop App →](/docs/desktop/download)\n:::",
    "lastModified": "2025-06-04T17:24:58.425Z",
    "filePath": "getting-started.md"
  },
  "/docs/glossary": {
    "slug": "/docs/glossary",
    "metadata": {
      "title": "Glossary",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "<glossary-all />",
    "lastModified": "2025-06-04T17:24:58.427Z",
    "filePath": "glossary.md"
  },
  "/docs/help": {
    "slug": "/docs/help",
    "metadata": {
      "title": "Get Help",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "# Get Help\n\nNeed assistance? We're here to help!\n\n## Support Resources\n\n- **[Support](/docs/support)** - Contact our support team and find helpful resources\n\nVisit our support page for assistance with any issues or questions you may have.",
    "lastModified": "2025-06-04T17:24:58.430Z",
    "filePath": "help.md"
  },
  "/docs/large-language-models/cloud-models": {
    "slug": "/docs/large-language-models/cloud-models",
    "metadata": {
      "title": "Cloud Models",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "#Testing",
    "lastModified": "2025-06-04T17:24:58.438Z",
    "filePath": "large-language-models/cloud-models.md"
  },
  "/docs/large-language-models/local-models": {
    "slug": "/docs/large-language-models/local-models",
    "metadata": {
      "title": "Local Models",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "<pieces-local-models />",
    "lastModified": "2025-06-04T17:24:58.442Z",
    "filePath": "large-language-models/local-models.md"
  },
  "/docs/large-language-models": {
    "slug": "/docs/large-language-models",
    "metadata": {
      "title": "Pieces for Developers | LLMs",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/standalone_single_docs/compatible_llms/compatible-llms.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Compatible AI Models with Pieces\n\nPieces utilizes cloud-hosted LLMs from providers like OpenAI, Anthropic, and Google. All local models are served through [Ollama, a core dependency of PiecesOS](https://docs.pieces.app/products/core-dependencies/ollama) and the rest of the Pieces Suite.\n\n## Cloud-Only LLMs | Providers\n\n[Browse the list of cloud-hosted AI models available for use](https://docs.pieces.app/products/large-language-models/cloud-models) with the Pieces Desktop App and several of our plugins and extensions.\n\n***\n\n| **Provider** | **Model Name**                 |\n| ------------ | ------------------------------ |\n| *OpenAI*     | GPT-X                          |\n| *Anthropic*  | Claude / Sonnet / Opus / Haiku |\n| *Google*     | Gemini / Pro / Flash / Chat    |\n\n***\n\n## Local-Only LLMs | Providers\n\nRead [through the list of local AI models available for use](https://docs.pieces.app/products/large-language-models/local-models) within the Pieces Desktop App and the rest of the Pieces Suite.\n\n***\n\n| **Provider** | **Model Name**               |\n| ------------ | ---------------------------- |\n| *Google*     | Gemma / Code Gemma           |\n| *IBM*        | Granite / Code / Dense / MoE |\n| *Meta*       | LLaMA / CodeLLaMA            |\n| *Mistral*    | Mistral / Mixtral            |\n| *Microsoft*  | Phi                          |\n| *Qwen*       | QwQ / Coder                  |\n| *StarCoder*  | StarCoder                    |\n\n***\n\n### Using Ollama with Pieces\n\nOllama is *required* to utilize local generative AI features.\n\nIt’s a lightweight system that allows for a plug-and-play experience with local models, meaning that Pieces can update the number of compatible models we serve at lightning-speeds!\n\nIf you want to read more about installing and using Ollama with Pieces, [click here for the Ollama section of our Core Dependencies documentation.](https://docs.pieces.app/products/core-dependencies/ollama)",
    "lastModified": "2025-06-04T17:24:58.431Z",
    "filePath": "large-language-models.md"
  },
  "/docs/mcp/cursor": {
    "slug": "/docs/mcp/cursor",
    "metadata": {
      "title": "Pieces MCP + Cursor Integration",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_cursor/mcp-2.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Get Started\n\nIntegrating the Pieces MCP with Cursor is a **powerful** and **efficient** way to bring your daily workflow context directly into your IDE.\n\nWith this integration, you'll have an in-IDE chatbot that *knows more about your project* than just the active file or project folder.\n\nYou can ask questions about additional workflow information, like whether a coworker fixed a bug in last week's PR, and then use that solution to fix a similar error in your code without having to look through old chat logs or GitHub commits.\n\nLearn how to integrate the Pieces MCP into Cursor by following the steps below.\n\n<Callout type=\"info\">\n  It is imperative that you download and/or update your version of Cursor to the **latest, most up-to-date version** to ensure compatibility with Pieces MCP.\n</Callout>\n\n## Prerequisites\n\nThere are **\\[2]** primary prerequisites for integrating Pieces with Cursor as an MCP—an active instance of **PiecesOS** and the fully-enabled **Long-Term Memory** engine.\n\n<Steps>\n  <Step title=\"Install & Run PiecesOS\">\n    Make sure that PiecesOS is installed and running. This is *required* for the MCP server to communicate with your personal repository of workflow data and pass context through to the Cursor chat agent.\n\n    If you do not have PiecesOS, you can download it alongside the [Pieces Desktop App](https://docs.pieces.app/products/desktop/download) or [install it standalone](https://docs.pieces.app/products/core-dependencies/pieces-os/manual-installation#manual-download--installation) here.\n  </Step>\n\n  <Step title=\"Enable Long-Term Memory\">\n    For the MCP server to interact with your workflow context, you must enable the Long-Term Memory Engine (LTM-2) through the Pieces Desktop App or the [PiecesOS Quick Menu](https://docs.pieces.app/products/core-dependencies/pieces-os/quick-menu) in your toolbar.\n  </Step>\n</Steps>\n\n### Installing PiecesOS & Configuring Permissions\n\nFollow the instructions below for a detailed guide on setting up and configuring PiecesOS to correctly pass captured workflow context to the Pieces MCP server.\n\n<pos-download-guide />\n\n### Getting the SSE Endpoint for PiecesOS\n\nTo use Pieces MCP with Cursor, you'll first need the Server-Sent Events (SSE) endpoint from PiecesOS:\n\n```markdown\nhttp://localhost:39300/model_context_protocol/2024-11-05/sse\n```\n\n<Callout type=\"alert\">\n  Keep in mind that the **specific port** (i.e., `39300`) PiecesOS is running on **may vary**.\n</Callout>\n\nTo find the current SSE endpoint with the active instance of POS (including the current port number), open the PiecesOS Quick Menu and expand the **Model Context Protocol (MCP) Servers** tab.\n\nThere, you can click once to copy the SSE endpoint, which includes the active PiecesOS port number.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_pos_new.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can also do this in the Pieces Desktop App by opening the **Settings** view and clicking **Model Context Protocol (MCP).**\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_pfd_new.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Setting Up Cursor\n\nRead below for steps on setting up the Pieces MCP in your Cursor IDE using the global MCP configuration method—or watch the video below for a tutorial and live demo.\n\n<Embed src=\"https://www.youtube.com/watch?v=joqJbr9MV8k\" />\n\n### via Global MCP Configuration\n\nTo set up the Pieces MCP, you can edit the `.json` settings configuration file from within **Cursor Settings.**\n\n<Steps>\n  <Step title=\"Go to Settings\">\n    Navigate to **Cursor Settings**, then to the `MCP` section.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_cursor/cursor_no_mcp.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n\n  <Step title=\"Add a New MCP\">\n    Add a new global MCP server by clicking `Add new global MCP server` and inserting the following `.json` snippet (adjust port if necessary) in the `.json` file that opens:\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"Pieces\": {\n          \"url\": \"http://localhost:39300/model_context_protocol/2024-11-05/sse\"\n        }\n      }\n    }\n    ```\n  </Step>\n\n  <Step title=\"Save the File\">\n    Save the configuration file.\n\n    Make sure to refresh the MCP server window by clicking the **refresh icon** and ensure that there is a *green dot* indicating that the server is running and functioning without errors.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_cursor/cursor_green_dot_mcp.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n\n  <Step title=\"Use Pieces MCP\">\n    Once the MCP server is set up, make sure to change the chat mode to *Agent* mode. This should automatically utilize the `ask_pieces_ltm` tool.\n  </Step>\n</Steps>\n\n## Using Pieces MCP Server in Cursor\n\nOnce integrated, you can utilize [Pieces LTM](https://docs.pieces.app/products/core-dependencies/pieces-os#ltm-2) directly in Cursor through the built-in chat agent.\n\n<Steps>\n  <Step title=\"Open the Chat Panel\">\n    Open the right-hand chat panel by toggling it at the top-right corner, or use the shortcut `⌘+i` (macOS) or `ctrl+i` (Windows/Linux).\n  </Step>\n\n  <Step title=\"Select ‘Cursor Agent’\">\n    Make sure that you are using the *Cursor Agent* mode, not *Ask* or *Manual.* This is required to use the `ask_pieces_ltm` tool to access context from LTM.\n  </Step>\n\n  <Step title=\"Begin Prompting\">\n    From this point, you can begin prompting. If PiecesOS was previously installed, try testing out the Pieces MCP integration with a prompt like, “What was I doing for work yesterday?” and click `Use Tool` when prompted.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_cursor/example_pieces_mcp_cursor.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n<Card title=\"Hey!\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744223623563/b3f5f845-6e45-47be-8473-3f1173e1c415.png\">\n  Check out this [MCP-specific prompting guide](https://docs.pieces.app/products/mcp/prompting) if you want to effectively utilize the Long-Term Memory Engine (LTM-2) with your new Pieces MCP server.\n</Card>\n\n### Configuring Rules\n\nIf you want to customize the specific output provided by the Cursor chatbot through working with the `ask_pieces_ltm` tool, you can manually adjust the *rules* for inside of **Cursor Settings.**\n\nTo do this, open up **Cursor Settings,** click `Rules`, then add new *User Rules.*\n\nHere’s an example of a straightforward set of rules tailored to a specific use case and work flow:\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_cursor/cursor_rules.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Troubleshooting\n\nIf you’re experiencing issues integrating Pieces MCP with Cursor, follow these troubleshooting steps:\n\n1. **Verify PiecesOS Status**: Ensure [PiecesOS is actively running](https://docs.pieces.app/products/core-dependencies/pieces-os/troubleshooting) on your system. MCP integration requires PiecesOS to be operational.\n\n2. **Confirm LTM Engine Activation**: Make sure the [Long-Term Memory Engine (LTM-2) is enabled in PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os/quick-menu#ltm-2-engine), as this engine aggregates context necessary for Cursor to retrieve accurate results.\n\n3. **Single MCP Instance:** Make sure that you aren’t testing multiple instances of the Pieces MCP server in different IDEs. This cross-contamination conflict with the SSE and several MCP instances running on the same port can cause issues in different development environments.\n\n4. **Use Agent Mode in Chat**: Cursor must be in *Agent Mode*, not *Ask Mode*, to access the `ask_pieces_ltm` tool. Switch to Agent Mode to enable full MCP integration.\n\n5. **Turn Off Auto-Select**: If Cursor is having issues finding the Pieces tool, de-select `auto-select` and select an individual Agent, such as `claude-3.5-sonnet`.\n\n6. **Check MCP Server Status**: If you’re encountering messages such as “Sorry, I can’t do this,” your MCP server may not be properly configured or running.\n\n7. **Go to** `settings.json` **in Cursor:** Confirm the MCP server status shows \"running\" (it may say \"start\" or \"pause\" otherwise). Restart the server if necessary and inspect terminal outputs for error messages.\n\n8. **Review Configuration Details**: Double-check the MCP endpoint URL and the port number in Cursor settings to ensure accuracy, You can find the current SSE endpoint URL in the Pieces Desktop App under **Settings** → **Model Context Protocol (MCP)**, or in the PiecesOS Quick Menu. It is usually formatted as:\n\n```scss\nhttp://localhost:{port_number}/model_context_protocol/{version}/sse\n```\n\n### JSON Blob Error in MCP Settings\n\nWhen you open **Preferences → Settings → MCP**, you may see a raw `.JSON` payload or *“unknown message ID”* error displayed beneath your enabled Pieces server—even though your tool calls work correctly.\n\nCursor’s *Settings* UI currently doesn’t recognize the JSON-RPC success envelope, so it misclassifies the response as an error object and dumps the payload.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_cursor/cursor_error.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis visual artifact is harmless. All genuine LTM responses still arrive properly in the Cursor chat window.\n\n<Callout type=\"alert\">\n  Ignore any red `.JSON` blobs in the MCP Settings view. The **Chat** pane is the source of truth—if your pieces queries return formatted summaries there, the integration is functioning normally.\n</Callout>\n\n***\n\nYou’re now set to enhance your workflow with powerful context retrieval through Pieces MCP integrated seamlessly into Cursor. Happy coding!",
    "lastModified": "2025-06-04T17:24:58.453Z",
    "filePath": "mcp/mcp/cursor.md"
  },
  "/docs/mcp/get-started": {
    "slug": "/docs/mcp/get-started",
    "metadata": {
      "title": "Get Started with Pieces MCP",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/introducing_pieces_mcp/mcp.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Introducing Pieces Model Context Protocol (MCP)\n\nWelcome to Pieces Model Context Protocol (MCP), an innovative way to connect Large Language Models (LLMs) to the context they need from your digital world.\n\n## What is an MCP?\n\n*Model Context Protocol*, or MCP, is an open standard developed by Anthropic that enables LLMs, like Claude and ChatGPT, to access external data sources and tools without needing complex, custom integrations.\n\nIn a way, MCP is becoming a *universal* context provider that uses a well-standardized communication protocol to pass information (like external data) or tools to LLM-powered applications.\n\nFor developers, this is extremely useful—because it means somebody using the Cursor agentic chat system can rope in external context to the LLM, giving it additional context outside of the purview of the active file or codebase they’re working in.\n\n## How Pieces Integrates with MCP\n\nThe core of the Pieces ecosystem is [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os), which powers the Pieces Desktop App, browser extensions, and IDE plugins.\n\nAt its heart is the advanced [Long-Term Memory Engine (LTM-2)](https://docs.pieces.app/products/core-dependencies/pieces-os#ltm-2), which captures, enriches, and locally stores valuable contextual information from your daily workflow, such as code snippets, browser history, notes, and application data.\n\nPieces leverages the MCP to connect your favorite development tools and AI applications—like Cursor and GitHub Copilot—directly to PiecesOS, enabling smooth, context-rich interactions [entirely on your device.](https://docs.pieces.app/products/privacy-security-your-data#data-storage--control)\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/introducing_pieces_mcp/mcp-diagram.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Required Dependency\n\nPiecesOS is a required dependency—you won’t be able to use Pieces as an MCP without it.\n\nRead [documentation on PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os) or jump to the [PiecesOS installation guides](https://docs.pieces.app/products/core-dependencies/pieces-os/manual-installation#manual-download--installation) to get started.\n\n## Use Cases and Benefits\n\nDiscover some critical use cases and benefits to using the Pieces MCP integration as a core tool alongside your daily development process.\n\n### Context-Rich Debugging\n\nImagine encountering a tricky bug within [Cursor](http://docs.pieces.app/products/mcp/cursor).\n\nInstead of manually reviewing logs or searching online, MCP allows Cursor to directly query Pieces LTM:\n\n***\n\n| **Prompt**                                                                                             | **Outcome**                                                                                                          |\n| ------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------- |\n| *\"Did the team decide to make* `enrichmentLevel` *case-sensitive for the applets? Is that the issue?\"* | Cursor retrieves relevant team discussions and code decisions from PiecesOS, clarifying case-sensitivity decisions.  |\n| *\"Show me log entries from the recent API outages related to token expiration.\"*                       | Cursor fetches specific API outage logs and token-related errors stored by Pieces LTM for quick diagnosis.           |\n| *\"Have I previously encountered memory leaks in similar Node.js background tasks?\"*                    | Cursor accesses your historical debugging notes and previous Node.js fixes saved in PiecesOS to suggest solutions.   |\n| *\"What configuration changes were made right before database latency spiked yesterday afternoon?\"*     | Cursor gathers recent configuration modifications from PiecesOS to identify the exact changes affecting performance. |\n\n***\n\n### Contextual Queries\n\nWhen integrated with [GitHub Copilot](http://docs.pieces.app/products/mcp/github-copilot), MCP enhances your coding experience by providing context-specific suggestions and history-driven recommendations:\n\n***\n\n| **Prompt**                                                                    | **Outcome**                                                                               |\n| ----------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |\n| *“Show me previous implementations of this authentication method.”*           | Copilot fetches related past implementations from your Pieces LTM history.                |\n| *“Show me similar code snippets to this React component.”*                    | Copilot retrieves related React components from your Pieces LTM history.                  |\n| *“What fixes have I previously implemented for this type of database error?”* | Copilot accesses historical database error resolutions stored in Pieces LTM.              |\n| *“Have I encountered this bug before?”*                                       | Copilot identifies past occurrences and corresponding fixes from your Pieces LTM context. |\n\n***\n\n## Why Developers Love Pieces MCP\n\nPieces MCP empowers developers to leverage personal context for AI-driven interactions, significantly reducing manual research, accelerating troubleshooting, and enhancing productivity.\n\nBy connecting directly to [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os), your context becomes a powerful, personalized source of truth that informs AI interactions:\n\n* **Personalized Context**—The LLM understands your work based on real-time and historical data.\n\n* **Secure and Local**—All data stays local for your [privacy and security.](https://docs.pieces.app/products/privacy-security-your-data)\n\n* **Extensible and Open**: Easily integrate new tools and data sources with minimal effort.\n\n***\n\n*Pieces MCP —> Cursor*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/introducing_pieces_mcp/cursor_example_chat.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Technical Reference\n\nLearn about the foundational layers of MCP architecture and the Pieces → MCP → LLM output flow you can achieve with the Pieces MCP integration.\n\n### MCP Architecture\n\nPieces MCP consists of three main components that communicate via MCP for dynamic, secure context retrieval.\n\n* **Host:** An AI-powered application (e.g., Cursor, Visual Studio Code).\n\n* **Client:** Connectors embedded within the host, facilitating communication.\n\n* **Server:** Small programs linking to specific tools or data sources, like PiecesOS and the `ask_pieces_ltm` tool.\n\n### Pieces MCP Flow\n\nLet’s take a look at the Pieces + MCP flow as you’d experience it in a familiar development environment:\n\n<Steps>\n  <Step title=\"Prompting\">\n    User sends a prompt via an AI tool (e.g., [Cursor](https://docs.pieces.app/products/mcp/cursor)).\n  </Step>\n\n  <Step title=\"Connecting the Dots\">\n    The MCP client within Cursor identifies relevant context servers (PiecesOS).\n  </Step>\n\n  <Step title=\"Gathering Context\">\n    The MCP server fetches relevant data from Pieces LTM-2.\n  </Step>\n\n  <Step title=\"Generating the Output\">\n    Context is returned and utilized by the AI to respond effectively, and the LLM provides a context-rich response.\n  </Step>\n</Steps>\n\n***\n\n*Pieces MCP —> GitHub Copilot*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/introducing_pieces_mcp/visualstudio_example_chat.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Getting Started\n\nExplore how quickly MCP enhances your productivity by delivering deep, personalized context directly to your AI-driven coding flow.\n\nTo begin using Pieces MCP, [install and launch PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os/manual-installation) on your system, then follow our integration documentation for setting up the MCP server within your favorite IDE:\n\n* [Pieces MCP + Cursor Integration Guide](http://docs.pieces.app/products/mcp/cursor)\n\n* [Pieces MCP + GitHub Copilot Integration Guide](http://docs.pieces.app/products/mcp/github-copilot)\n\n* [Pieces MCP + Goose Integration Guide](https://docs.pieces.app/products/mcp/goose)\n\n***\n\n## What's Next?\n\nThe MCP ecosystem continues to expand rapidly, with more integrations and tools on the horizon.\n\nJoin the community, build your custom MCP servers, and transform how AI assists your everyday tasks.\n\n<Callout type=\"tip\">\n  Stay tuned for more detailed guides, examples, and tutorials coming soon.\n</Callout>\n\nHappy Coding!",
    "lastModified": "2025-06-04T17:24:58.459Z",
    "filePath": "mcp/mcp/get-started.md"
  },
  "/docs/mcp/github-copilot": {
    "slug": "/docs/mcp/github-copilot",
    "metadata": {
      "title": " Pieces MCP + GitHub Copilot",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_gh_copilot/mcp-2-1.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Get Started\n\nConnecting [Pieces MCP](https://docs.pieces.app/products/mcp/get-started) to **GitHub Copilot** enhances context-aware coding by linking your current task with past work.\n\nThis integration allows Copilot to provide insights like past implementations and peer-reviewed solutions.\n\nYou can ask context-rich questions, and Copilot can find answers from your local development history without searching through commits or messages.\n\nFollow the steps below to enable the Pieces MCP integration with GitHub Copilot for smarter, personalized AI assistance.\n\n## Prerequisites\n\nThere are **\\[2]** primary prerequisites for integrating Pieces with GitHub Copilot as an MCP—an active instance of **PiecesOS** and the fully-enabled **Long-Term Memory** engine.\n\n<Steps>\n  <Step title=\"Install & Run PiecesOS\">\n    Make sure that PiecesOS is installed and running. This is *required* for the MCP server to communicate with your personal repository of workflow data and pass context through to the GitHub Copilot chat agent.\n\n    If you do not have PiecesOS, you can download it alongside the [Pieces Desktop App](https://docs.pieces.app/products/desktop/download) or [install it standalone](https://docs.pieces.app/products/core-dependencies/pieces-os/manual-installation#manual-download--installation) here.\n  </Step>\n\n  <Step title=\"Enable Long-Term Memory\">\n    For the MCP server to interact with your workflow context, you must enable the Long-Term Memory Engine (LTM-2) through the Pieces Desktop App or the [PiecesOS Quick Menu](https://docs.pieces.app/products/core-dependencies/pieces-os/quick-menu) in your toolbar.\n  </Step>\n</Steps>\n\n### Installing PiecesOS & Configuring Permissions\n\nFollow the detailed set-up instructions below for a detailed guide on setting up and configuring PiecesOS to correctly pass captured workflow context to the Pieces MCP server.\n\n<pos-download-guide />\n\n### SSE Endpoint\n\nTo use Pieces MCP with GitHub Copilot, you first need the Server-Sent Events (SSE) endpoint from PiecesOS:\n\n```markdown\nhttp://localhost:39300/model_context_protocol/2024-11-05/sse\n```\n\n<Callout type=\"alert\">\n  Keep in mind that the **specific port** (i.e., `39300`) PiecesOS is running on **may vary**.\n</Callout>\n\nTo find the current SSE endpoint with the active instance of POS (including the current port number), open the PiecesOS Quick Menu and expand the **Model Context Protocol (MCP) Servers** tab.\n\nThere, you can copy the SSE endpoint with one click, which includes the active PiecesOS port number.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_pos_new.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can also do this in the Pieces Desktop App by opening the **Settings** view and clicking **Model Context Protocol (MCP).**\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_pfd_new.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Setting Up GitHub Copilot\n\nYou can now use the Pieces MCP with both Visual Studio Code and Visual Studio Code (Insider Edition).\n\nFollow the steps below to get started—or watch the video below for a set-up tutorial and live demo.\n\n<Embed src=\"https://www.youtube.com/watch?v=QT9J8XSKMM8\" />\n\n### via Visual Studio Code UI\n\nAdding the Pieces MCP in the built-in MCP menu is the easiest method to setting up your Pieces MCP server and allows you to have the best experience while using the Pieces MCP.\n\n<Steps>\n  <Step title=\"Open the Command Palette\">\n    Open Visual Studio Code and launch the Command Palette by pressing `Cmd+Shift+P` on macOS or `Ctrl+Shift+P` on Windows/Linux.\n  </Step>\n\n  <Step title=\"Add a New MCP Server\">\n    In the Command Palette, type **MCP: Add Server** and select the command when it appears.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_gh_copilot/mcp_add_server_dropdown.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n\n  <Step title=\"Choose the Server Type\">\n    Select `HTTP (sse)` as the server type when requested.\n  </Step>\n\n  <Step title=\"Enter the SSE URL\">\n    Paste your SSE URL into the provided field.\n\n    For Pieces, use:\n\n    ```plaintext\n    http://localhost:39300/model_context_protocol/2024-11-05/sse\n    ```\n\n    <Callout type=\"info\">\n      Remember to grab the specific SSE URL (with the *active* PiecesOS port) from either the PiecesOS or Pieces Desktop App MCP menu.\n    </Callout>\n  </Step>\n\n  <Step title=\"Enter a MCP Server Name\">\n    When prompted to add a new MCP server, enter a name for your server, such as ‘Pieces\\` or something easy to remember.\n\n    Then, you can select the `User Settings` option to save the MCP server configuration in your VS Code user settings, so it can be accessed globally across different workspaces—or choose `Workspace Settings` to use it explicitly in your open project.\n  </Step>\n\n  <Step title=\"Save Your Configuration\">\n    Save your configuration. Your VS Code `settings.json` file should now include an entry similar to the example below:\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"Pieces\": {\n          \"url\": \"http://localhost:39300/model_context_protocol/2024-11-05/sse\"\n        }\n      }\n    }\n    ```\n\n    Your GitHub Copilot chat, as long as the chat mode is in *Agent* mode, will now see Pieces as an MCP and automatically utilize the `ask_pieces_ltm` tool on-query.\n  </Step>\n</Steps>\n\n### via Global MCP Configuration\n\nYou can manually add the MCP to your MCP settings `.JSON` by following the steps below.\n\n<Steps>\n  <Step title=\"Open the Visual Studio Code Settings\">\n    Click the **Settings Icon** on the bottom left of your IDE and select `Settings` from the list.\n  </Step>\n\n  <Step title=\"Search for MCP\">\n    In the VS settings, search for MCP in the search bar at the top of the page. The MCP section will appear—then, select `Edit in settings.json`.\n  </Step>\n\n  <Step title=\"Add the MCP Server Config .JSON\">\n    Replace the entire file, assuming you have no others, with the PiecesOS MCP server `.json`.\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"Pieces\": {\n          \"url\": \"http://localhost:39300/model_context_protocol/2024-11-05/sse\"\n        }\n      }\n    }\n    ```\n  </Step>\n\n  <Step title=\"Save the File\">\n    Save the configuration.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_gh_copilot/mcp_settings.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n    Your GitHub Copilot chat, as long as it’s in Agent mode, will now see PiecesOS as an MCP.\n  </Step>\n</Steps>\n\n## Using Pieces MCP Server in GitHub Copilot\n\nOnce integrated, you can utilize Pieces LTM directly in Visual Studio Code.\n\n<Steps>\n  <Step title=\"Open GitHub Copilot Chat\">\n    Launch the GitHub Copilot chat interface in Visual Studio Code by clicking the Copilot icon, or by using `⌘+ctrl+i` (macOS) `ctrl+alt+i` (Windows/Linux).\n\n    Change the Copilot mode from *Ask* to *Agent*.\n  </Step>\n\n  <Step title=\"Start Prompting\">\n    Enter your prompt, and click the **send** icon or press `return` (macOS) or `enter` (Windows/Linux) to send your query to the Copilot.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_gh_copilot/chatting_with_mcp.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n    <Callout type=\"alert\">\n      Do not add the `ask_pieces_ltm` tool as *context* to the conversation. If you are running the chat in *Agent* mode—which is required for the Pieces MCP integration to operate successfully—it will automatically utilize this tool.\n    </Callout>\n  </Step>\n</Steps>\n\n<Card title=\"Hey!\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744223593411/98b96d7f-4ba7-456f-a8a5-b9c2bfffd92a.png\">\n  Check out this [MCP-specific prompting guide](https://docs.pieces.app/products/mcp/prompting) if you want to effectively utilize the Long-Term Memory Engine (LTM-2) with your new Pieces MCP server.\n</Card>\n\n## Troubleshooting Tips\n\nIf you’re experiencing issues integrating Pieces MCP with GitHub Copilot, follow these troubleshooting steps:\n\n1. **Verify PiecesOS Status**: Ensure [PiecesOS is actively running](https://docs.pieces.app/products/core-dependencies/pieces-os/troubleshooting) on your system. MCP integration requires PiecesOS to be operational.\n\n2. **Confirm LTM Engine Activation**: Make sure the [Long-Term Memory Engine (LTM-2) is enabled in PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os/quick-menu#ltm-2-engine), as this engine aggregates context necessary for Cursor to retrieve accurate results.\n\n3. **Use Agent Mode in Chat**: Cursor must be in *Agent*, not *Ask*, to access the `ask_pieces_ltm` tool. Switch to Agent to enable full MCP integration. Make sure *not to add* the `ask_pieces_ltm` tool as context—instead, rely solely on the *Agent* chat mode.\n\n4. **Single MCP Instance:** Make sure that you aren’t testing multiple instances of the Pieces MCP server in different IDEs. This cross-contamination conflict with the SSE and several MCP instances running on the same port can cause issues in different development environments.\n\n5. **Check MCP Server Status**: If you’re encountering messages such as “Sorry, I can’t do this,” your MCP server may not be properly configured or running.\n\n6. **Go to** `settings.json` **in Visual Studio Code:** Confirm the MCP server status shows \"running\" (it may say \"start\" or \"pause\" otherwise). Restart the server if necessary and inspect terminal outputs for error messages.\n\n7. **Review Configuration Details**: Double-check the MCP endpoint URL and the port number in your VS Code MCP configuration menu to ensure accuracy. You can find the current SSE endpoint URL in the Pieces Desktop App under **Settings** → **Model Context Protocol (MCP)**, or in the PiecesOS Quick Menu. It is usually formatted as:\n\n```scss\nhttp://localhost:{port_number}/model_context_protocol/{version}/sse\n```\n\n***\n\nYou're now ready to improve your workflow with powerful context retrieval using Pieces MCP, seamlessly integrated into Visual Studio Code with GitHub Copilot. Happy coding!",
    "lastModified": "2025-06-04T17:24:58.463Z",
    "filePath": "mcp/mcp/github-copilot.md"
  },
  "/docs/mcp/goose": {
    "slug": "/docs/mcp/goose",
    "metadata": {
      "title": "Pieces MCP + Goose Integration",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/goose_mcp/mcp_goose.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Get Started\n\nIntegrating the [Pieces MCP](https://docs.pieces.app/products/mcp/get-started) with Goose is a powerful way to bring your daily workflow context directly into your command line or desktop interface.\n\nWith this integration, you'll have a *command-line AI assistant* that knows more about your coding activities than just the current project.\n\nYou can ask Pieces about bug fixes in your code discussed in your team channel, inquire about similar code you've worked on, or prompt it to double-check that your new code meets the criteria your coworker suggested—and much more.\n\nLearn how to integrate the Pieces MCP into Goose by following the steps below.\n\n## Prerequisites\n\nThere are **\\[2]** primary prerequisites for integrating Pieces with Goose as an MCP—an active instance of **PiecesOS** and the fully-enabled **Long-Term Memory (LTM-2)** engine.\n\n<Steps>\n  <Step title=\"Install & Run PiecesOS\">\n    Make sure that PiecesOS is installed and running. This is *required* for the MCP server to communicate with your personal repository of workflow data and pass context through to the Goose interface.\n  </Step>\n\n  <Step title=\"Enable Long-Term Memory\">\n    For the MCP server to interact with your workflow context, you must enable the Long-Term Memory Engine (LTM-2) through the Pieces Desktop App or the [PiecesOS Quick Menu](https://docs.pieces.app/products/core-dependencies/pieces-os/quick-menu) in your toolbar.\n  </Step>\n\n  <Step title=\"Install Goose\">\n    If you haven't installed Goose yet, follow the <a target=\"_blank\" href=\"https://block.github.io/goose/docs/getting-started/installation/\">installation instructions</a>.\n  </Step>\n</Steps>\n\n### Installing PiecesOS & Configuring Permissions\n\nFollow the detailed set-up instructions below for a detailed guide on setting up and configuring PiecesOS to correctly pass captured workflow context to the Pieces MCP server.\n\n<pos-download-guide />\n\n### SSE Endpoint\n\nTo use Pieces MCP with Goose, you'll need the Server-Sent Events (SSE) endpoint from PiecesOS:\n\n```scss\nhttp://localhost:39300/model_context_protocol/2024-11-05/sse\n```\n\n<Callout type=\"alert\">\n  Keep in mind that the **specific port** (i.e., `39300`) PiecesOS is running on **may vary**.\n</Callout>\n\nTo find the up-to-date SSE endpoint with the active instance of POS (including the current port number), open the PiecesOS Quick Menu and expand the **Model Context Protocol (MCP) Servers** tab.\n\nThere, you can copy the SSE endpoint with one click, which includes the active PiecesOS port number.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_pos_new.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can also find this in the Pieces Desktop App by opening the [Settings](https://docs.pieces.app/products/desktop/configuration) view and clicking **Model Context Protocol (MCP)**.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/mcp_pfd_new.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Setting Up Goose with Pieces MCP\n\nFollow the steps below to set up Pieces MCP with Goose, either through the command line or desktop application.\n\nMake sure you have the latest version of Goose installed to ensure compatibility with Pieces MCP.\n\n<Callout type=\"alert\">\n  You will need to go through additional set-up steps (such as setting up your LLM provider) which involves setting up your host, choosing your model, using your API key, and more.\n\n  Read the <a target=\"_blank\" href=\"https://block.github.io/goose/docs/getting-started/installation/\">official, open-source documentation</a> on completing these set-up steps.\n</Callout>\n\n### via CLI\n\nSetting up the Pieces MCP through the Goose Command Line Interface is straightforward.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/goose_mcp/set_up_mcp_server.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Steps>\n  <Step title=\"Run the Configuration Command\">\n    Open your terminal (macOS/Linux) or CMD (Windows) and run:\n\n    ```bash\n    goose configure\n    ```\n  </Step>\n\n  <Step title=\"Choose ‘Add Extension’\">\n    From the list of available options, choose `Add Extension`.\n  </Step>\n\n  <Step title=\"Choose ‘Remote Extension’\">\n    Select `Remote Extension` from the list of extension types.\n  </Step>\n\n  <Step title=\"Give it a Name\">\n    Name your extension `Pieces` or something similar.\n  </Step>\n\n  <Step title=\"Enter the SSE Endpoint URL\">\n    From PiecesOS, the Desktop App, or this documentation, obtain the Pieces MCP SSE endpoint URL and paste it into your terminal.\n\n    ```bash\n    http://localhost:39300/model_context_protocol/2024-11-05/sse\n    ```\n\n    <Callout type=\"tip\">\n      Adjust the port number if your local instance of PiecesOS runs on a different one.\n    </Callout>\n  </Step>\n\n  <Step title=\"Set the Tool Timeout\">\n    You’ll be prompted to enter a value for timing out the tool in case of an error or repeated *hangtime*. The default value is `300`—you can enter that value, or another.\n  </Step>\n\n  <Step title=\"Optional Configurations\">\n    Lastly, you’ll be prompted to add a description or additional environment variables—these are not required. Select `No` to both if you want to proceed.\n  </Step>\n\n  <Step title=\"Success!\">\n    You’ll now see a message like `Added Pieces Extension` or similar, depending on the name you’ve attributed to the extension. You can use `goose list extensions` to verify and check the list of integrated extensions within Goose.\n  </Step>\n</Steps>\n\n<Card title=\"For macOS Users:\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744391821350/61ecf9a4-51ca-4351-a63b-30184f0085ca.png\">\n  You may see an error message when configuring Goose, like:\n\n  > <mark>Warning: Goose installed, but /Users/you/.local/bin is not in your PATH…</mark>\n\n  You can fix this issue by adding `export PATH=”$HOME/.local/bin:$PATH”` to your your `~/.zshrc` or `~/.bashrc`.\n\n  Then, reload with `source ~/.zshrc` and start a Goose session by using `goose` from anywhere.\n</Card>\n\n## Using Pieces MCP with Goose\n\nOnce the integration is set up, you can start using Pieces Long-Term Memory through Goose.\n\n### Starting a Conversation\n\n<Steps>\n  <Step title=\"Open up a Goose Chat\">\n    Simply type `goose` in your terminal to start a new conversation:\n\n    ```bash\n    goose\n    ```\n\n    This will open a prompt where you can interact with Goose, which now has access to your Pieces Long-Term Memory.\n  </Step>\n\n  <Step title=\"Start Prompting\">\n    You can now start interacting with the Pieces MCP server.\n\n    Try using this prompt:\n\n    ```plaintext\n    I need a status update for what I was working on yesterday. Create a report with 5 bullet points based off the most important activities, and give each one a brief description. Use time stamps to accurately report how long I spent working on group of tasks/topics.\n    ```\n\n    <Callout type=\"alert\">\n      This prompt is formulated for users already familiar with PiecesOS who use the Long-Term Memory Engine.\\\n      \\\n      If you are a first-time user, it is recommended that you launch PiecesOS and enable LTM, then allow some time for data capture before using this prompt for a desirable output.\n    </Callout>\n\n    Here’s a response using that exact same prompt inside of Goose using the Pieces MCP integration:\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/goose_mcp/example_convo_demo_prompt.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n<Card title=\"Hey!\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744404097876/f72dc24c-467c-44d8-8585-2dfe53b40a9d.png\">\n  Check out this [MCP-specific prompting guide](https://docs.pieces.app/products/mcp/prompting) if you want to effectively utilize the Long-Term Memory Engine (LTM-2) with your new Pieces MCP server.\n</Card>\n\n## Toggling & Removing Pieces MCP\n\nTo remove the Pieces MCP for Goose, you can follow the same process you otherwise would for removing any Goose extension.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/mcp_documentation/goose_mcp/remove_mcp_server.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Steps>\n  <Step title=\"Enter the Configuration Settings\">\n    Open up your terminal and type `goose configure`, then press `return` (macOS) or `enter` (Windows/Linux).\n  </Step>\n\n  <Step title=\"Extension Toggling\">\n    Use your keyboard’s **up** and **down** arrow keys to navigate down to `Toggle Extensions`.\n  </Step>\n\n  <Step title=\"Un-Toggle your Pieces MCP Server\">\n    Using arrow keys to navigate the list, press `space` (macOS/Windows/Linux) when the carrot is pointing towards your targeted extension.\n\n    Then, press `return` (macOS) or `enter` (Windows/Linux) to confirm changes.\n  </Step>\n\n  <Step title=\"Re-enter the Configuration Settings\">\n    Use `goose configure` to re-enter the configuration menu.\n  </Step>\n\n  <Step title=\"Removing Extensions\">\n    Use your arrow keys to navigate to `Remove Extensions`, then, using the same `space` and `enter/return` process, first *toggle* then *confirm* your removal of the Pieces MCP extension.\n  </Step>\n</Steps>\n\n## Troubleshooting\n\nIf you're experiencing issues integrating Pieces MCP with Goose, follow these troubleshooting steps:\n\n1. **Verify PiecesOS Status:** Ensure [PiecesOS is actively running](https://docs.pieces.app/products/core-dependencies/pieces-os) on your system. MCP integration requires PiecesOS to be operational.\n\n2. **Confirm LTM Engine Activation:** Make sure the [Long-Term Memory Engine (LTM-2) is enabled in PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os/quick-menu#ltm-2-engine), as this engine aggregates context necessary for Goose to retrieve accurate results.\n\n3. **Single MCP Instance:** Make sure that you aren't testing multiple instances of the Pieces MCP server in different IDEs. This *cross-contamination conflict* with the SSE and several MCP instances running on the same port can cause issues in different development environments.\n\n4. **Check MCP Server Status:** If you're encountering messages such as \"Sorry, I can't do this,\" your MCP server may not be properly configured or running.\n\n5. **Verify Port Configuration:** Double-check the MCP endpoint URL and the port number in your Goose configuration to ensure accuracy. You can find the current SSE endpoint URL in the Pieces Desktop App under **Settings → Model Context Protocol (MCP)**, or in the PiecesOS Quick Menu. It is usually formatted as:\n\n```plaintext\nhttp://localhost:{port_number}/model_context_protocol/{version}/sse\n```\n\n6. **Mac PATH Issues:** If you're having trouble with Goose CLI on macOS, try manually adding it to your PATH:\n\n```bash\nexport PATH=\"$HOME/.local/bin:$PATH\"\n```\n\n7. **Restart Services:** If problems persist, try restarting both PiecesOS and Goose, then reconfigure the extension with the current port number.\n\n8. **Use the Correct Mode:** You can experience a blockage of LTM data if you are using *any other chat mode* than **Auto** mode. Make sure to use `goose configure` to change chat modes to avoid issues.\n\n***\n\nYou're now set to enhance your workflow with powerful context retrieval through Pieces MCP integrated seamlessly into Goose. Happy coding!",
    "lastModified": "2025-06-04T17:24:58.467Z",
    "filePath": "mcp/mcp/goose.md"
  },
  "/docs/mcp/prompting": {
    "slug": "/docs/mcp/prompting",
    "metadata": {
      "title": "MCP Prompting",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Prompting Guide\n\nThe `ask_pieces_ltm` tool allows you to query Pieces LTM with natural language questions to retrieve context.\n\nRight now, we recommend setting up the Pieces MCP within [Cursor](https://docs.pieces.app/products/mcp/cursor) or [Visual Studio](https://docs.pieces.app/products/mcp/github-copilot).\n\n### Basic Queries\n\nYou can start prompting with simple user queries, such as:\n\n1. \"What was I working on yesterday?\"\n\n2. \"Ask Pieces what files I modified last week.\"\n\n3. “What Google docs were I referring to this morning before my stand-up meeting?”\n\n### Advanced Parameters\n\nTo refine your queries further, consider using parameters such as time ranges, application sources, or specific topics.\n\n* **Time Ranges**—Try prompting using time ranges, such as “yesterday” or “April 2nd through April 6th” for more accurate, time-based questions.\n\n* **Application Sources**—Ask Pieces to provide contextual data from specific sources, like “Stack Overflow pages I visited on Chrome” or “meeting notes from Notion” to refine source data.\n\n* **Topics**—If your work is spread across different projects, get more accurate responses by including topic-specific keywords, like “Show recent work I’ve done on the authentication migration project”.\n\n### Combining Parameters\n\nCombine parameters for precise queries—like mixing topic keywords with a specific application name within the scope of a timeframe.\n\nHere are some examples of multi-paramater prompting:\n\n1. \"What JavaScript code related to API authentication did I write in VS Code yesterday?\"\n\n2. \"Find notes on database changes between Monday and Wednesday.\"\n\n## Controlling Agent Responses with Pieces MCP\n\nYou can also control the agent's actions directly through your prompts, allowing Pieces MCP to first retrieve relevant data from your context, then instruct the agent to perform specific tasks or updates.\n\nHere’s an example:\n\n* **Prompt:***\"What is the package version update that Mark asked me to make? Make the relevant update in my package manifest.\"*\n\n* **Outcome:** Pieces MCP retrieves Mark's requested package version update from your context, then automatically directs the agent to apply this update to your `package.json` manifest.\n\n## Effective Prompting Tips\n\nSometimes, it can be challenging to create a prompt that gets you exactly what you need.\n\n<Callout type=\"tip\">\n  When using Pieces, especially with its large, on-device repository of personalized workflow data, it's best to use more specific prompts.\n</Callout>\n\nUse these techniques and tips to refine your prompting:\n\n* Clearly specify *timeframes*.\n\n* Mention relevant *applications*.\n\n* Include *technical keywords* relevant to your query.\n\n* Refer explicitly to *open files* when relevant.\n\n* Ask *follow-up questions* for refined results.\n\n<Callout type=\"info\">\n  If you want to read more information on LTM prompting, [check out this guide.](https://docs.pieces.app/products/quick-guides/ltm-prompting)\n</Callout>\n\n### Examples of Effective Prompts\n\nCheck out these example prompts to see how to effectively combine parameters for specific AI outputs using the Pieces MCP for your Agent.\n\n<CardGroup cols={2}>\n  <Card title=\"Development Context\">\n    * “Show examples of React Context usage.\"\n\n    * \"What was my last implementation of API error handling?\"\n\n    * “Have I previously optimized rendering performance in React components?”\n  </Card>\n\n  <Card title=\"Project History\">\n    * \"Track the evolution of the dashboard feature.\"\n\n    * \"Review documented challenges with the payment system.\"\n\n    * “Show the decisions made around UI updates for the onboarding flow.”\n  </Card>\n\n  <Card title=\"Learning Retrieval\">\n    * \"Find recent bookmarks about Kubernetes.\"\n\n    * What resources did I save recently related to Python decorators?”\n\n    * “Show notes taken about GraphQL in March.”\n  </Card>\n\n  <Card title=\"Code & Collaboration\">\n    * “Show code review comments related to database indexing.”\n\n    * “Did we finalize naming conventions for the latest API endpoints?”\n\n    * “What feedback did I leave on recent pull requests?”\n  </Card>\n</CardGroup>",
    "lastModified": "2025-06-04T17:24:58.472Z",
    "filePath": "mcp/mcp/prompting.md"
  },
  "/docs/mcp": {
    "slug": "/docs/mcp",
    "metadata": {
      "title": "Model Context Protocol (MCP)",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "# Model Context Protocol (MCP)\n\nThe Model Context Protocol (MCP) enables seamless integration between Pieces and your favorite AI-powered development tools.\n\n## Available Guides\n\n- **[Get Started](/docs/mcp/get-started)** - Learn the basics of MCP\n- **[MCP Prompting](/docs/mcp/prompting)** - Master MCP prompting techniques\n- **[MCP → Cursor](/docs/mcp/cursor)** - Connect MCP with Cursor\n- **[MCP → GitHub Copilot](/docs/mcp/github-copilot)** - Connect MCP with GitHub Copilot\n- **[MCP → Goose](/docs/mcp/goose)** - Connect MCP with Goose\n\nChoose a guide above to get started with MCP!",
    "lastModified": "2025-06-04T17:24:58.444Z",
    "filePath": "mcp.md"
  },
  "/docs/meet-pieces/fundamentals": {
    "slug": "/docs/meet-pieces/fundamentals",
    "metadata": {
      "title": "Core Features of Pieces",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## The Pillars\n\nPieces powers developers to new levels of productivity by introducing the **\\[1] Long-Term Memory Engine (LTM-2)**, a powerful “artificial memory” that remembers your workflow and automatically saves context for future use.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/fundamentals/ltm-2-header.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nNext, Pieces offers the **\\[2] Pieces Copilot**, assisting with day-to-day tasks like debugging code, generating comments, and answering questions—with as much or as little workflow context as you need.\n\nFinally, Pieces provides the **\\[3] Pieces Drive**, an intelligent and enriched material management experience that ensures your most important code—and other useful materials—are always at hand.\n\n## LTM-2\n\nThe Long-Term Memory Engine (LTM-2) captures live context from your workflow over a 7-day period, enhancing your ability to recall and access past materials.\n\n***\n\n*Pieces Copilot with LTM-2 Context*\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734028488469/d128a760-7e91-4dbf-8cfc-e7fc257488b7.png\" alt=\"\" align=\"left\" fullwidth=\"true\" />\n\n***\n\nYou can ask questions like, “*Can you provide me with the link to the Firestore database I was working in last week?”* or “*Summarize the contents of the brief on plugin updates in the Google doc Tim shared”* for game-changing productivity enhancement.\n\nHere are some ways to take advantage of the LTM-2:\n\n* `Contextual Recall`: LTM-2 remembers the websites you visit, the code you work on, and the snippets you save. This context can be accessed via the Pieces Desktop App or within Copilot Chats inside your favorite IDE—with the relevant Pieces extension or plugin installed.\n\n* `Natural Language Queries`: Ask contextual questions about your previous workflow, and LTM-2 will source the relevant anchor and provide you with a clickable URL or path to a file on your device—or try asking it to summarize the contents of a webpage you visited earlier in the day.\n\n* `Integrated Access`: Utilize LTM-2 through the Pieces Desktop App or within your favorite development tools via browser or IDE integrations.\n\n### Workstream Activity\n\nPieces for Developers has just launched a new flagship feature called [Workstream Activity](https://docs.pieces.app/products/desktop/workstream-activity).\n\nThe Workstream Activity view in the [Pieces Desktop App](https://docs.pieces.app/products/desktop) uses the advanced Long-Term Memory (LTM-2) Engine to collect and summarize your recent tasks, discussions, code reviews, and more.\n\n***\n\n*Workstream Activity in the Pieces Desktop App*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/desktop_app_assets/workstream_activity/new_workstream_activity_media/ltm_rollup_demo_screenshot.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n[PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os) collects the LTM data and provides a concise roll-up of that data *every 20 minutes,* drastically reducing the repetitive context-setting typical of many AI tools.\n\nEach roll-up is a snapshot that includes details on main tasks, projects, issues resolved, key decisions, discussions, documents, and code you’ve reviewed—often with helpful links included!\n\nYou can also start Pieces Copilot chats with individual roll-ups, eliminating the need to manually enter context.\n\n## Pieces Copilot\n\nPieces Copilot leverages advanced Large Language Models (LLMs) to assist you in understanding and generating code, accessible through your IDEs, editors, and the Desktop App.\n\n***\n\n*Pieces Copilot for Code Generation*\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734028533289/f37f7075-f2d2-4a99-b948-c23fd70e7257.png\" alt=\"\" align=\"middle\" fullwidth=\"true\" />\n\n***\n\nThe Pieces Copilot, accessible via the Pieces Desktop App or any of our IDE or browser integrations, helps with:\n\n* `Understanding Code`: Get explanations of complex code snippets, learn how a particular function works, or explore alternative implementations.\n\n* `Code Generation`: Generate code or code comments based on specific requirements, either from raw prompting or in-environment contextual understanding.\n\n* `LLM Flexibility`: Switch between local models for privacy and speed, or cloud-hosted models for more advanced capabilities.\n\n## Pieces Drive\n\nSaving and managing code and other materials is effortless and efficient with Pieces Drive.\n\n***\n\n*Viewing Saved Materials with Pieces Drive*\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734026181487/e947ec50-4346-49f1-a967-62b218aafc47.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\nThe Pieces Drive lets you save important developer resources, like notes, useful code, links, and more to your personal Local Repository—from which you can then view, edit, re-use, and share these materials via Pieces Shareable Links.\n\nIntended recipients are not required to have a Pieces account, so cross-platform collaboration is exceptionally easy.\n\nWith Pieces, you’ll find Pieces Drive integrated into your favorite:\n\n* `IDEs and Editors`: Extensions for [VS Code](https://docs.pieces.app/products/extensions-plugins/visual-studio-code), [JetBrains IDEs](https://docs.pieces.app/products/extensions-plugins/jetbrains), [Sublime Text](https://docs.pieces.app/products/extensions-plugins/sublime), and more enable you to save snippets without leaving your coding environment.\n\n* `Web Browsers`: The Pieces Web Extension let you capture code from documentation sites, forums, or any web page using your favorite browsers.\n\n* `Collaboration Tools`: Integrations with tools like [Obsidian](https://docs.pieces.app/products/obsidian) help you save code from notes and shared documents.",
    "lastModified": "2025-06-04T17:24:58.480Z",
    "filePath": "meet-pieces/fundamentals.md"
  },
  "/docs/meet-pieces/linux-installation-guide": {
    "slug": "/docs/meet-pieces/linux-installation-guide",
    "metadata": {
      "title": "Installation Guide | Linux",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1740162782513/1fdc656d-398c-4e69-ba4a-381c880fffe0.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Install Pieces for Linux\n\nFollow the steps below to download and install Pieces for Linux using the Command-Line Interface (CLI).\n\n### Requirements\n\nThere are several requirements that your Linux device must meet to download and install the Pieces Desktop App, PiecesOS, and *ensure LTM-2 compatibility.*\n\n* **Snap Support:** Ensure `snapd` is installed and enabled on your system. Most recent Ubuntu releases include `snapd` by default. If needed, install `snapd` by following the official `snapd` documentation.\n\n* **Administrator Access:** You’ll need `sudo` privileges to install `snap` packages.\n\n* **Minimum OS Type:** PiecesOS has been tested and developed primarily for Ubuntu 22+ or later-based distributions, so make sure your system is updated to at least Ubuntu 22+ or later.\n\n* **X11 Window Manager:** Virtual Linux machines or dedicated instances of Linux, even PiecesOS-compatible Ubuntu 22+ distributions, *must utilize* **X11** as the proprietary Window Manager.\n\n<Callout type=\"tip\">\n  To determine which display manager your Linux device is using, go to **Settings,** then **System,** and **System Details** to see if you are using an X11 or a non-LLVM compatible manager.\n</Callout>\n\n<Card title=\"Download — Linux\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1740080977439/7ad5c157-3c13-4f22-8e83-6d159b135c28.png\">\n  *Ubuntu 22.04+ required.*\n\n  ***\n\n  Run these commands **in order** to install and properly set up the Pieces Desktop App and it’s core dependencies:\n\n  1. `sudo snap install pieces-os`\n\n  2. `sudo snap connect pieces-os:process-control :process-control`\n\n  3. `sudo snap install pieces-for-developers`\n\n  Then, type `pieces-for-developers` to launch the application directly from your terminal.\n</Card>\n\nYour Linux device must be running a supported distribution of Ubuntu—**Ubuntu 22+.**\n\nClick here for documentation [on determining your OS version.](https://docs.pieces.app/products/meet-pieces/troubleshooting/linux#checking-ubuntu-version)\n\n## Installation Method\n\nInstallation of PiecesOS and the Pieces Desktop App on supported Linux systems is done using the terminal (CLI).\n\n## Post-Installation Tips\n\nRead the documentation below for tips and information to ensure you’re up and running with the latest versions of PiecesOS and the Pieces Desktop App, as well as steps to uninstall Pieces software from your Linux device.\n\n### Updating\n\nThe Pieces Desktop App automatically downloads and installs new updates.\n\nYou can also manually check for updates to PiecesOS and the Pieces Desktop App by clicking the profile icon nested in the search bar at the top of your Pieces Desktop App view, then selecting `Check for Desktop App Updates` or `Check for PiecesOS Updates.`\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/get_started_linux/checking_pieces_desktop_app_for_pieces_os_updates.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Uninstalling\n\nYou can uninstall PiecesOS and the Pieces Desktop App using `snap` commands directly from your terminal.\n\n<Callout type=\"info\">\n  When running both of these commands, you will be prompted to enter your device’s local account password due to the `sudo` command.\n</Callout>\n\n<Steps>\n  <Step title=\"Removing the Pieces Desktop Application\">\n    Type `sudo apt remove pieces-for-developers` and press `enter`.\n  </Step>\n\n  <Step title=\"Removing PiecesOS\">\n    Type `sudo apt remove pieces-os` and press `enter`.\n  </Step>\n\n  <Step title=\"Removing Unused Dependencies (Optional)\">\n    Type `sudo apt autoremove` and press `enter`.\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/get_started_linux/uninstall_pfd_from_terminal.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Additional Resources\n\nClick here for additional [documentation on troubleshooting](https://docs.pieces.app/products/meet-pieces/troubleshooting/linux) or reach out to [support.](https://docs.pieces.app/products/support)",
    "lastModified": "2025-06-04T17:24:58.484Z",
    "filePath": "meet-pieces/linux-installation-guide.md"
  },
  "/docs/meet-pieces/macos-installation-guide": {
    "slug": "/docs/meet-pieces/macos-installation-guide",
    "metadata": {
      "title": "Installation Guide | macOS",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1740163265159/1c6da573-32cf-4256-8c67-921cd431a1c2.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Recommended Installation Method\n\nClick the **buttons below** to download Pieces for your macOS device.\n\n<CardGroup cols={2}>\n  <Card title=\"Download — PiecesOS & Pieces Desktop App (ARM)\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1747074321429/80687359-563d-425d-a6c5-37b7b81a6dc5.png\" href=\"https://builds.pieces.app/stages/production/macos_packaging/pkg-arm64/download?download=true&product=DOCUMENTATION_WEBSITE\" external=\"true\">\n    *macOS 13.0 (Ventura) or higher required*\n  </Card>\n\n  <Card title=\"Download — PiecesOS & Desktop App (Intel)\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1747074283357/7fb8bef5-ce0d-4412-876e-88a8d4afabd8.png\" href=\"https://builds.pieces.app/stages/production/macos_packaging/pkg/download?download=true&product=DOCUMENTATION_WEBSITE\" external=\"true\">\n    *macOS 13.0 (Ventura) or higher required*\n  </Card>\n</CardGroup>\n\n<Callout type=\"alert\">\n  PiecesOS is a required Core Dependency. Please install it alongside the Pieces Desktop App.\n</Callout>\n\n## Install the PKG\n\nOnce you’ve downloaded the correct `.pkg` file, it’s time to run the installer.\n\n<Steps>\n  <Step title=\"Open the Installer\">\n    Double-click the `.pkg` file to launch the macOS installer.\n  </Step>\n\n  <Step title=\"Follow the On-Screen Prompts\">\n    Navigate through the introduction screen, select the install location, and enter your administrator credentials if prompted, then click `Install Software`.\n  </Step>\n</Steps>\n\n### System Requirements\n\nThere are <mark>(2)</mark> requirements for installing Pieces on your macOS device:\n\n1. Compatible OS Version—**macOS 13.0 (Ventura) or higher**\n\n2. Compatible installer for your device’s architecture—**Apple Silicon (ARM) or Intel**\n\nClick here for a quick guide on [determining your OS type](https://docs.pieces.app/products/meet-pieces/troubleshooting/macos#checking-os-version), and here for [how to check your device’s CPU architecture.](https://docs.pieces.app/products/meet-pieces/troubleshooting/macos#checking-cpu-type)\n\n***\n\n| **Component**      | **Minimum**                                                                   | **Recommended**                      | **Notes**                                                        |\n| ------------------ | ----------------------------------------------------------------------------- | ------------------------------------ | ---------------------------------------------------------------- |\n| *CPU*              | Any modern CPU                                                                | Multi-core CPU                       | Avoid dual-core processors—aim for at least a 4-core CPU.        |\n| *RAM (Local Mode)* | 8 GB total system RAM with 2 GB free                                          | 16 GB total system RAM or more       | Applies when PiecesOS is running locally.                        |\n| *RAM (Cloud Mode)* | 8 GB total system RAM with 1 GB free                                          | 16 GB total system RAM or more       | Applies when PiecesOS is running in cloud mode.                  |\n| *Disk Space*       | 2 GB minimum (1 GB for PiecesOS + 0.5–1 GB for data), with at least 4 GB free | 8 GB with at least 6 GB free or more | Ensure additional free space for data storage and future growth. |\n\n***\n\n## Alternative Installations\n\nIf you cannot use the `.pkg` installer for any reason, you can install PiecesOS and the Pieces Desktop App using standalone `.dmg` files or by using `Homebrew` through your Mac’s terminal.\n\n### via DMG (Apple Silicon / M-Series / ARM)\n\nInstall both PiecesOS and the Pieces Desktop App **in order** by clicking the download cards below for your ARM device.\n\n<CardGroup cols={2}>\n  <Card title=\"Download — PiecesOS (DMG / ARM)\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741277926767/73a4deec-0825-4138-9d1f-247b1c149866.webp\" href=\"https://builds.pieces.app/stages/production/os_server/dmg-arm64/download\">\n    **Step 1:** Download PiecesOS\n\n    ***\n\n    *Required Dependency*\n\n    macOS 13.0 (Ventura) or higher required.\n  </Card>\n\n  <Card title=\"Download — Pieces Desktop App (DMG / ARM)\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741277928929/0bcc9837-5849-411e-98ef-6ad9e118c36f.webp\" href=\"https://builds.pieces.app/stages/production/pieces_for_x/dmg-arm64/download\">\n    **Step 2:** Download the Desktop App\n\n    ***\n\n    *Recommended Method*\n\n    macOS 13.0 (Ventura) or higher required.\n  </Card>\n</CardGroup>\n\n### via DMG (Intel)\n\nInstall both PiecesOS and the Pieces Desktop App **in order** by clicking the download cards below for your Intel device.\n\n<CardGroup cols={2}>\n  <Card title=\"Download — PiecesOS (DMG / Intel)\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742414057539/e91879e6-3aa5-4473-a944-6426ef7113d3.png\" href=\"https://builds.pieces.app/stages/production/os_server/dmg/download\">\n    **Step 1:** Download PiecesOS\n\n    ***\n\n    *Required Dependency*\n\n    macOS 13.0 (Ventura) or higher required.\n  </Card>\n\n  <Card title=\"Download — Pieces Desktop App (DMG / Intel)\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742414060905/c16603bc-e289-45f8-b027-61d035a1e09e.png\" href=\"https://builds.pieces.app/stages/production/pieces_for_x/dmg/download\">\n    **Step 2:** Download the Desktop App\n\n    ***\n\n    *Recommended Method*\n\n    macOS 13.0 (Ventura) or higher required.\n  </Card>\n</CardGroup>\n\n## Install the DMG\n\nAfter downloading the correct `.dmg` file, it’s time to install the Pieces Desktop App.\n\n<Steps>\n  <Step title=\"\">\n    Open your **Downloads** folder (or wherever you saved the installer) and look for the `.dmg` file you just downloaded (e.g., `Pieces.dmg`).\n  </Step>\n\n  <Step title=\"Mount the DMG\">\n    Double-click the `.dmg` file to mount it.\n  </Step>\n\n  <Step title=\"Drag & Drop into Applications\">\n    Drag the application icon from the mounted `.dmg` window into your **Applications** folder.\n  </Step>\n\n  <Step title=\"Eject the DMG\">\n    Go back to **Finder**, right-click the mounted image, and select **Eject** to unmount it.\n  </Step>\n</Steps>\n\n## Install Using Homebrew\n\nAlternatively, you may opt to install Pieces via Homebrew in your terminal.\n\n<Card title=\"Installing via Homebrew\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741278053952/7feb3fa1-4a4b-47ff-86c2-326cf634f593.png\">\n  You can install PiecesOS manually using Homebrew from your device’s terminal.\n\n  To do so:\n\n  1. Ensure Homebrew is installed on your system.\n\n  2. Run `brew install --cask pieces` in your terminal and press `return` to install the Pieces `brew` package.\n\n  This command installs both the Pieces Desktop App and PiecesOS cask. If prompted, enter your administrator password.\n\n  3. Wait for installation to complete—Homebrew will download and install the necessary files.\n\n  Once it’s done, you’ll see a message indicating successful installation.\n</Card>\n\n## Post-Installation Tips\n\nRead the documentation below for some tips and information to make sure you’re up and running with the latest version(s) of PiecesOS and the Pieces Desktop App, as well as steps to uninstall Pieces software from your Apple device.\n\n### Updating\n\nThe Pieces Desktop App automatically downloads and installs new updates.\n\nYou can also manually check for updates to PiecesOS and the Pieces Desktop App by clicking the `Profile` icon nested in the **Search Bar** at the top of your Pieces Desktop App view, then selecting `Check for Desktop App Updates` or `Check for PiecesOS Updates`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/get_started/macos/macos_check_pfd_for_updates_profile_dropdown.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Uninstalling\n\nOn your macOS device, navigate to **Finder,** then select **Applications.**\n\nScroll or search until you find both `Pieces` and `PiecesOS.` Right-click on these two applications and select `Move to Trash`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/get_started/macos/macos_how_to_uninstall_pfd.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Additional Resources\n\nClick here for additional [documentation on troubleshooting](https://docs.pieces.app/products/meet-pieces/troubleshooting/macos) or reach out to [support.](https://docs.pieces.app/products/support)",
    "lastModified": "2025-06-04T17:24:58.488Z",
    "filePath": "meet-pieces/macos-installation-guide.md"
  },
  "/docs/meet-pieces/troubleshooting/cross-platform": {
    "slug": "/docs/meet-pieces/troubleshooting/cross-platform",
    "metadata": {
      "title": "Cross-Platform Issues",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/cross_platform/troubleshooting_multiOS.png\" alt=\"Displaying cross-platform-1.png\" align=\"left\" fullwidth=\"true\" />\n\n***\n\n## Basic Troubleshooting\n\nFind links to detailed sections on specific troubleshooting steps as well as information on choosing between cloud and local models, system requirements, and more.\n\n<on-device-storage />\n\n## Versions & Updates\n\nMany issues can stem from out-of-date plugins, extensions, Ollama, the Pieces Desktop App, or PiecesOS itself.\n\n### Updating PiecesOS\n\nBoth PiecesOS and the Pieces Desktop Application update automatically if installed through the Pieces Suite Installer.\n\nFor standalone installations (non-macOS/Linux store-based), updates are checked daily or upon application launch, prompting you to install or delay.\n\nSee your specific OS page for platform-specific instructions on updating PiecesOS:\n\n* [macOS](https://docs.pieces.app/products/meet-pieces/troubleshooting/macos#updating-piecesos)\n\n* [Windows](https://docs.pieces.app/products/meet-pieces/troubleshooting/windows#updating-piecesos)\n\n* [Linux](https://docs.pieces.app/products/meet-pieces/troubleshooting/linux#updating-piecesos)\n\n### Updating the Pieces Desktop App\n\nEnsuring the Desktop App is up-to-date is critical.\n\nSee your specific OS page for platform-specific update instructions on updating the Pieces Desktop App:\n\n* [macOS](https://docs.pieces.app/products/meet-pieces/troubleshooting/macos#updating-the-pieces-desktop-app)\n\n* [Windows](https://docs.pieces.app/products/meet-pieces/troubleshooting/windows#updating-the-pieces-desktop-app)\n\n* [Linux](https://docs.pieces.app/products/meet-pieces/troubleshooting/linux#updating-the-pieces-desktop-app)\n\n## Connection Issues with PiecesOS\n\nYou may occasionally encounter connection issues with PiecesOS or your Personal Cloud, resulting in:\n\n* Pieces Copilot not generating outputs\n\n* Difficulty finding saved materials\n\n* Trouble sharing code snippets\n\nThe quickest way to resolve this basic connection issue is to restart PiecesOS, then check for updates.\n\n### Restarting PiecesOS & Checking Updates\n\nTo restart and check for updates to PiecesOS:\n\n1. Restart PiecesOS\n\n2. Ensure PiecesOS is running (look for the Pieces Icon in your system tray or menu bar)\n\n3. Check for and install available updates\n\n4. Verify that the Pieces Desktop Application and the plugin or extension you are attempting to use is up-to-date\n\n## Common Installation Issues\n\nCommon issues can occur when setting up PiecesOS and the Pieces Desktop App for the first time.\n\nPlatform-specific solutions are detailed on their respective OS pages:\n\n* [macOS](https://docs.pieces.app/products/meet-pieces/troubleshooting/macos#common-installation-issues)\n\n* [Windows](https://docs.pieces.app/products/meet-pieces/troubleshooting/windows#common-installation-issues)\n\n* [Linux](https://docs.pieces.app/products/meet-pieces/troubleshooting/linux#common-installation-issues)\n\n## Using Local Models\n\nRunning Pieces software with a local LLM through **Ollama** can offer greater privacy, faster responses (when properly configured), and independence from cloud dependencies.\n\nBy utilizing the Ollama framework, users can efficiently deploy and manage local language models tailored to their needs.\n\nHowever, local models often require robust hardware configurations and careful optimization to run smoothly.\n\nOlder devices, regardless of operating system, may struggle to meet the hardware demands of these LLMs, even with Ollama's streamlined setup.\n\n### Minimum System Requirements\n\nLocal models demand more from your system than their cloud-hosted counterparts.\n\nTo ensure a stable, responsive experience—make sure your device fits these general minimum device specifications, pulled from Ollama documentation and other experience-tested public sources.\n\n<Steps>\n  <Step title=\"Operating System\">\n    Ollama is supported on macOS, Windows, and Linux devices—but you need to make sure your operating system is running at the correct minimum version to avoid compatibility issues.\n\n    * **macOS:** macOS 13.0 (Ventura) or higher\n\n    * **Windows:** Windows 10 or higher\n\n    * **Linux:** Ubuntu 22+ or higher\n  </Step>\n\n  <Step title=\"RAM\">\n    Your system should have a minimum amount of RAM depending on the local model you’re trying to run. More RAM may further improve performance and reduce bottlenecks.\n\n    * **3B Models:** 8GB of RAM\n\n    * **7B Models:** 16GB of RAM\n\n    * **13B Models:** 32GB of RAM\n  </Step>\n\n  <Step title=\"CPU\">\n    If your system doesn’t have a dedicated or otherwise capable GPU, running a CPU-tuned model may be in your best interests.\n\n    * **Recommended:** Any modern CPU with at least 4 cores\n\n    * **13B Models:** Any modern CPU with at least 8 cores\n  </Step>\n\n  <Step title=\"GPU\">\n    While you don’t need a GPU to run a local Ollama model as long as the LLM is CPU-tuned, a GPU can significantly speed up inference and the training of custom models.\n\n    * **Recommended:** Any modern GPU with at least 6GB of VRAM\n  </Step>\n\n  <Step title=\"Disk Space\">\n    Local large language models can occupy significant disk space, so ensure you have enough capacity for both the core installation and any custom models you plan to download or train.\n\n    * **Minimum:** At least 12GB of free storage space for installing Ollama and other base models.\n\n    * **Additional Storage:** Required for larger models that have additional dependencies\n  </Step>\n</Steps>\n\n### Minimum System Requirements for Pieces Software\n\nYour device, regardless of platform, should meet the following basic system specifications for using Pieces for Developers software.\n\n<pos-pfd-system-reqs />\n\n### Choosing the Right Model\n\nSelect a model that matches your system’s capabilities and performance limitations, especially if you’re running an older or weaker device.\n\n* **Lightweight Models:** Opt for smaller or **quantized models** if you’re using older hardware or have limited VRAM. Quantized models are optimized to reduce memory usage, making them easier to run without significantly impacting output quality for general tasks.\n\n* **GPU-Tuned Models:** If you have a strong GPU with enough VRAM, GPU-accelerated models often run faster and produce results more efficiently.\n\n* **CPU-Tuned Models:** If you lack a dedicated GPU or have low GPU memory, CPU-tuned models are a fallback option. Although slower, they can still provide consistent performance.\n\n### Local Model Crashing\n\nIf you are running into ‘hanging’ or crashing issues when attempting to power Pieces using a local LLM, it may be because of your system’s hardware.\n\nInsufficient system resources, like RAM or VRAM may cause hiccups, slowdowns, and other glitches.\n\nThere are a few options available to you for troubleshooting:\n\n1. **Check Hardware:** Verify that you have sufficient RAM, VRAM, and CPU headroom as recommended by the model.\n\n2. **Update Drivers:** Run `vulkaninfo` (or a similar tool) to check for GPU or Vulkan-related errors, if you have a Vulkan-based GPU. Update your GPU drivers if you detect compatibility issues.\n\n3. **Model Switching:** If you experience crashes or slowdowns, try switching to a less resource-intensive local model. Reducing complexity can stabilize performance.\n\nIf you’ve tried all of these troubleshooting steps but are still experiencing crashes, hanging-time, or other instabilities, you may need to switch to a cloud-based LLM.\n\n## Vulkan-based GPUs\n\nNVIDIA and AMD both utilize the Vulkan API framework in their GPUs, but there are known issues with using Vulkan GPUs for AI and LLM-centered workloads.\n\nFor example, a corrupted or outdated Vulkan API can cause crashes.\n\nIf you are experiencing this issue, you can check Vulkan health in your terminal or command line and scanning for errors or warning message—if there are any issues detected, **update your GPU drivers.**\n\n### Checking Vulkan\n\nTo check your Vulkan health status, run `vulkaninfo` in your terminal or command line and look for errors or warnings.\n\n### Updating GPU Drivers\n\nIf issues are detected, update your GPU drivers to ensure Vulkan compatibility and stability.\n\n## Checking Hardware\n\nIt may be necessary to verify your system’s specifications if you experience ongoing issues.\n\nSee the OS-specific pages for instructions on how to check CPU, RAM, and GPU details:\n\n* [macOS](https://docs.pieces.app/products/meet-pieces/troubleshooting/macos#checking-cpu-type)\n\n* [Windows](https://docs.pieces.app/products/meet-pieces/troubleshooting/windows#checking-hardware-specifications)\n\n* [Linux](https://docs.pieces.app/products/meet-pieces/troubleshooting/linux#checking-system-information)",
    "lastModified": "2025-06-04T17:24:58.498Z",
    "filePath": "meet-pieces/troubleshooting/cross-platform.md"
  },
  "/docs/meet-pieces/troubleshooting/linux": {
    "slug": "/docs/meet-pieces/troubleshooting/linux",
    "metadata": {
      "title": "Issues | Linux",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/troubleshooting_linux.png\" alt=\"Displaying linux.png\" align=\"left\" fullwidth=\"true\" />\n\n***\n\n## Installation & Updating Fixes\n\nYou can find detailed instructions on updating PiecesOS and the Pieces Desktop App on your Linux device using the terminal.\n\nAdditionally, you can check your system's OS and hardware specifications to ensure they meet the minimum recommended requirements.\n\n<on-device-storage />\n\n## Versions & Updates\n\nMany issues can stem from running outdated versions of PiecesOS or the Pieces Desktop App on Linux.\n\n### Updating PiecesOS\n\nOn Linux, PiecesOS and the Pieces Desktop App are distributed via snaps (for Ubuntu-based systems).\n\nTo update PiecesOS on Linux:\n\n1. Run `snap info pieces-os` to check the current version of PiecesOS\n\n2. Run `sudo snap refresh` to update PiecesOS if a newer version is available\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/snap_refresh_POS.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Updating the Pieces Desktop App\n\nSimilar to PiecesOS, you can update the Pieces Desktop App by:\n\n1. Running `snap info pieces-for-developers` to check the current version\n\n2. Running `sudo snap refresh` to apply any available updates\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/snap_refresh_PFD.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Common Installation Issues\n\nOfficial support is provided for **Ubuntu 22.04+ and Ubuntu-based distributions.** Other distributions may work but *aren’t guaranteed.*\n\n### Checking Distribution Compatibility\n\nEnsure you’re running a supported Ubuntu-based distribution.\n\nIf not, consider switching to a supported environment, as installation on non-Ubuntu distributions isn’t guaranteed.\n\n### Updating Snapd\n\nSnap-based installations require an up-to-date snap `daemon`:\n\n* Run `sudo snap refresh` to ensure `snapd` and its packages are current\n\n### Adjusting Graphics & Display Settings\n\nIf installation or UI issues persist, consider the following:\n\n* **Switch Between X11 and Wayland:** Some applications may work better on one display protocol than the other. Try switching to X11 for compatibility or Wayland for newer features. You can usually select this at the login screen.\n\n<Callout type=\"alert\">\n  The LTM-2 Engine is designed to work with the X11 Window Manager. Other Window Managers, such as Wayland, are *not compatible.* This means that long-term memory functionality with certain Linux Virtual Machines (VMs) is not possible at this time.\n</Callout>\n\n* **Update your GPU Drivers:** Ensure they are up to date. For NVIDIA, check for proprietary driver updates. AMD and Intel users should verify that their open-source drivers are up to date.\n\n* **Optimize Graphics Configurations:** Use tools like `nvidia-settings`, `radeon-profile`, or similar utilities to adjust your GPU settings for better performance and stability.\n\nThese adjustments can resolve many graphical and display-related issues you may experience while using Pieces for Developers or PiecesOS.\n\n## Checking System Information\n\nYou can verify your system’s hardware configuration and ensure it meets recommended specifications by running specific commands in your terminal.\n\n### Checking CPU Information\n\nTo determine your CPU type and find other important information, type `lscpu` in your terminal and press `Enter`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/lscpu_UBUNTU.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Checking GPU Information\n\nTo determine your GPU type and find other important information, `lspci | grep -i vga` in your terminal and press `Enter`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/lscpi_UBUNTU.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nConfirm that your CPU, GPU, and memory resources are sufficient for running PiecesOS and local AI models (if applicable).\n\nClick here for documentation on [what we recommend for minimum device specifications](https://docs.pieces.app/products/meet-pieces/troubleshooting/cross-platform#hardware-recommendations) if you plan on utilizing a local LLM.\n\n### Checking Ubuntu Version\n\nIf the Pieces Installer is not working as intended, you could have an outdated version of Ubuntu. The minimum Ubuntu version that Pieces will run on is **Ubuntu 18**.\n\nTo check what version of Ubuntu you’re running:\n\n* Open the **Settings** on Ubuntu\n\n* Locate the **System** section at the bottom of the left-hand side menu and click it\n\n* Open the **About** section and locate the **Operating System** label\n\nThis section will will display your Ubuntu version information.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/linux/settings_about_system.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Consulting Online Resources\n\nIf you encounter persistent installation issues, consult online forums or community guides related to snap and Ubuntu-specific troubleshooting steps.\n\n## Restart & Retry\n\nIf you’ve updated components, checked hardware, and adjusted configurations without success, restart your machine and try again.\n\nIf the problem persists, please open a <a target=\"_blank\" href=\"https://github.com/pieces-app/support/issues\">GitHub issue</a> for further assistance, or book a call with our engineers.",
    "lastModified": "2025-06-04T17:24:58.503Z",
    "filePath": "meet-pieces/troubleshooting/linux.md"
  },
  "/docs/meet-pieces/troubleshooting/macos": {
    "slug": "/docs/meet-pieces/troubleshooting/macos",
    "metadata": {
      "title": "Issues | macOS",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/troubleshooting_macos.png\" alt=\"Displaying macos.png\" align=\"left\" fullwidth=\"true\" />\n\n***\n\n## Installation & Updating Fixes\n\nPiecesOS and the Pieces Desktop App can be downloaded using several installation methods, and they can be updated differently depending on the method used.\n\nYou can also find information below on how to determine your Apple device's CPU architecture and OS version.\n\n<on-device-storage />\n\n## Manual Installation Methods\n\nIf you’re experiencing difficulties installing PiecesOS or the Pieces Desktop App, you can manually install both software by downloading the standalone files or using terminal commands.\n\n<Callout type=\"alert\">\n  If you’re unsure which `.dmg` or `.pkg` you need based on your device’s CPU, [click here.](https://docs.pieces.app/products/meet-pieces/troubleshooting/macos#checking-cpu-type)\n</Callout>\n\n### via PKG Files\n\nMake sure to select the correct Pieces `.pkg` for your macOS device—Apple Silicon (ARM) or Intel.\n\n| **Apple Silicon (ARM)**                                                                                                                                                                                      | **Intel**                                                                                                                                                                                |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| <a target=\"_blank\" href=\"https://builds.pieces.app/stages/production/macos_packaging/pkg-arm64/download?download=true&product=DOCUMENTATION_WEBSITE\">Download Pieces PKG for macOS (Apple Silicon / ARM)</a> | <a target=\"_blank\" href=\"https://builds.pieces.app/stages/production/macos_packaging/pkg/download?download=true&product=DOCUMENTATION_WEBSITE\">Download Pieces PKG for macOS (Intel)</a> |\n\n### via DMG Files\n\nMake sure to select the correct Pieces `.dmg` files for your macOS device—Apple Silicon (ARM) or Intel.\n\n| **Apple Silicon (ARM)**                                                                                                                                                                  | **Intel**                                                                                                                                                                                         |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| <a target=\"_blank\" href=\"https://builds.pieces.app/stages/production/os_server/dmg-arm64/download?download=true&product=DOCUMENTATION_WEBSITE\">Download PiecesOS DMG for macOS (ARM)</a> | <a target=\"_blank\" href=\"https://builds.pieces.app/stages/production/os_server/dmg/download?download=true&product=DOCUMENTATION_WEBSITE\">Download PiecesOS DMG for macOS (Intel)</a>              |\n| [Download Pieces Desktop App DMG for macOS (ARM)](https://builds.pieces.app/stages/production/pieces_for_x/dmg-arm64/download?download=true\\&product=DOCUMENTATION_WEBSITE)              | <a target=\"_blank\" href=\"https://builds.pieces.app/stages/production/pieces_for_x/dmg/download?download=true&product=DOCUMENTATION_WEBSITE\">Download Pieces Desktop App DMG for macOS (Intel)</a> |\n\n### via Homebrew\n\nA singular brew command, `brew install—- cask pieces`, automatically manages installing PiecesOS and the Pieces Desktop App.\n\n## Versions & Updates\n\nMany issues can stem from out-of-date plugins, extensions, the desktop app, or PiecesOS.\n\n### Updating PiecesOS\n\nTo restart and check for updates to PiecesOS on macOS:\n\n1. Restart PiecesOS\n\n2. Ensure PiecesOS is running (look for the **Pieces Icon** in your system tray)\n\n3. Check for and install available updates\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_checking_piecesos_for_updates.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Updating the Pieces Desktop App\n\nUpdating the **Pieces Desktop App** on Windows and macOS systems can be done by clicking the **user icon** to the right of the **search bar** at the top of the Pieces Desktop Window, then clicking `Check for Desktop App Updates` or `Check for PiecesOS Updates`.\n\nTo check the Pieces Desktop App for updates on macOS:\n\n1. Open the Pieces Desktop App\n\n2. Click the **user icon** to the right of the **search bar** at the top of the main app view\n\n3. Click `Check for Desktop App Updates`\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_check_pfd_for_updates_profile_dropdown.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can also click `Check for PiecesOS Updates` as an alternative to doing so in from the PiecesOS system window in your taskbar.\n\n## Common Installation Issues\n\nThere are a range of common install issues on Apple devices, like having an out-of-date OS version or selecting the wrong installation package.\n\n### Checking OS Version\n\nPieces Suite applications require a minimum macOS version of **macOS 13.0 (Ventura).** If you’re experiencing installation issues, you should first check your OS version to make sure it’s up-to-date.\n\nTo determine your Apple device’s version of macOS:\n\n1. Click the **Apple** icon in the top-left corner of your screen\n\n2. Select `About This Mac`\n\n3. Under your device name (i.e., MacBook Air), look for the last line on the list, titled `macOS`\n\nThe `macOS` line will report what version of macOS installed, e.g., `Sequoia 15.1.1`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/macos/macos_checking_about_mac.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Checking CPU Type\n\nIntel and Apple Silicon (ARM) devices run on entirely separate CPU architectures, so downloading the wrong package for your Apple device can cause apps from the Pieces Suite to be rendered useless.\n\nTo determine what CPU architecture your Apple device utilizes:\n\n1. Click the **Apple () icon** in the top-left corner of your screen.\n\n2. Select **About This Mac**, and look for the **Overview section.** The first line will contain your CPU type:\n\n* **Apple Silicon / ARM:** You will see an M-Series processor, e.g., `Apple M3`\n\n* **Intel:** You will see an Intel processor, e.g., `2.6 GHz Intel Core i7`\n\nOnce you’ve determined your CPU architecture, [download the correct installation package accordingly.](https://docs.pieces.app/products/meet-pieces/macos-installation-guide#recommended-installation-method)\n\n## Restart & Retry\n\nIf installation fails due to having an outdated version of macOS or installing the wrong package for your device’s architecture, restart your machine and try the installation again from scratch.\n\nIf the problem persists, please open a <a target=\"_blank\" href=\"https://github.com/pieces-app/support/issues\">GitHub issue</a> for further assistance, or book a call with our engineers.",
    "lastModified": "2025-06-04T17:24:58.506Z",
    "filePath": "meet-pieces/troubleshooting/macos.md"
  },
  "/docs/meet-pieces/troubleshooting/windows": {
    "slug": "/docs/meet-pieces/troubleshooting/windows",
    "metadata": {
      "title": "Issues | Windows",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/troubleshooting_windows.png\" alt=\"Displaying windows.png\" align=\"left\" fullwidth=\"true\" />\n\n***\n\n## Installation & Updating Fixes\n\nPiecesOS and the Pieces Desktop App can be downloaded in several ways, and the update process varies based on the method you used, like whether you installed them via WinGet or `.exe` files.\n\n<on-device-storage />\n\n## Manual Installation Methods\n\nIf you’re experiencing difficulties with installing PiecesOS or the Pieces Desktop App, you can install both applications manually by downloading the standalone `.exe` or `.appinstaller` files.\n\n### via EXE Files\n\nYou can download the individual `.exe` files for PiecesOS and the Pieces Desktop App by clicking the download links below.\n\n<CardGroup cols={2}>\n  <Card title=\"Download — PiecesOS (.EXE)\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744992859004/fa1743fa-66e4-4700-92da-0de69e676abe.webp\" href=\"https://builds.pieces.app/stages/production/os_server/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE\">\n    **Step 1:** Download PiecesOS (.EXE)\n\n    *Required Core Dependency*\n\n    Windows 10 (1809) or higher required.\n  </Card>\n\n  <Card title=\"Download — Pieces Desktop App\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744992861808/c9c77376-c282-4797-88dd-78b8a46e3aef.webp\" href=\"https://builds.pieces.app/stages/production/pieces_for_x/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE\">\n    **Step 2:** Download Pieces for Developers (.EXE)\n\n    *Alternative Method*\n\n    Windows 10 (1809) or higher required.\n  </Card>\n</CardGroup>\n\n### via WinGet\n\nTo install the Pieces Desktop App and PiecesOS using WinGet, follow these steps:\n\n1. **Open a Terminal:** Launch Windows Terminal, Command Prompt, or PowerShell as *administrator*.\n\n2. **Run the WinGet Command:** In the terminal, type `winget install “Pieces for Developers”` and press `enter`.\n\nYou may be prompted to enter `Y` or `N` to agree or disagree with the terms of use when installing the Pieces Desktop App—type and enter `Y` to proceed with the installation.\n\n3. **Install PiecesOS:** Next, install PiecesOS by typing `winget install “Pieces OS”` and pressing `enter`.\n\nYou will be prompted to agree or disagree to the terms of use a second time, so enter `Y` to proceed with the installation.\n\nOnce this is finished, you can now launch the Pieces Desktop App by pressing the **Windows symbol** (`⊞`) or toggling the search bar and typing **Pieces,** clicking `Pieces Desktop`.\n\n## Versions & Updates\n\nMany issues can stem from out-of-date plugins, extensions, the desktop app, or PiecesOS itself.\n\n### Updating PiecesOS\n\nTo restart and check for updates to PiecesOS on Windows:\n\n1. Locate the Pieces Icon (`P`) in your taskbar\n\n2. Click the icon to view your update status\n\n3. If an update is available, follow the on-screen prompt to download and install it.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/windows_checking_pieces_os_for_updates.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nFor standalone .EXE installations, updates are checked daily or upon application launch, prompting you to install or delay as needed.\n\n### Updating the Pieces Desktop App\n\nUpdating the Pieces Desktop App on Windows (and macOS) can be done directly within the application:\n\n1. Open the Pieces Desktop App\n\n2. Click the **User Icon** to the right of the **Search Bar** at the top of the main app view\n\n3. Select `Check for Desktop App Updates`\n\n4. If prompted, click `Download Update` install available updates\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/windows_check_pfd_for_updates.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can also select `Check for PiecesOS Updates` from the same menu as an alternative to doing so from the PiecesOS system window in your taskbar.\n\n## Issues Launching PiecesOS\n\nSome users who have enabled Controlled Folder Access (CFA) as a security measure may receive a notification that Pieces is attempting to bypass this security wall.\n\nTo work around this issue, you will need to *add the executable path for PiecesOS* to your allowlist.\n\n<Callout type=\"alert\">\n  The reason PiecesOS fails to launch when CFA is enabled is that the executable path for the PiecesOS application writes data to your Documents folder.\n\n  CFA disables and blocks any request to modify files (in this case, writing & saving data), so PiecesOS is unable to launch itself.\n</Callout>\n\nKeep in mind that this path references the specific PiecesOS version, and so will change over time as long as you continue to update the software.\n\nYou can also disable CFA as a security measure if you do not require it as part of an enterprise scenario or for any other reason.\n\nTo decide which apps PiecesOS has access to, you can [easily enable and disable specific sources from the Long-Term Memory Access Control](https://docs.pieces.app/products/core-dependencies/pieces-os/quick-menu#long-term-memory-access-control) panel.\n\n## Common Installation Issues\n\nWindows users may encounter installation issues for various reasons, such as out-of-date OS components or incomplete dependencies.\n\n### Checking for Windows Updates\n\nBefore installing, ensure your Windows system is fully updated:\n\n1. Click the **Start** button, then select `Settings`\n\n2. Click `Windows Update`\n\n3. Install any pending updates and restart your computer\n\n### Updating the Microsoft Store & App Installer\n\n1. Open the **Microsoft Store**\n\n2. Click on `Library` to check for available updates\n\n3. Update the Microsoft Store and the App Installer if prompted\n\n4. Retry installing the Pieces Suite\n\n## Checking Hardware Specifications\n\nIt may be necessary to verify your system’s specifications if you experience ongoing issues, especially when attempting to utilize local LLMs.\n\nTo check your device specifications on Windows:\n\n* Press the `Windows` key on your keyboard, or the `Windows` icon in the taskbar\n\n* Type `run` and hit `enter`\n\n* Type `dxdiag` and press enter on, or click, the blue `OK` button\n\nThe **System** tab displays your processor, the number of CPU cores, and memory (RAM), while the **Display** tab lists your GPU, its manufacturer (NVIDIA, AMD, Intel, etc.), and the available video memory (VRAM).\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/windows_checking_hardware_specs.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n[Read documentation on the minimum recommended hardware specifications across all OS platforms.](https://docs.pieces.app/products/meet-pieces/troubleshooting/cross-platform#hardware-recommendations)\n\n### Checking Windows Version\n\nIf the Pieces Installer is not working as intended, you could have an outdated version of Windows. The minimum Windows version that Pieces will run on is **Windows 10 20H0 or higher**.\n\nTo check what version of Windows you’re running:\n\n* Press the `Windows` and the `R` keys simultaneously on your keyboard\n\n* A new window will pop up, type `winver` and press `Enter`\n\nA new window will open called **About Windows**, which will display your current Windows version.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/troubleshooting/windows/checking_windows_ver.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  If this doesn't work, you're likely using a Windows version older than Windows 10.\n</Callout>\n\n## Restart & Retry\n\nIf the problem persists, please open a <a target=\"_blank\" href=\"https://github.com/pieces-app/support/issues\">GitHub issue</a> for further assistance or book a call with our engineers.",
    "lastModified": "2025-06-04T17:24:58.510Z",
    "filePath": "meet-pieces/troubleshooting/windows.md"
  },
  "/docs/meet-pieces/troubleshooting": {
    "slug": "/docs/meet-pieces/troubleshooting",
    "metadata": {
      "title": "Troubleshooting",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Using the Guides\n\nClick one of the links below to get started troubleshooting on your device—or [browse the cross-platform troubleshooting documentation](https://docs.pieces.app/products/meet-pieces/troubleshooting/cross-platform) for more general fixes.\n\n***\n\n| [Cross-Platform](https://docs.pieces.app/products/meet-pieces/troubleshooting/cross-platform) | [macOS](https://docs.pieces.app/products/meet-pieces/troubleshooting/macos) |\n| --------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------- |\n| [Windows](https://docs.pieces.app/products/meet-pieces/troubleshooting/windows)               | [Linux](https://docs.pieces.app/products/meet-pieces/troubleshooting/linux) |\n\n***\n\n## Cross-Platform Issues\n\nThis cross-platform troubleshooting documentation covers the Pieces Desktop App and PiecesOS, including updates, connectivity, system requirements, best practices for running local LLMs with Ollama, model selection for your hardware, and solutions for crashes due to limited resources or GPU compatibility.\n\n<Card title=\"macOS + Windows + Linux\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743183951564/da11bcc8-4fdf-49a6-b4a9-079186686ece.png\">\n  Use the Cross-Platform page if you’re not sure where to begin or if your issue isn’t clearly related to your operating system.\n\n  On the [Cross-Platform troubleshooting guide](https://docs.pieces.app/products/meet-pieces/troubleshooting/cross-platform), you’ll find:\n\n  * [Tips on handling local LLM crashes due to hardware-related issues](https://docs.pieces.app/products/meet-pieces/troubleshooting/cross-platform#local-model-crashing)\n\n  * [Guidance on working with Vulkan-based GPUs](https://docs.pieces.app/products/meet-pieces/troubleshooting/cross-platform#vulkan-based-gpus)\n\n  * [Links to related documentation on checking hardware specifications on your OS](https://docs.pieces.app/products/meet-pieces/troubleshooting/cross-platform#checking-hardware)\n</Card>\n\n## macOS Issues\n\nThis macOS guide helps troubleshoot installation and update issues for PiecesOS and the Pieces Desktop App on macOS, covering manual installs (`PKG`, `DMG`, Homebrew), checking macOS version and CPU type, and fixing compatibility or outdated software problems.\n\n<Card title=\"macOS\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743183846135/c03b138c-4fb6-4202-afe4-4f3503393ff4.png\">\n  The [macOS troubleshooting guide](https://docs.pieces.app/products/meet-pieces/troubleshooting/macos) provides information and guides on:\n\n  * [How to verify your macOS software version](https://docs.pieces.app/products/meet-pieces/troubleshooting/macos#checking-os-version)\n\n  * [Determining and choosing the correct installation package for different chipsets](https://docs.pieces.app/products/meet-pieces/troubleshooting/macos#checking-cpu-type)\n\n  * [Updating PiecesOS and the Pieces Desktop App](https://docs.pieces.app/products/meet-pieces/troubleshooting/macos#versions--updates)\n</Card>\n\n## Windows Issues\n\nWindows users can find troubleshooting steps for installing, updating, or running PiecesOS and the Pieces Desktop App on Windows. It includes manual installation, update instructions, system checks, and solutions for issues with outdated Windows versions, dependencies, or hardware compatibility.\n\n<Card title=\"Windows\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743183998547/ab81fe73-85c3-4739-bb63-ac85824413c8.png\">\n  The [Windows troubleshooting guide](https://docs.pieces.app/products/meet-pieces/troubleshooting/windows) provides information and guides on:\n\n  * [Checking for Windows installation updates](https://docs.pieces.app/products/meet-pieces/troubleshooting/windows#checking-for-windows-updates)\n\n  * [Verifying the App Installer is up-to-date](https://docs.pieces.app/products/meet-pieces/troubleshooting/windows#versions--updates)\n\n  * [Alternative installation methods for non-Suite installs](https://docs.pieces.app/products/meet-pieces/troubleshooting/windows#trying-different-installation-methods)\n\n  * [Viewing hardware specifications using `dxdiag`](https://docs.pieces.app/products/meet-pieces/troubleshooting/windows#checking-hardware-specifications)\n</Card>\n\n## Linux Issues\n\nUbuntu 22+ Linux users can use this guide to troubleshoot PiecesOS and the Pieces Desktop App. It covers updating via Snap, checking system compatibility, and fixing common installation or display issues. It also offers tips for adjusting GPU settings and verifying hardware and Ubuntu version compatibility.\n\n<Card title=\"Linux\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743184029199/1e8e5852-ca00-4843-91ca-20d8508c414b.png\">\n  The [Linux troubleshooting guide](https://docs.pieces.app/products/meet-pieces/troubleshooting/linux) provides information and guides on:\n\n  * [Confirming compatibility with your Linux distribution](https://docs.pieces.app/products/meet-pieces/troubleshooting/linux#checking-distribution-compatibility)\n\n  * [Using snap commands to update PiecesOS and the Pieces Desktop App](https://docs.pieces.app/products/meet-pieces/troubleshooting/linux#updating-piecesos)\n\n  * [Adjusting graphics settings if you encounter UI issues](https://docs.pieces.app/products/meet-pieces/troubleshooting/linux#adjusting-graphics--display-settings)\n</Card>\n\n### Additional Assistance\n\nIf you’ve followed the applicable troubleshooting steps and still experience problems, consider visiting our community forums for additional guidance, opening a GitHub issue, or booking a call with our engineers.\n\n[You can also find additional support resources here.](https://docs.pieces.app/products/support)",
    "lastModified": "2025-06-04T17:24:58.491Z",
    "filePath": "meet-pieces/troubleshooting.md"
  },
  "/docs/meet-pieces/windows-installation-guide": {
    "slug": "/docs/meet-pieces/windows-installation-guide",
    "metadata": {
      "title": "Installation Guide | Windows",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/trimmed_windows_banner.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Recommended Installation Method\n\nThe recommended installation method on Windows is using the `.appinstaller` files for PiecesOS and the Pieces Desktop App.\n\nDownload PiecesOS and the Pieces Desktop App **in order** by clicking the download cards below.\n\n<CardGroup cols={2}>\n  <Card title=\"Download — PiecesOS\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744838532993/0aceacdb-4e3f-4e09-8175-eb8b389f26e9.webp\" href=\"https://builds.pieces.app/stages/production/appinstaller/os_server.appinstaller\">\n    **Step 1:** Download PiecesOS (.appinstaller)\n\n    *Required Core Dependency*\n\n    Windows 10 (1809) or higher required.\n  </Card>\n\n  <Card title=\"Download — Pieces Desktop App\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744838536184/842e4eed-5111-45d2-8157-23bb8fa64049.webp\" href=\"https://builds.pieces.app/stages/production/appinstaller/pieces_for_x.appinstaller\">\n    **Step 2:** Download the Desktop App (.appinstaller)\n\n    *Recommended Method*\n\n    Windows 10 (1809) or higher required.\n  </Card>\n</CardGroup>\n\n<Callout type=\"alert\">\n  PiecesOS is a **required** Core Dependency. Please install it alongside the Pieces Desktop App.\n</Callout>\n\n## Install the AppInstaller Files\n\nNow that you have downloaded the `.appinstaller` files, it’s time to install Pieces.\n\n<Steps>\n  <Step title=\"Find Saved Location\">\n    Open your **Downloads** folder (or wherever you saved the installer) and look for the `.appinstaller` file you just downloaded (e.g., *pieces-os.appinstaller*).\n  </Step>\n\n  <Step title=\"Open the Installer\">\n    Double-click the `.appinstaller` file to launch the installation wizard.\n  </Step>\n</Steps>\n\nInstalling via `.appinstaller` or `.exe` may cause some user prompt windows to open up—read more about them below.\n\n### Updating PiecesOS (AppInstaller)\n\nNote that currently, updating PiecesOS if installed via the `.appinstaller` (currently the *Recommended* installation method) files requires that you **quit the Pieces Desktop App**, then proceed with updating PiecesOS.\n\nIf this fails, make sure that the Pieces Desktop App is fully quit, as well as PiecesOS—then relaunch PiecesOS and proceed to download and install the update.\n\n### System Requirements\n\nYour Windows device must be running **Windows 10 (1809) or higher.**\n\nClick here for a quick guide on [determining your OS version](https://docs.pieces.app/products/meet-pieces/troubleshooting/windows#checking-windows-version).\n\n***\n\n| **Component**      | **Minimum**                                                                   | **Recommended**                      | **Notes**                                                        |\n| ------------------ | ----------------------------------------------------------------------------- | ------------------------------------ | ---------------------------------------------------------------- |\n| *CPU*              | Any modern CPU                                                                | Multi-core CPU                       | Avoid dual-core processors—aim for at least a 4-core CPU.        |\n| *RAM (Local Mode)* | 8 GB total system RAM with 2 GB free                                          | 16 GB total system RAM or more       | Applies when PiecesOS is running locally.                        |\n| *RAM (Cloud Mode)* | 8 GB total system RAM with 1 GB free                                          | 16 GB total system RAM or more       | Applies when PiecesOS is running in cloud mode.                  |\n| *Disk Space*       | 2 GB minimum (1 GB for PiecesOS + 0.5–1 GB for data), with at least 4 GB free | 8 GB with at least 6 GB free or more | Ensure additional free space for data storage and future growth. |\n\n***\n\n## Alternative Installations\n\nIf you prefer an alternative installation method aside from the `.appinstaller` method, you can also use the `exe` installers or `WinGet` commands through your terminal.\n\n### via EXE\n\nIf you cannot use the `.appinstaller` method for any reason, you can also install via standalone `.exe` files.\n\n<CardGroup cols={2}>\n  <Card title=\"Download — PiecesOS (EXE)\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744838635517/4e03efa6-cdd4-4187-a2c9-8fabb128b291.webp\" href=\"https://builds.pieces.app/stages/production/os_server/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE&_gl=1*h3r9du*_gcl_au*MTIwMTc3MzI1NS4xNzQxMDIwNzMx*_ga*MTE4MjM0Njk4MC4xNzQxMDIwNzMx*_ga_BVYEFRWCYX*MTc0MTc4OTgwNS40LjEuMTc0MTgwMjA0OS41OC4wLjA.\">\n    **Step 1:** Download PiecesOS\n\n    *Required Core Dependency*\n\n    Windows 10 (20H0) or higher required.\n  </Card>\n\n  <Card title=\"Download — Pieces Desktop App (EXE)\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744838637934/aeebf045-f502-4896-8d99-104607d9ede1.webp\" href=\"https://builds.pieces.app/stages/production/pieces_for_x/windows-exe/download?download=true&product=DOCUMENTATION_WEBSITE&_gl=1*1a9yqbf*_gcl_au*OTQ5NDE1NTA4LjE3Mzk0NjU4MzM.*_ga*MTI0OTgzMTMuMTcyNDA5ODQwNg..*_ga_BVYEFRWCYX*MTc0MDc4MjM4Mi44LjAuMTc0MDc4MjM4Mi42MC4wLjA.\">\n    **Step 2:** Download the Desktop App\n\n    *Alternative Method*\n\n    Windows 10 (20H0) or higher required.\n  </Card>\n</CardGroup>\n\n<Steps>\n  <Step title=\"Find Saved Location\">\n    Open your **Downloads** folder (or wherever you saved the file) and look for the `.appinstaller` file you just downloaded (e.g., *pieces-desktop.appinstaller*).\n  </Step>\n\n  <Step title=\"Open the Installer\">\n    Double-click the `.appinstaller` file to launch the Windows installation prompt.\n  </Step>\n</Steps>\n\n### via WinGet\n\nWinGet will allow you to easily install Pieces without having to leave the terminal\n\n<CardGroup cols={2}>\n  <Card title=\"WinGet — PiecesOS\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742407333527/2124ccc5-5015-4be6-909e-4a743fc02104.webp\">\n    **Step 1:** Install PiecesOS\n\n    1. Launch a Windows Terminal, Command Prompt, or PowerShell as administrator.\n\n    2. Next, install PiecesOS by typing `winget install “Pieces OS”` and pressing `enter`.\n\n    You may be prompted to enter `Y` or `N` to agree or disagree the terms of use when installing the Pieces Desktop App—type and enter `Y` to proceed with the installation.\n  </Card>\n\n  <Card title=\"WinGet — Pieces for Developers\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742407336840/6b4388ed-d065-4afa-9459-699b78240db3.webp\">\n    **Step 2:** Install the Desktop App\n\n    1. Use the same Windows Terminal, Command Prompt, or PowerShell window as before—or launch a new window.\n\n    2. Then, type `winget install “Pieces for Developers”` and press `enter`.\n\n    You will be promoted to agree or disagree to the terms of use a second time, so enter `Y` to proceed with the installation.\n  </Card>\n</CardGroup>\n\n## On-Screen Prompts\n\nThere are a series of on-screen prompts to navigate through when installing the Pieces Desktop App and PiecesOS, through either the `.exe` or `.appinstaller` installation methods.\n\n1. **User Account Control (UAC):** If prompted by Windows’ User Account Control, click `Yes` to allow the installer to make changes.\n\n2. **Install Location:** Choose where to install Pieces (default location is recommended) and click `Install`.\n\n3. **Select Additional Tasks:** Check `Create a desktop shortcut` or `Automatically start Pieces for Developers` if preferred.\n\n4. **Ready to Install:** Click `Install`**.**\n\n5. **Installation Progress & Completion:** Wait for the installation to complete. Once finished, you’ll see a confirmation message. Click `Finish` to close the installer.\n\n## Enterprise & Advanced Security Considerations\n\nSome Windows systems—particularly those in enterprise environments or with advanced security settings—may require using an `.exe` package (default installer) instead of an `.appinstaller` package (AppInstaller) for compatibility reasons.\n\nIf you find that your environment is restrictive or that the `.appinstaller` package doesn’t work properly, consider using the `.exe` version or an alternative method.\n\n## Post-Installation Tips\n\nRead the documentation below for some tips and information to make sure you’re up and running with the latest version(s) of PiecesOS and the Pieces Desktop App, as well as steps to uninstall Pieces software from your Windows device.\n\n### Updating\n\nThe Pieces Desktop App **automatically downloads and installs new updates.**\n\nYou can also manually check for updates to PiecesOS and the Pieces Desktop App by clicking the `Profile` nested in the **Search Bar** at the top of your Pieces Desktop App view, then selecting `Check for Desktop App Updates` or `Check for PiecesOS Updates`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/get_started/windows/windows_check_pfd_for_updates.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Uninstalling\n\nOpen **Settings,** then find **Apps** and search `Pieces.`\n\nTwo applications will appear after you enter the search query—**Pieces Desktop** and **PiecesOS.** Click the three dots to the right of the application title, and click `Uninstall`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/meet_pieces_assets/meet_pieces/get_started/windows/uninstalling_on_windows.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Additional Resources\n\nClick here for additional [documentation on troubleshooting](https://docs.pieces.app/products/meet-pieces/troubleshooting) or reach out to [support.](https://docs.pieces.app/products/support)",
    "lastModified": "2025-06-04T17:24:58.514Z",
    "filePath": "meet-pieces/windows-installation-guide.md"
  },
  "/docs/meet-pieces": {
    "slug": "/docs/meet-pieces",
    "metadata": {
      "title": "Getting to Know Pieces",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734014941536/9c298363-d6b4-4e4a-9965-72db0fa59bc6.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Introducing Pieces for Developers\n\nThis documentation is designed to provide a high-level overview of <a target=\"_blank\" href=\"https://docs.pieces.app/products/meet-pieces/fundamentals\">Pieces' features and functionalities</a>, with a quick-start and troubleshooting guides for <a target=\"_blank\" href=\"https://docs.pieces.app/products/meet-pieces/macos-installation-guide\">macOS</a>, <a target=\"_blank\" href=\"https://docs.pieces.app/products/meet-pieces/windows-installation-guide\">Windows</a>, and <a target=\"_blank\" href=\"https://docs.pieces.app/products/meet-pieces/linux-installation-guide\">Linux</a> to help you get started with Pieces as quickly as possible.\n\nLet’s answer a few basic questions:\n\n### What is Pieces?\n\nAt its core, Pieces is an all-in-one productivity tool that helps developers work *smarter*, not harder, by anchoring engineers to their workflow with the power of the **Long-Term Memory Engine, Pieces Drive,** and the **Pieces Copilot.**\n\nThere are **\\[3]** core pillars of Pieces functionality:\n\n1. [Long-Term Memory Engine (LTM-2)](https://docs.pieces.app/products/meet-pieces/fundamentals#ltm-2): A powerful, AI-powered live context framework that understands what you’re working on across your entire development workflow. The LTM-2 helps by outsourcing the burden of memory and retrieval from the developer to AI to maximize space for creativity driven by human intent.\n\n2. [Pieces Drive](https://docs.pieces.app/products/meet-pieces/fundamentals#pieces-drive): The ability to save, search, reference, reuse, and share small developer resources like code snippets, screenshots, links, and text notes.\n\n3. [Pieces Copilot](https://docs.pieces.app/products/meet-pieces/fundamentals#pieces-copilot): An intelligent assistant that helps with generating code, answering questions, and adding code comments while utilizing a LLM of your choice—featuring an adjustable context window ranging from conversation-only to entire project repositories.\n\n### Who is Pieces For?\n\nTo put it simply, Pieces is built from the ground up for developers who frequently reference or reuse small developer materials like code snippets or are looking to pick up where they left off and preserve the context of their workflow.\n\nPieces is an **excellent productivity option for developers of all levels** and across various fields, including front-end developers, data scientists, DevOps engineers, and students.\n\nIf you find yourself …\n\n1. **Preserving Workflow Context:** If you’re wondering where you left off with trying to untangle that permissions mess in Google Cloud Console or Firestore database, the [LTM-2](https://docs.pieces.app/products/meet-pieces/fundamentals#ltm-2) is an invaluable resource that can provide deep-links and anchors in the form of URLs and other helpful context.\n\n2. **Managing Developer Materials**: If you find yourself needing to repurpose or refresh your memory with small developer resources throughout your workflow, the [Pieces Drive](https://docs.pieces.app/products/meet-pieces/fundamentals#pieces-drive) can help you stay organized while providing an efficient pipeline for referencing and reusing them.\n\n3. **Needing Code Assistance:** Stuck on a bug, or don’t know how to solve a complex algorithmic efficiency problem? Can’t center that `div`? Ask [Pieces Copilot](https://docs.pieces.app/products/meet-pieces/fundamentals#pieces-copilot) to help you understand your function, script, code file or entire project and generate code to insert directly into your active file.\n\n… then Pieces is intelligently designed with *you,* the developer, in mind.\n\nLet Pieces do the heavy lifting and preserve your engineering creativity and ingenuity for where you need it most.\n\n### How do I Use Pieces?\n\nPiecesOS serves as the foundational layer of the entire Pieces for Developers Suite, much like Docker does for containerized applications—it powers the Pieces Desktop App along with all our browser and IDE extensions and plugins.\n\nBy installing PiecesOS, you enable the full functionality of the desktop app and our extensions, just like how Docker manages various containers.\n\nWe designed it this way to ensure that your data—including machine learning processes and inter-app communications—remains on-device, secure, private, and local.\n\nClick one of the links below to fast-forward to the Pieces Suite installation guide for your operating system:\n\n* [macOS](https://docs.pieces.app/products/meet-pieces/macos-installation-guide)\n\n* [Windows](https://docs.pieces.app/products/meet-pieces/windows-installation-guide)\n\n* [Linux](https://docs.pieces.app/products/meet-pieces/linux-installation-guide)\n\n<Callout type=\"alert\">\n  PiecesOS is required for any Pieces Software to work, including the Pieces Desktop App.\n\n  However, the Pieces Desktop App is not itself required—but it is recommended to install both PiecesOS and the Pieces Desktop App.\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.475Z",
    "filePath": "meet-pieces.md"
  },
  "/docs/more": {
    "slug": "/docs/more",
    "metadata": {
      "title": "More",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "# More Resources\n\nAdditional resources and information about Pieces.\n\n## Available Resources\n\n- **[Privacy, Security & Your Data](/docs/privacy-security-your-data)** - Learn about our security practices\n- **[Glossary](/docs/glossary)** - Key terms and concepts\n\nChoose a resource above to learn more!",
    "lastModified": "2025-06-04T17:24:58.516Z",
    "filePath": "more.md"
  },
  "/docs/obsidian/commands": {
    "slug": "/docs/obsidian/commands",
    "metadata": {
      "title": "Pieces for Obsidian Plugin Commands",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/commands/settings_page_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Shortcut Table\n\nThere are a number of actions related to the [Material Management ecosystem](https://docs.pieces.app/products/obsidian/copilot) that are accessible with shortcuts.\n\n***\n\n| **Command** | **macOS** | **Windows/Linux** |\n| ----------- | --------- | ----------------- |\n| *Copy*      | `⌘+c`     | `ctrl+c`          |\n| *Paste*     | `⌘+v`     | `ctrl+v`          |\n\n***\n\n<Callout type=\"tip\">\n  You can set shortcuts in the [settings](https://docs.pieces.app/products/obsidian/configuration) for the Pieces for Obsidian Plugin.\n</Callout>\n\n## Command Table\n\nYou can access these commands through the **Command Palette** using the shortcuts—`⌘+p` (macOS) and `ctrl+p` (Windows/Linux).\n\nType `Pieces for Developers:` followed by the desired command to filter and locate it in the list.\n\n***\n\n| **Pieces for Developers: Save to Pieces**                   | Save the selected code snippet to your Pieces repository for easy access and future use. |\n| ----------------------------------------------------------- | ---------------------------------------------------------------------------------------- |\n| **Pieces for Developers: Share via Pieces**                 | Share the selected code snippet with others by generating a shareable link.              |\n| **Pieces for Developers: Switch Pieces Context**            | Switch between different Pieces contexts for more relevant suggestions or actions.       |\n| **Pieces for Developers: Ask Copilot about your selection** | Ask the Pieces copilot for assistance or insights related to the selected code snippet.  |\n\n***",
    "lastModified": "2025-06-04T17:24:58.524Z",
    "filePath": "obsidian/commands.md"
  },
  "/docs/obsidian/configuration": {
    "slug": "/docs/obsidian/configuration",
    "metadata": {
      "title": "Configuration",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Supported LLMs\n\nWe constantly update and configure our plugins and extensions, like the Pieces for Obsidian Plugin, to work with the latest LLMs.\n\nThe Pieces for Obsidian Plugin supports 13 different cloud models and [41 local models](https://docs.pieces.app/products/large-language-models).\n\n[Read the documentation on switching your Pieces Copilot Runtime (LLM)](https://docs.pieces.app/products/obsidian/copilot/llm-settings#how-to-configure-your-llm-runtime) utilized by the Pieces for Obsidian Plugin within your editor.\n\n## Opening Pieces Settings\n\nTo open the Pieces Settings in the Pieces for Obsidian Plugin, select the `Pieces` icon in the left-hand sidebar and the `setting` icon in the new Pieces popup on the right side.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/configuration/open_settings.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Overriding Commands in Obsidian\n\nIf you’d like to adjust the keyboard shortcuts for the Pieces for Obsidian Plugin, such as saving a snippet or previewing markdown, follow these steps:\n\n<Steps>\n  <Step title=\"Open Settings\">\n    Access the settings menu in Obsidian by clicking the gear icon in the lower-left corner.\n  </Step>\n\n  <Step title=\"Go to Hotkeys\">\n    Navigate to the \"Hotkeys\" tab in the settings menu to view or customize command shortcuts.\n  </Step>\n\n  <Step title=\"Find the Command\">\n    Use the search bar to locate the specific command you want to override, such as commands for the \"Pieces for Developers\" plugin.\n  </Step>\n\n  <Step title=\"Customize the Shortcut\">\n    Click on the current shortcut next to the command and input your preferred key combination to override it.\n  </Step>\n\n  <Step title=\"Save Changes\">\n    Ensure the new shortcut is displayed and test it to confirm the override is successful.\n  </Step>\n</Steps>\n\n## Settings Overview\n\nBelow is a breakdown of each adjustable setting (preferences, behaviors, views, etc.) in the Pieces for Obsidian Plugin, updated based on available features.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/configuration/general_overview_obsid.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Account & Cloud Integrations\n\n* **Account Name:** Displays the name associated with your Pieces for Obsidian account.\n\n* **Account Email:** Displays the email address linked to your Pieces account.\n\n* **Early Access Program:** Indicates whether you are enrolled in the beta program.\n\n### Personal Cloud\n\n* **Status:** Shows whether your personal cloud is connected or disconnected and when it was last updated.\n\n* **Personal Domain:** Displays your custom subdomain and indicates that it is running.\n\n* **Backup & Restore Data:** Opens a dialog to back up or restore your personal cloud data.\n\n### Saved Material Auto-Enrichment\n\n* **Auto-Generated Context:** This option lets you select how much context is auto-generated for saved materials (None, Low, Medium, High).\n\n### ML Processing\n\n* **Processing Mode:** Selects Local, Cloud, or Blended machine-learning resources.\n\n* **Long-Term Memory Engine:** Toggles the on-device memory engine on or off and displays its current version.\n\n* **Long-Term Memory Source Control:** Opens controls to manage which memory sources feed your long-term memory.\n\n* **Clear Long-Term Memory Engine Data…:** Purges persisted memory data for a specified time range.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/configuration/ml_mode.png\" alt=\"\" align=\"center\" fullwidth=\"false\" />\n\n### Model Context Protocol (MCP)\n\n* **Server URLs:** Allows you to specify the URLs of your MCP endpoints.\n\n* **Version:** Displays the MCP protocol version in use.\n\n* **View Documentation:** Opens the MCP usage documentation.\n\n### Saved Materials\n\n* **Auto-Open Pieces Drive view on snippet save:** Automatically opens the Pieces Drive view when you save a snippet.\n\n* **Use note page title for saved snippet:** When saving, your current note’s title is used as the snippet title.\n\n### Onboarding\n\n* **Launch Onboarding:** Reopens the onboarding tutorial at any time.\n\n### Telemetry\n\n* **Telemetry & Diagnostics:** Shares anonymized usage and crash data to help improve Pieces.\n\n### Support\n\n* **Documentation:** Opens the online Pieces documentation.\n\n* **Submit Feedback/Issues:** The feedback or issue tracker is open for reporting bugs and requesting features.\n\n### PiecesOS Information\n\n* **PiecesOS Version:** Displays the installed version of the PiecesOS service.\n\n* **Check for PiecesOS Updates:** Checks for and installs updates to PiecesOS.\n\n* **PiecesOS Port:** Displays the network port on which PiecesOS is listening.\n\n### Settings Applet\n\n* **Version:** Displays the version number of the settings applet.\n\n***\n\nFor additional support resources, check out our [troubleshooting guide.](https://docs.pieces.app/products/obsidian/troubleshooting)",
    "lastModified": "2025-06-04T17:24:58.528Z",
    "filePath": "obsidian/configuration.md"
  },
  "/docs/obsidian/copilot/chat": {
    "slug": "/docs/obsidian/copilot/chat",
    "metadata": {
      "title": "Generative AI Conversations",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Accessing Copilot Chat in Obsidian\n\nThere are two primary ways to access generative AI conversations with the Pieces Copilot.\n\n### via Right-Click Menu\n\n<Steps>\n  <Step title=\"Highlight Text or Code Block\">\n    Highlight any text or code block within your note and right-click to open the context menu.\n  </Step>\n\n  <Step title=\"Select &#x22;Ask Copilot About Selection&#x22;\">\n    Choose `Ask Copilot About Selection` for insights or suggestions for the selected snippet.\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/chat/right_click_tool_chat.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via the Pieces Sidebar\n\n<Steps>\n  <Step title=\"Open the Pieces Plugin\">\n    Open the Pieces for Obsidian Plugin by clicking its icon in the Obsidian sidebar.\n  </Step>\n\n  <Step title=\"Navigate to Pieces Chat\">\n    Navigate to the Pieces Chat section by selecting it from the top of the plugin slider.\n  </Step>\n\n  <Step title=\"Start a Conversation\">\n    The chat window will open, allowing you to start a conversation directly with the Copilot.\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/chat/extension_bar_menu.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Contextualized Chats\n\nUsing the `Pieces: Ask Copilot About Selection` command lets you interact with Copilot regarding specific text or code within your notes.\n\nThere are two ways to access this command:\n\n### via Right-Click Menu\n\n<Steps>\n  <Step title=\"Highlight Text or Content\">\n    Select the text or excerpt that you want to query in your note.\n  </Step>\n\n  <Step title=\"Right-Click\">\n    Right-click on the highlighted text.\n  </Step>\n\n  <Step title=\"Select Command\">\n    Choose `Ask Copilot About Your Selection` from the context menu.\n  </Step>\n\n  <Step title=\"Enter Question\">\n    Type your prompt in the text input field and press `return` (macOS) or `enter` (Windows/Linux).\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/chat/right_context_ask_copilot_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Command Palette\n\n<Steps>\n  <Step title=\"Open the Command Palette\">\n    Use `⌘+p` (macOS) or `ctrl+p` (Windows/Linux) to open the command palette in Obsidian.\n  </Step>\n\n  <Step title=\"Run the Command\">\n    Type and run `Pieces for Developers: Ask Copilot About Your Selection`.\n  </Step>\n\n  <Step title=\"Enter Question\">\n    Type your prompt in the text input field and press `return` (macOS) or `enter` (Windows/Linux).\n  </Step>\n</Steps>\n\nThis approach is ideal for localized queries requiring **quick insights or guidance on a specific selection.**\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/chat/command_pallete_ask_copilot_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Adding Context to Copilot Chats\n\nThere are several individual items you can add as context to a chat, namely `Files`**,** `Folders`**,** `Snippets from the Pieces Drive`**,** `Websites`**,** and `Messages`**.**\n\nThis flexibility is particularly useful when the reference material you want to use isn’t directly accessible in Obsidian or when you want to compartmentalize context, avoiding overlap between files or projects.\n\nTo do this, select the **Starred Message Icon** in the bottom-left corner of your Copilot Chat window, openable from the Obsidian sidebar.\n\nClick the **Starred Message Icon,** then add whatever context items you need.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/chat/adding_snippet_to_chat.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Adding Code Snippets\n\nYou can paste snippets of code as a code block inside any Copilot Chat by clicking the `{ }` icon inside the chat window, then pasting in your code.\n\nThis is useful for bringing in code that isn’t present immediately in the active file as context, or for comparisons and suggestions.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/chat/adding_snippets_to_chat_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Extracting Code from Screenshots\n\nYou can also extract code from screenshots directly from the Copilot chat menu by selecting `Extract Code from Screenshot`, selecting the desired screenshot from your **Finder** (macOS) or **File Explorer** (Windows/Linux) menu, and confirming.\n\nPieces Copilot will then scan the screenshot and generate the code captured from the image into the chat. You can copy, insert it at your cursor, save it as a snippet, and more.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/chat/extract_text_from_image.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Adding Folders from File Explorer\n\nSuppose you right-click on a folder in Obsidian’s file explorer. In that case, you’ll see the following options: `Pieces: Add Vault to Copilot Context` and `Pieces: Add File to Copilot Context`, so you can take any folder or file in the project you’re working in and immediately have the Pieces Copilot interact with it.\n\n## Improving Code Consistency & Standardization\n\nThe Pieces Copilot helps improve code quality by identifying inconsistencies and providing actionable suggestions for standardization.\n\n### Naming Inconsistencies\n\nSuppose functions across your workspace use inconsistent naming patterns (e.g., `authenticateUser` in `authHandler.go` vs. `retrieveUserProfile `in `userHandler.go`). In that case, can suggest adopting a standardized naming convention for better readability and maintainability, like this:\n\n```c\nfunc authenticateUser(ctx context.Context, credentials Credentials) (User, error) {\n    if credentials.Username == \"\" || credentials.Password == \"\" {\n        return User{}, errors.New(\"missing credentials\")\n    }\n}\n```\n\n### Inconsistent Error Handling\n\nIf error-handling strategies differ across files (e.g., structured errors in `authService.go` vs. inconsistent handling in `userService.go`), Pieces Copilot can help unify the approach:\n\n```c\nfunc LoginUser(credentials Credentials) (string, error) {\n    token, err := authenticate(credentials)\n    if err != nil {\n        return \"\", fmt.Errorf(\"login failed: %w\", err)\n    }\n    return token, nil\n}\n```",
    "lastModified": "2025-06-04T17:24:58.539Z",
    "filePath": "obsidian/copilot/chat.md"
  },
  "/docs/obsidian/copilot/llm-settings": {
    "slug": "/docs/obsidian/copilot/llm-settings",
    "metadata": {
      "title": "Switching LLMs",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Available LLMs\n\nWe constantly update and configure our plugins and extensions, like the Pieces for Obsidian Plugin, to <a target=\"_blank\" href=\"https://github.com/pieces-app/support/discussions/121\">work with the latest LLMs</a>.\n\nClick here to see all [54+ local and cloud-hosted models available](https://docs.pieces.app/products/large-language-models) for use with the Pieces for Obsidian Plugin.\n\n## How To Configure Your LLM Runtime\n\nSwitching your LLM model in the Pieces for Obsidian Plugin is straightforward. You can choose the model that best suits your needs.\n\nHow to change your LLM:\n\n<Steps>\n  <Step title=\"Open the Copilot Chat View\">\n    Open the Copilot Chat view by clicking the `Pieces Copilot Icon` in the sidebar.\n  </Step>\n\n  <Step title=\"Locate the Active Model\">\n    Locate the **Active Model** in the bottom-left corner of the view, where the current model (e.g., *GPT-4o Mini*) is displayed.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/LLM%20Settings/showing_llm_switch_button_OBS.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n\n  <Step title=\"View the Models\">\n    Click on `Change Model` to open the **Manage Copilot Runtime** model.\n  </Step>\n\n  <Step title=\"Choose your Desired Model\">\n    Browse the list of local and cloud models, and select your preferred model.\n  </Step>\n</Steps>\n\nYou can browse and select from various available models, such as the local and cloud-based models listed [in the table at the top of this page.](https://docs.pieces.app/products/obsidian/configuration#supported-llms)\n\nOnce you’ve chosen a new model, the switch is instant, allowing you to continue your work seamlessly with the selected model's capabilities—*no need to restart or refresh anything.*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/LLM%20Settings/changing_models_OBS.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  Cloud-hosted models offer access to the latest AI capabilities, while on-device models ensure offline functionality, making Pieces Copilot adaptable to your specific workflow and environment.\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.545Z",
    "filePath": "obsidian/copilot/llm-settings.md"
  },
  "/docs/obsidian/copilot": {
    "slug": "/docs/obsidian/copilot",
    "metadata": {
      "title": "Pieces Copilot",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Generative AI Conversations\n\nFacing an issue or not sure how to tackle a challenge? You can [ask the Pieces Copilot specific questions](https://docs.pieces.app/products/obsidian/copilot/chat) directly in Obsidian using the Copilot Chat side window.\n\nYou can ask questions that don't need context, like *“What is the basic format for a JSON object?”* or more detailed questions where the Pieces Copilot requires context from your active note.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/MAIN_pieces_copilot/chat_example_question_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Adding Conversation Context\n\nContextual awareness lets the Pieces Copilot help you solve problems faster by providing answers that are relevant to the issue you're facing and your notes.\n\nTo use this feature, include details like error messages or [file context](https://docs.pieces.app/products/obsidian/copilot#adding-conversation-context) for more accurate responses from the LLM conversation.\n\nYou can also add multiple files and other items as context to your question, giving the Pieces Copilot comprehensive information to help you troubleshoot.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/MAIN_pieces_copilot/add_context_menu_open_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nStart by right-clicking a selection and selecting the following option from the tool menu:\n\n* `Ask Copilot About Your Selection`: Includes the active selection in the conversation.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/MAIN_pieces_copilot/right_context_ask_copilot_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Selecting Your Pieces Copilot Runtime\n\nChoose between [different LLMs directly within the Obsidian Editor](https://docs.pieces.app/products/obsidian/copilot/llm-settings) by accessing the sidebar and selecting your preferred model by clicking the currently utilized LLM under `Active Model` (GPT-4o Mini).\n\nOptions range from lightweight models for simple queries to advanced models for in-depth analysis, as well as **local** and **cloud-based LLMs.**\n\nThis flexibility allows you to tailor Pieces Copilot to your specific development needs, whether speed or accuracy.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/pieces_copilot/MAIN_pieces_copilot/change_llm_option_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nRead more about [what LLMs are available ](https://docs.pieces.app/products/obsidian/configuration#supported-llms)with the Pieces for Obsidian Plugin.\n\n## Pieces Copilot As a Daily Driver\n\nThe Pieces Copilot is a powerful, adaptable tool that grows with you as you use it—*so use it!*\n\n***\n\n<AccordionGroup>\n  <Accordion title=\"Collaborative Coding Made Easy\">\n    Generate detailed comments and documentation for better team collaboration and to reduce onboarding times. This will create a unified coding and writing style across teams.\n  </Accordion>\n\n  <Accordion title=\"Troubleshoot and Resolve Bugs Swiftly\">\n    Use the Pieces Copilot in Obsidian to streamline the bug-fixing process. Its contextual understanding and suggested solutions make writing faster, keeping your project on course.\n  </Accordion>\n\n  <Accordion title=\"Quick Prototyping\">\n    Generate initial implementations and boilerplate code for prototypes and fast-paced projects. Ideal for hackathons, PoCs, and other time-sensitive tasks.\n  </Accordion>\n\n  <Accordion title=\"Skill Enhancement\">\n    Pieces Copilot doubles as a learning tool, helping you explore best practices, new paradigms, and advanced techniques in real-time.\n  </Accordion>\n\n  <Accordion title=\"Efficient Code Refactoring\">\n    Optimize your vault through intelligent refactoring recommendations. The Pieces Copilot analyzes your note patterns, suggests structural improvements, and delivers optimizations for both performance and readability.\n  </Accordion>\n</AccordionGroup>\n\n***\n\n<a target=\"_blank\" href=\"https://obsidian.md/plugins?search=pieces-for-developers\">Download the Pieces for Obsidian Plugin today!</a>",
    "lastModified": "2025-06-04T17:24:58.531Z",
    "filePath": "obsidian/copilot.md"
  },
  "/docs/obsidian/drive/edit-update": {
    "slug": "/docs/obsidian/drive/edit-update",
    "metadata": {
      "title": "Editing",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## How to Edit Saved Materials\n\nTo modify an existing snippet, follow these steps:\n\n<Steps>\n  <Step title=\"Open the Pieces Sidebar\">\n    Click the Pieces icon on the left-hand side of your Obsidian interface.\n  </Step>\n\n  <Step title=\"Locate and Open the Snippet\">\n    Navigate to the **Saved Materials** section and click on the snippet you want to edit to open its quick view.\n  </Step>\n\n  <Step title=\"Navigate to the Edit Button\">\n    In the section at the bottom of the quick view, click the `Edit Selected Material` button (pencil icon) to enter editing mode.\n  </Step>\n\n  <Step title=\"Make Your Changes\">\n    Modify the snippet's content, name, or language as needed.\n  </Step>\n\n  <Step title=\"Save Your Edits\">\n    Click the `Save Changes` button.\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/edit_update/editing_snippet_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYour changes are automatically saved in real-time and reflected across the Pieces Sidebar.\n\n## Actions from Markdown Preview Mode\n\nWhen viewing a snippet in **Markdown Preview Mode** in the Pieces for Obsidian Plugin, you can access several actions to manage and enhance your snippets directly from the `Pieces Actions` button below the snippet.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/edit_update/code_block_quick_actions_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Material Management Actions\n\nThere are several material management options available to you when editing code snippets in the Pieces for Obsidian Plugin:\n\n***\n\n| `Copy Code to Clipboard` | Instantly copies the snippet's content to your clipboard for use elsewhere in your notes or projects. |\n| ------------------------ | ----------------------------------------------------------------------------------------------------- |\n| `Edit Snippet`           | Modifies the snippet's content or metadata.                                                           |\n| `Edit Annotations`       | Adds, updates, or removes annotations to provide additional context or notes for the snippet.         |\n| `Share via Pieces`       | Creates a shareable link to the snippet for collaboration or external use.                            |\n\n***\n\n## Actions from the Quick Preview Mode\n\nWhen viewing a snippet in **Quick Preview Mode** in the Pieces for Obsidian plugin, several quick actions are available to streamline snippet management and enhance workflow.\n\nThese actions can be accessed from the toolbar or the **Captured Context** section beneath the snippet.\n\n### Toolbar Actions\n\nYou can share, edit, copy, and manage auto-generated metadata for each snippet by using the `See Pieces Actions` or `Hide Pieces Actions` button, which is represented as the `Pieces` logo.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1735852860603/96dd81de-04ac-4e0f-8f91-20423d362a62.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n| `Edit Snippet`                             | Modifies the snippet's content or metadata.                                                           |\n| ------------------------------------------ | ----------------------------------------------------------------------------------------------------- |\n| `Copy Code to Clipboard`                   | Instantly copies the snippet's content to your clipboard for use elsewhere in your notes or projects. |\n| `Share via Pieces`                         | Creates a shareable link to the snippet for collaboration or external use.                            |\n| `Manage Annotations for Selected Material` | Adds, updates, or removes annotations to provide additional context or notes for the snippet.         |\n| `Open Quick Menu`                          | Opens a Quick Menu to access advanced snippet management options                                      |\n\n***\n\n### Quick Menu Actions\n\nThe Pieces for Obsidian Plugin allows you to quickly manage your snippets by clicking the **three dots** inside of the Pieces Drive Sidebar—from there, you can select from a range of options outlined in the table below.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1735853054529/bd3f4259-a427-425d-83fb-780e62ffa82d.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n| `Reclassify`    | Change the snippet’s classification.                   |\n| --------------- | ------------------------------------------------------ |\n| `Rename`        | Update the snippet’s title.                            |\n| `Duplicate`     | Create a copy of the snippet.                          |\n| `Related Links` | Add or manage related links in the snippet’s metadata. |\n| `Tags`          | Add, update, or remove tags.                           |\n\n***\n\n## Quickly Access Snippets\n\n*Layers upon layers of functionality*—that’s the goal of all Pieces for Developers plugins and extensions.\n\nRight from within the Pieces Drive tab, select a saved material to open it in markdown as a preview, then click the **Edit** icon to edit & save your code.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/edit_update/editing_a_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:58.554Z",
    "filePath": "obsidian/drive/edit-update.md"
  },
  "/docs/obsidian/drive/save-snippets": {
    "slug": "/docs/obsidian/drive/save-snippets",
    "metadata": {
      "title": "Saving",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Saving Materials\n\nSave code snippets to the Pieces Drive in two ways: use the right-click menu or save embedded buttons in code sections.\n\nYou can use this feature to save all kinds of proper markdown and code materials, such as:\n\n* API endpoint definitions\n\n* Utility functions or commonly used helper methods\n\n* Predefined templates for organizing notes\n\n* Task Lists\n\n* Code Blocks\n\n* Reusable patterns for internal or external links\n\n### via Right-Click Menu\n\nTo capture useful code snippets via the right-click menu:\n\n<Steps>\n  <Step title=\"Highlight the Section\">\n    Select the section you want to save.\n  </Step>\n\n  <Step title=\"Right-click on the Highlighted Section\">\n    Open the context menu by right-clicking on the selected section.\n  </Step>\n\n  <Step title=\"Choose Save to Pieces\">\n    From the menu, select Save to Pieces.\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/saving_snippets/save_to_pieces_rightclick_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Embedded Buttons\n\nTo save code snippets directly from your notes:\n\n<Steps>\n  <Step title=\"Locate the Code Block\">\n    Find the code block you want to save within your note.\n  </Step>\n\n  <Step title=\"Click the Save Button\">\n    Use the **Save** button embedded within the code block to save it to Pieces Drive.\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/saving_snippets/snippet_save_to_pieces.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Copilot Chat\n\nYou can take any code block existing in your Copilot Chat and click `Save to Pieces`—like code generated by Pieces Copilot, code blocks you added as context that weren’t saved as individual snippets, and any other kind of code.\n\nTo do so, click the `Save to Pieces` button on any code block within the Copilot Chat view.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/saving_snippets/save_to_pieces_copilot_chat_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## What’s Stored When You Save a Material\n\nWhen you save a snippet to your Pieces Drive, it’s more than just the code that gets stored.\n\nThe Pieces Copilot captures:\n\n* `Type`: Categorizes the snippet (e.g., API call, function, class) with it’s code language.\n\n* `Associated Tags`: Keywords associated with the snippet for easier searching.\n\n* `Custom Description`**:** Specifies precisely which *lines* (in numerical form) the snippet is from, as well as the file from which it originated—very useful for mind-mapping.\n\n* `Smart Description`: AI-generated descriptions that summarize the snippet’s purpose and function.\n\n* `Suggested Searches`: Related searches that help you discover similar snippets.\n\n* `Related Links`: References to documentation, code repositories, or other relevant resources.\n\n* `Related People`: Associated collaborators or contributors.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/saving_snippets/saved_snippet_whats_stored_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nAdditionally, the Pieces Copilot **scans saved snippets for sensitive information**, such as API keys, passwords, or authentication tokens, to ensure no confidential data is accidentally stored.\n\n## Where Saved Materials Live\n\nSaved snippets are stored locally on your device, ensuring accessibility even when offline. This also means that any Pieces for Developers extension or plugin—or even the Pieces Desktop App—has constant, up-to-date access to your saved materials.\n\nThere are two ways to find your saved snippets—via the `Pieces Explorer` menu, or with the `Pieces: Search Pieces` feature.\n\n[Read more about how to find your saved snippets here.](https://docs.pieces.app/products/obsidian/drive/search-reuse#finding-saved-snippets)",
    "lastModified": "2025-06-04T17:24:58.560Z",
    "filePath": "obsidian/drive/save-snippets.md"
  },
  "/docs/obsidian/drive/search-reuse": {
    "slug": "/docs/obsidian/drive/search-reuse",
    "metadata": {
      "title": "Searching",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Finding Saved Materials\n\nTo locate your snippets, use the Pieces Sidebar menu.\n\n### via Pieces Sidebar\n\nTo locate your snippets, use the Pieces Sidebar menu or the search feature:\n\n<Steps>\n  <Step title=\"Open the Pieces Sidebar\">\n    Open the Pieces plugin from the Obsidian sidebar.\n  </Step>\n\n  <Step title=\"Navigate to Saved Materials\">\n    Click on **Saved Materials** in the menu to display a list of your saved. materials\n  </Step>\n\n  <Step title=\"Open a Snippet\">\n    Click on your desired snippet to view its content, associated metadata, and quick actions.\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/search_reuse/copy_paste_snippet_OBS.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Search Feature\n\nIf you know exactly what you’re looking for, you can search for specific snippets:\n\n<Steps>\n  <Step title=\"Click the Search Bar\">\n    Open the search bar at the top of the Pieces Sidebar.\n  </Step>\n\n  <Step title=\"Enter Your Query\">\n    Type in your search query.\n  </Step>\n\n  <Step title=\"Navigate the Results\">\n    Scroll through the results or use the arrow keys to find your desired snippet.\n  </Step>\n\n  <Step title=\"Open the Snippet\">\n    Click on the snippet to open it and view its content, associated metadata, and quick actions.\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/search_reuse/search_process.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  To narrow down your search, you can use tags, descriptions, names, types, or even languages themselves.\n</Callout>\n\n## Adding Filters to Your Search\n\nSaved snippets being viewed in the Pieces Drive Sidebar can be sorted and filtered to narrow down your search results.\n\n### Filtering Snippets\n\n<Steps>\n  <Step title=\"Click the Search Bar\">\n    Click on the search bar at the top of the Pieces Drive Sidebar.\n  </Step>\n\n  <Step title=\"Use Quick Filters\">\n    Apply quick filters such as `Titles`, `Annotations`, or `Content` that appear below the search bar.\n  </Step>\n\n  <Step title=\"Filter by Tags or Keywords\">\n    Enter specific tags or keywords in the search bar to refine the displayed snippets.\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/search_reuse/filtering_snippets.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Sorting Snippets\n\n<Steps>\n  <Step title=\"Click the Sorting Icon\">\n    Click the icon at the top of the sidebar (e.g., clock icon for recent). The icon changes based on the selected sorting method.\n  </Step>\n\n  <Step title=\"Choose Sorting Order\">\n    Select your preferred sorting order, such as `Recent`, `Suggested`, `Alphabetical`, or `Language`.\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/search_reuse/sorting_snippets.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Viewing and Reusing Saved Snippets\n\n[Saved snippets](https://docs.pieces.app/products/obsidian/drive/save-snippets) can be viewed alongside their saved metadata by opening them directly from the Pieces Sidebar and clicking on them in the Pieces Drive once they’ve been found.\n\nFrom this view, you can use Quick Actions, copy the snippet, or insert it at the cursor in your editor. Click `Open Markdown Preview` to **see the snippet in markdown preview mode,** or click on the snippet for a quick overview.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/search_reuse/mardown_preview_mode_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nFrom this view, you can use the `Pieces Actions` button at the bottom of the snippet to copy it, edit it, update annotations, generate a shareable link, toggle the visibility of the Pieces Actions buttons, or highlight and right-click to copy, or use `⌘+c` (macOS) or `ctrl+c` (Windows/Linux) to copy to your clipboard.\n\n### via Pieces Sidebar\n\nYou can view snippets by opening the Pieces Drive Sidebar in Obsidian by clicking the Pieces icon on the left-hand side of your screen.\n\nOnce in the sidebar, you can insert a snippet into your note by clicking the `Insert at Cursor` button.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/search_reuse/insert_at_cursor_copy_paste_snippet_OBS.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nYou can also right-click a snippet and select `Copy to Clipboard`, allowing you to paste it anywhere you need.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/search_reuse/copy_to_clipboard_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Previewing Saved Snippets\n\nWhen using the Pieces Drive Sidebar in Obsidian, you can click on the **three vertical dots** on a saved code snippet to **delete** it, or select from 6 additional options:\n\n***\n\n| `View Preview`     | `Start Copilot Chat`      | `Copy to Clipboard`     |\n| ------------------ | ------------------------- | ----------------------- |\n| `Insert at cursor` | `Generate Shareable Link` | `Open Markdown Preview` |\n\n***\n\n## Real-Time Snippet Streaming\n\nEvery product within the Pieces Suite utilizes [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os) to gather information regarding the context of your snippets.\n\nWhen you modify a snippet in the <a target=\"_blank\" href=\"https://docs.pieces.app/products/desktop\">Pieces for Developers Desktop App</a>—like changing its name or description, tags, or any other metadata—those updates are automatically shown in your <a target=\"_blank\" href=\"https://obsidian.md/plugins?search=pieces-for-developers\">Pieces for Obsidian Plugin</a> without the need for refreshing.\n\n<Callout type=\"tip\">\n  If your snippets aren’t updating immediately, refer to the [troubleshooting guide](https://docs.pieces.app/products/obsidian/troubleshooting) for instructions on refreshing your snippet list.\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.563Z",
    "filePath": "obsidian/drive/search-reuse.md"
  },
  "/docs/obsidian/drive/sharing": {
    "slug": "/docs/obsidian/drive/sharing",
    "metadata": {
      "title": "Sharing Saved Materials",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## How to Generate Shareable Links\n\nThere are 3 ways to share saved snippets—by using the tool menu, right-click menu, or by the `Pieces Actions` button on previously-saved snippets within the Pieces Drive.\n\nThis link can easily be shared via email, Discord, Slack, or other platforms. The recipient can view the snippet **without needing to have a Pieces account.**\n\n### via Right-Click Menu\n\nShareable Pieces links for your code snippets can be generated by right-clicking a portion of selected code, then clicking `Share via Pieces Link`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/sharing/share_via_pieces_link_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Command Palette\n\nYou can open the command palette using `⌘+p` (macOS) or `ctrl+p` (Windows/Linux), type `Pieces for Developers: Share via Pieces`, and run the command to generate and copy a shareable link.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/sharing/share_via_command_prompt.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via Pieces Actions\n\nWhen you are inside the **Markdown Preview** window in Obsidian, you can toggle the `Pieces` icon to unroll the `Pieces Actions`, then click `Share via Pieces` to generate a shareable link that’s automatically copied to your keyboard.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/sharing/pieces_actionss.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Sharing a Previously Saved Snippet\n\nIf you save a material, but didn’t generate a shareable link at the time—no problem. You can still generate a shareable link (or copy, regenerate or delete the existing link) from the Pieces Drive.\n\n<Steps>\n  <Step title=\"Open the Pieces Sidebar\">\n    Click the `Pieces icon` on the left-hand side of your Obsidian window.\n  </Step>\n\n  <Step title=\"Locate the Snippet\">\n    Navigate to the **Pieces Drive** section and click on the snippet you want to share to open the Quick Preview.\n  </Step>\n\n  <Step title=\"Generate the Link\">\n    At the bottom of the snippet Quick Preview, click the `Generate Shareable Link` option.\n\n    <Callout type=\"info\">\n      Alternatively, use the `Quick Menu` (three-dot icon) button to access sharing options\n    </Callout>\n  </Step>\n\n  <Step title=\"Copy the Link\">\n    A new popup will appear giving you options to copy the personal link or generate a GitHub Gist.\n  </Step>\n</Steps>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/sharing/hovering_share_quick_view.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Enriched Sharing Experience\n\nWhen you `Share` a snippet, it’s not just the code that’s included. The snippet comes with additional metadata to provide context—[you can read more about that here.](https://docs.pieces.app/products/obsidian/drive/save-snippets#whats-stored-when-you-save-a-snippet)\n\n* `Snippet Type`: Identify the language or framework, such as Python or React.\n\n* `Tags`: Useful keywords for quick categorization.\n\n* `Description`: A short summary of what the snippet does.\n\n* `Related Links`: Helpful resources or documentation tied to the snippet.\n\n* `Author Information`: A record of who created the snippet.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733970528143/f4acf9e2-0d73-4634-8695-a6cdcfbd3814.png?auto=compress,format&format=webp\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## What Information Gets Shared\n\nWhen a snippet is saved to the Pieces Cloud, the code is [enriched with valuable](https://docs.pieces.app/products/obsidian/drive/save-snippets#whats-stored-when-you-save-a-snippet) information such as related people, links, annotations, tags, and an automatically-generated description.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733970040011/f627038f-b8f3-46f8-8235-600d1a8a8efd.png?auto=compress,format&format=webp\" alt=\"\" align=\"middle\" fullwidth=\"true\" />\n\n### Sensitive Information Watchdog\n\nThe `Share` feature does more than allow you to effectively share snippets across your entire team and other communities, though.\n\nYou'll see a section titled **Sensitive Information:**\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733970500459/864946d3-8d27-435c-beb4-01f5d37e5fdc.png?auto=compress,format&format=webp\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nOur in-house ML model scans snippets for potentially sensitive information, like API keys or passwords, and alerts you so that you can make an informed decision before sharing the snippet.  \n\nThe scan happens locally using on-device machine learning models **before the snippet is uploaded to the drive** for sharing. This allows you to make an informed decision about sharing your code.",
    "lastModified": "2025-06-04T17:24:58.566Z",
    "filePath": "obsidian/drive/sharing.md"
  },
  "/docs/obsidian/drive": {
    "slug": "/docs/obsidian/drive",
    "metadata": {
      "title": "Pieces Drive",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Materials in Pieces Drive\n\nWith Pieces Drive and PiecesOS for Obsidian plugin, you can save all kinds of code snippets and easily find, edit, and reuse them whenever, wherever, and however you need.\n\nHere are some examples of developer materials you can reuse:\n\n***\n\n| `Logging Utilities`    | A helper function for detailed server-side logging with timestamps and error levels.                        | Speeds up debugging and monitoring by inserting reliable logging methods.   |\n| ---------------------- | ----------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------- |\n| `Validation Functions` | A function to validate JSON payloads or form inputs before submission.                                      | Ensures data integrity with reusable, thoroughly tested validation logic.   |\n| `API Integration Code` | Prewritten `Axios` code for making GET or POST requests, complete with error handling and response parsing. | Reduces repetitive work when integrating RESTful APIs or GraphQL endpoints. |\n| `Component Templates`  | A React functional component template with basic hooks and styling setup.                                   | Provides a consistent starting point for building new components.           |\n| `Database Queries`     | A MongoDB query to retrieve active user data filtered by last login.                                        | Streamlines database tasks by reusing optimized query patterns              |\n\n***\n\n## Boosting Productivity with Snippet Management\n\nThe Pieces Drive connects you with your notes and project files, allowing you to focus on what matters—building great software—while empowering you with tools for efficient code reuse.\n\n* **Improved Productivity**: By quickly accessing and reusing code snippets, you can focus on solving new problems rather than resolving old ones.\n\n* **Contextual Awareness**: Snippets are enriched with metadata, descriptions, and links to relevant searches, helping you remember each piece of code's origin, purpose, and ideal usage scenarios.\n\n* **Code Standardization**: Sharing best practices and reusable components ensures that uniform coding practices and conventions are available across teams and projects.\n\nBy using the Pieces Drive, you can capture and manage your snippets to streamline daily tasks and enhance your workflow in several ways:\n\n### Save & Organize\n\nEasily [save a function, script, or piece of boilerplate](https://docs.pieces.app/products/obsidian/drive/save-snippets) directly from the tool menu.\n\nThese snippets are saved to your personal Pieces Drive and enriched with context, metadata, and tags, making them easy to retrieve whenever you need them.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/getting_started/snippet_markdown_preview.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nTo save a snippet in Obsidian, right-click on the selected code and choose `Save to Pieces`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/MAIN_using_snippets/save_snippet_pieces.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Search & Reuse\n\nYou can directly [search through your collection of saved materials in Pieces Drive](https://docs.pieces.app/products/obsidian/drive/search-reuse) from within Obsidian, allowing you to find snippets quickly by keyword or context.\n\nTo search, access the **Search Pieces** action from the sidebar in the Pieces Drive tab.\n\nEnter your query into the search bar and press `return` (macOS) or `enter` (Windows/Linux) to see the search results.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/MAIN_using_snippets/search_process.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nAny related snippets will appear in the results list. From there, you can press `return` (macOS) or `enter` (Windows/Linux) to view your snippet, complete with all its saved context, rendered neatly inside the editor.\n\n### Sharing\n\nShare your snippets directly with team members in Obsidian, even if they don’t use Pieces.\n\n<Callout type=\"tip\">\n  This can be done without the recipient needing a Pieces for Developers Account.\n</Callout>\n\nSharing useful bits of code can help remove productivity blockers, especially if a co-developer is unfamiliar with the project or if they’re a junior developer.\n\nFor example, a teammate working on server monitoring can use your shared script to automate daily tasks without additional setup.\n\nThese shared links also retain their [original enriched metadata](https://docs.pieces.app/products/obsidian/drive/save-snippets#whats-stored-when-you-save-a-snippet), including tags, descriptions, and other information, making it easier for teammates to understand and utilize the code.\n\nTo share a snippet in Obsidian, highlight the text you’d like to share, right-click, and click `Share Via Pieces Link`.\n\nThis generates a link you can share with teammates, ensuring easy access to your reusable code.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732741148257/c227792e-1abb-432e-9b46-15a486403994.png?auto=compress,format&format=webp\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Use Cases\n\nWith the Pieces for Obsidian Plugin, [your snippets become a powerful library](https://docs.pieces.app/products/obsidian/drive/edit-update#how-to-edit-snippets) of reusable code. You can organize, search, edit, and share them across your projects, all within the Pieces Drive.\n\nHere are some examples of how you can use them:\n\n### Reusable Code Snippets for Data Science\n\nIf you frequently work on complex data science projects, algorithm design, or data processing pipelines, you can save reusable code snippets in your Pieces Drive.\n\nThese snippets can be easily imported into Obsidian to document workflows, analyze results, and iterate on solutions in future projects.\n\n```python\n\ndata = pd.read_csv('data.csv')  \n\ndata.fillna(method='ffill', inplace=True)  \n \nfrom sklearn.preprocessing import MinMaxScaler  \nscaler = MinMaxScaler()  \ndata[['feature1', 'feature2']] = scaler.fit_transform(data[['feature1', 'feature2']])  \n\nprint(data.describe())  \n```\n\n### Code Snippet Documentation\n\nSuppose you frequently work on projects that involve monitoring file system changes. In that case, you can [save a helpful snippet to your Pieces Drive](https://docs.pieces.app/products/obsidian/drive/save-snippets) that does precisely that, allowing you to import it over to Obsidian for documenting it:\n\n```go\n\nfunc watchFileChanges(path string) {\n\twatcher, err := fsnotify.NewWatcher()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer watcher.Close()\n\n\terr = watcher.Add(path)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfor {\n\t\tselect {\n\t\tcase event := <-watcher.Events:\n\t\t\tif event.Op&fsnotify.Write == fsnotify.Write {\n\t\t\t\tfmt.Println(\"Modified file:\", event.Name)\n\t\t\t}\n\t\tcase err := <-watcher.Errors:\n\t\t\tfmt.Println(\"Error:\", err)\n\t\t}\n\t}\n}\n```\n\n## Additional Snippet Scenarios\n\nReview some additional scenarios and use cases for Pieces Drive and see how the <a target=\"_blank\" href=\"https://obsidian.md/plugins?id=pieces-for-developers\">Pieces for Obsidian Plugin</a> could benefit you and your workflow.\n\n***\n\n<AccordionGroup>\n  <Accordion title=\"Testing Framework Templates\">\n    Streamline testing by saving snippets for your frequently used testing functions or unit test templates.\n  </Accordion>\n\n  <Accordion title=\"Command-Line Utilities\">\n    Save command-line instructions as snippets to quickly retrieve deployment commands, Docker setups, and other essential terminal operations.\n  </Accordion>\n\n  <Accordion title=\"Error Handling & Logging\">\n    You can also save standard logging functions or error-handling snippets that can be reused across applications, promoting consistent error management.\n  </Accordion>\n\n  <Accordion title=\"Quickly Create New Projects\">\n    Import saved setup scripts, configuration files, and commonly used dependencies to speed up project setup and ensure consistency across new projects.\n  </Accordion>\n</AccordionGroup>\n\n***\n\n<a target=\"_blank\" href=\"https://obsidian.md/plugins?id=pieces-for-developers\">Download the Pieces for Obsidian Plugin today!</a>",
    "lastModified": "2025-06-04T17:24:58.547Z",
    "filePath": "obsidian/drive.md"
  },
  "/docs/obsidian/get-started": {
    "slug": "/docs/obsidian/get-started",
    "metadata": {
      "title": "Get Started",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Obsidian Prerequisites\n\nBefore installation, you'll need:\n\n* **PiecesOS:** The main engine that powers the Pieces for Obsidian Plugin. [Learn more about PiecesOS.](https://docs.pieces.app/products/core-dependencies/pieces-os)\n\n* **Obsidian:** <a target=\"_blank\" href=\"https://obsidian.md/download\">Obsidian</a> is installed on your development machine.\n\n<Callout type=\"alert\">\n  PiecesOS must be installed to enable the Pieces for Obsidian Plugin. We also recommend the Pieces for Developers Desktop App for enhanced functionality.\n</Callout>\n\n## Installing the Pieces for Obsidian Plugin\n\n<Steps>\n  <Step title=\"Settings\">\n    Open Obsidian and navigate to the **Settings** view.\n  </Step>\n\n  <Step title=\"Community Plugins Tab\">\n    Locate and navigate to the **Community Plugins** option.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/getting_started/settings_community_plugins_disabled_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n    <Callout type=\"info\">\n      Alternatively, find the Pieces for Obsidian Plugin on the <a target=\"_blank\" href=\"https://obsidian.md/plugins?search=pieces-for-developers\">Obsidian Plugin Marketplace</a> and install it manually.\n    </Callout>\n  </Step>\n\n  <Step title=\"Community Plugins Option\">\n    Click **Turn on community plugins.**\n  </Step>\n\n  <Step title=\"Browsing Plugins\">\n    Locate and click the **Browse** button in the **Community Plugins** section.\n  </Step>\n\n  <Step title=\"Search for the Plugin\">\n    Click the search bar, then search for **Pieces for Developers**, and click the Pieces for Developers option.\n  </Step>\n\n  <Step title=\"Install the Plugin\">\n    Click the **Install** button. After the plugin installs, click **Enable**.\n  </Step>\n</Steps>\n\n### Setting Up PiecesOS\n\nTo use the Pieces for Obsidian Plugin, you must install <a target=\"_blank\" href=\"https://docs.pieces.app/products/core-dependencies/pieces-os\">PiecesOS</a> on your operating system.\n\nFollow the specific setup steps below:\n\n<get-started-install />\n\n## Updating\n\nUpdating the Pieces for the Obsidian plugin will require a few extra steps.\n\n<Steps>\n  <Step title=\"Settings\">\n    In the bottom left of the editor, select the settings option.\n  </Step>\n\n  <Step title=\"Community Plugins Tab\">\n    Locate the tab called **Community Plugins** and select it.\n  </Step>\n\n  <Step title=\"Current Plugins Section\">\n    In the new window, locate the section labeled **Current Plugins** and click the **Check for Updates** button.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/getting_started/check_for_updates_button_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## Onboarding\n\nThe Pieces for Obsidian plugin includes a walkthrough that guides you through the steps on a single page. This onboarding page will teach you how to save, view, share, and use saved materials and how to make the most of the plugin.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/getting_started/general_onboarding.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Save Your First Material\n\nThis section will walk you through saving your first meaningful material, including a helpful GIF section and a nice walkthrough.\n\n### Find and Use your Materials\n\nIn this section, you'll learn how to find materials within Pieces and use them in Obsidian. You can also click the Pieces logo at the top right of the application to open [Pieces Drive](https://docs.pieces.app/products/obsidian/drive).\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/using_snippets/search_reuse/sorting_snippets.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Share your Materials\n\nSharing materials is a key feature of PiecesOS. It lets you share any new or previously saved materials with anyone, anywhere in the world, without the recipient needing an account.\n\n### Discover New Materials\n\nPieces will automatically offer highly relevant and reusable materials directly in Obsidian. This section explains how you can do it yourself. You can also click the `Pieces` icon at the top right of your Obsidian editor and select the `{}` icon to switch to your suggested snippets section.\n\n### Enrich your Code Blocks\n\nPieces also automatically generates tags, titles, descriptions, and links to other similar code snippets or materials with a single button press! To try it out, click the Pieces button embedded in your code blocks and then click on the enrich icon.\n\n### More Resources\n\nPieces works with you to ensure the best possible experience. You can find Pieces’ social media at the bottom of the onboarding to connect with us for <a target=\"_blank\" href=\"https://docs.pieces.app/products/support\">support</a> or to share any mind-blowing moments you’ve encountered along your journey!\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/getting_started/end_of_onboarding.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Uninstalling\n\n<Steps>\n  <Step title=\"Settings\">\n    In the bottom left of the editor, select the settings option.\n  </Step>\n\n  <Step title=\"Community Plugins Tab\">\n    Locate the tab called **Community Plugins** and select it.\n  </Step>\n\n  <Step title=\"Installed Plugins Section\">\n    On the bottom of the **Community Plugins** window, locate the section called **Installed Plugins.**\n  </Step>\n\n  <Step title=\"Pieces for Developers Plugin.\">\n    Locate the installed Pieces for Developers plugin and click the trash icon to uninstall the plugin.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/getting_started/uninstall_button_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n<Callout type=\"tip\">\n  Restart your Obsidian editor after removing the plugin to complete the uninstallation process.\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.569Z",
    "filePath": "obsidian/get-started.md"
  },
  "/docs/obsidian/troubleshooting": {
    "slug": "/docs/obsidian/troubleshooting",
    "metadata": {
      "title": "Troubleshooting",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Having Trouble with Pieces for Obsidian?\n\nIf the Pieces for Obsidian Plugin isn’t working as expected, try the following troubleshooting steps.\n\n<on-device-storage />\n\n### Ensure You Have the Latest Versions\n\nConfirm you’re using the latest version of the <a target=\"_blank\" href=\"https://obsidian.md/plugins?id=pieces-for-developers\">Pieces for Obsidian Plugin</a> from the Obsidian community plugins marketplace. The minimum functioning version permitted is currently **1.7.7,** and the newest version of [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os), which has a minimum functioning version of **11.0.0**.\n\n### Check PiecesOS Status\n\nEnsure that PiecesOS is running. It must be active for the Pieces for Obsidian Plugin to function properly.\n\n### Restart Obsidian After Updates\n\nIf you’ve recently installed or updated PiecesOS or the Pieces for Obsidian Plugin, restart Obsidian to apply the updates properly.\n\nIf the issue still persists, contact the <a target=\"_blank\" href=\"https://getpieces.typeform.com/to/mCjBSIjF#docs-obsidian\">Pieces support team</a>.\n\n### Refreshing Copilot Chats\n\nIf you're using the Pieces Copilot chat and disconnect from WiFi or encounter issues with a cloud-based LLM, you may need to refresh the chat. This can resolve issues such as the LLM appearing to \"hang\" (e.g., generating a response that turns out to be an infinite loop).\n\nClick the three vertical dots in the top-right corner of your Copilot Chat window and select **Refresh**.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/troubleshooting/refresh_copilot_chat_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:58.573Z",
    "filePath": "obsidian/troubleshooting.md"
  },
  "/docs/obsidian": {
    "slug": "/docs/obsidian",
    "metadata": {
      "title": "Obsidian Plugin",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/MAIN_obsidian_plugin/documentation_parent_page.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Pieces for Obsidian Extension\n\nIt gives users a simple way to manage and use saved code snippets through the Pieces Drive, using the AI-powered features of the [Pieces Copilot](https://docs.pieces.app/products/obsidian/copilot), all directly within their development environment.\n\n* [Pieces Copilot](https://docs.pieces.app/products/obsidian/copilot): Engage in AI-driven conversations to enhance productivity by providing contextual assistance for your projects—helping with code comprehension, comments, troubleshooting, and more—all by adding files and folders as context, with or without the powerful Long-Term Memory Engine (LTM-2).\n\n* [Pieces Drive](https://docs.pieces.app/products/obsidian/drive): Effortlessly save, find, and share your frequently used code snippets to your Pieces Drive. This makes organizing your work easy, quickly accessing important code, and collaborating effectively with others.\n\n<CardGroup cols={2}>\n  <Card title=\"Getting Started\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1735324600755/1532f4ad-d0db-46c7-9086-7bf1e026e71b.png\">\n    Follow [these instructions](https://docs.pieces.app/products/obsidian/get-started) to download and install the Pieces for Obsidian.\n  </Card>\n\n  <Card title=\"Support & Troubleshooting\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1735324568468/7aabc7b5-90af-483e-9829-66c3c76c5961.webp\">\n    Explore [troubleshooting options](https://docs.pieces.app/products/obsidian/troubleshooting), navigate to our <a target=\"_blank\" href=\"https://docs.pieces.app/products/support\">support page</a>, or <a target=\"_blank\" href=\"https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr\">directly book a call</a> with our engineers.\n  </Card>\n</CardGroup>\n\n<guides-overview-card />\n\nThis extension is designed to offer **two main pillars of functionality** for developers working in the Obsidian editor—AI assistance with the Pieces Copilot and developer material management within the Pieces Drive.\n\n### Enhanced AI Assistance\n\nThrough the Pieces for Obsidian Plugin, developers can enhance productivity by engaging in [context-based AI conversations](https://docs.pieces.app/products/obsidian/copilot/chat), contextualized with the relevant notes and folders, all within Obsidian.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/MAIN_obsidian_plugin/right_click_context_menu_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Integrated Snippet Management\n\nWith Pieces Drive and PiecesOS embedded in Obsidian, developers can [save, search, and share their code snippets](https://docs.pieces.app/products/obsidian/drive). This boosts productivity by keeping reusable code easily accessible and organized within their notes and project files.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/MAIN_obsidian_plugin/pieces_snippet_manager_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Using Pieces Copilot\n\nThe Pieces for Obsidian Plugin enhances your workflow by enabling you to save, manage, and share snippets directly within Obsidian. It offers features like snippet enrichment, sharing via custom links, and seamless integration with your development environment.\n\nTo explore available options, select the `Pieces` logo below a code snippet.\n\nFrom here, you’ll find several quick actions, including:\n\n* `Save and Manage Snippets`**:** Effortlessly [save your code snippets to Pieces Drive for easy access and organization](https://docs.pieces.app/products/obsidian/drive/save-snippets#whats-stored-when-you-save-a-snippet).\n\n* `Snippet Enrichment`**:** Automatically generate tags, descriptions, and related links for your code snippets, enhancing their context and usability.\n\n* `Sharing Capabilities`**:** [Share your code snippets with others via custom links](https://docs.pieces.app/products/obsidian/drive/sharing), facilitating collaboration and knowledge sharing.\n\n* `Integration with Development Tools`**:** Seamlessly integrate with your development environment, allowing for efficient code management and retrieval.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/MAIN_obsidian_plugin/pieces_logo_activated_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Managing Your Code Snippets\n\nSaving and managing code snippets with Pieces in the Obsidian plugin is simple and efficient.\n\nTo save a snippet, right-click the selected code, hover over `Pieces`, and choose `Save Current to Pieces`. You can also use the `Share via Pieces Link` option to share snippets with others, making collaboration easier within your notes and project files.\n\n<Callout type=\"tip\">\n  Common snippet types include utility functions, API requests, and reusable code blocks.\n</Callout>\n\nWhen you save snippets to your Pieces Drive with Pieces in Obsidian, they are enriched with AI-generated metadata, such as [tags, titles, authorship details, and descriptions](https://docs.pieces.app/products/obsidian/drive/save-snippets#whats-stored-when-you-save-a-snippet), keeping everything organized and easily accessible.\n\nHere are some brief descriptions of the different material management options available within the Pieces for Obsidian Plugin:\n\n* `Saving`: [Save selected code or text snippets directly to your Pieces repository](https://docs.pieces.app/products/obsidian/drive/save-snippets#whats-stored-when-you-save-a-snippet) for easy access later.\n\n* `Enriching`: Automatically add relevant metadata like [tags, titles, and descriptions](https://docs.pieces.app/products/obsidian/drive/save-snippets#whats-stored-when-you-save-a-snippet) to improve the organization of your snippets.\n\n* `Sharing`: [Share snippets with](https://docs.pieces.app/products/obsidian/drive/sharing) your team, enabling collaboration and knowledge exchange.\n\n* `Searching`: [Search your saved snippets](https://docs.pieces.app/products/obsidian/drive/search-reuse#via-search-feature) using keywords, tags, or other metadata to find the relevant code or text when needed.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/MAIN_obsidian_plugin/code_block_quick_actions_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Referencing & Reusing\n\nThe <a target=\"_blank\" href=\"https://obsidian.md/plugins?id=pieces-for-developers\">Pieces for Obsidian Plugin</a> offers powerful search tools to find and access your snippets saved to Pieces Drive quickly. You can search using keywords, tags, or other metadata, making locating relevant snippets within your notes and projects easy.\n\nIn Obsidian, you can perform broad searches or refine results using specific terms like function names, keywords, or tags, making it easy to locate the exact snippet you need.\n\nTo search for snippets, open your **Obsidian Vault** and navigate to the **Pieces** plugin in the sidebar.\n\nYou can input your query from the search bar at the top of the Pieces panel. You can search by specific terms, tags, or even parts of snippets.\n\nOnce you find the snippet you're looking for, you can easily insert it directly into your note or project by selecting `Insert At Cursor`. Once found, snippets <a target=\"_blank\" href=\"https://docs.pieces.app/products/obsidian/drive/sharing\">shared</a> or <a target=\"_blank\" href=\"https://docs.pieces.app/products/obsidian/drive/search-reuse#viewing-and-reusing-saved-snippets\">copied</a> directly into your project.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/obsidian_plugin_assets/MAIN_obsidian_plugin/search_bar_activated_OBS.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Download the Plugin\n\nReady to streamline your development? Download the <a target=\"_blank\" href=\"https://obsidian.md/plugins?search=pieces-for-developers\">Pieces for Obsidian Plugin</a> and follow our [installation guide to start.](https://docs.pieces.app/products/obsidian/get-started)",
    "lastModified": "2025-06-04T17:24:58.519Z",
    "filePath": "obsidian.md"
  },
  "/docs/privacy-security-your-data": {
    "slug": "/docs/privacy-security-your-data",
    "metadata": {
      "title": "Privacy, Security & Your Data",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/privacy_and_security/soc_secure_private.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Private and Secure\n\nYour privacy and security are our **top priorities.**\n\nPieces for Developers is built with a local-first architecture, so your code stays on-device by default, with complete offline functionality and cloud capabilities *only if enabled.*\n\nDesigned for complete user control, all cloud features are opt-in only, telemetry is clearly marked and opt-out of, and you have full control over all privacy settings.\n\n***\n\n🛡️ *We are SOC 2 Certified & Enterprise-Ready!*\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/privacy_and_security/soc_compliance.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Data Storage & Control\n\nAll of your data is stored locally. When interacting with cloud-based LLMs, Pieces for Developers defaults to the model provider’s Privacy Policy—like OpenAI—since we use their API to provide the model.\n\n### Where Your Data Lives\n\nAll Pieces for Developers data is stored on your device and can be deleted, copied, compressed, or moved between devices without relying on cloud services. This allows easy transfer, simple backup, and no cloud dependency.\n\nAt any time, you can find your up-to-date log files can find your log files in the following locations, depending on your platform:\n\n* macOS: `/Users/<username>/Library/com.pieces.os/`\n\n* Windows: `C:/Users/<username>/Documents/com.pieces.os/`\n\n* Linux: `/Users/<username>/Documents/com.pieces.os/`\n\n<Callout type=\"tip\">\n  Replace \\<username> with your system username.\n</Callout>\n\n## Security Architecture\n\nOur system is built to run entirely on your device, ensuring your data never leaves your machine unless you choose to use cloud features.\n\n* **All Core Features Work Offline:** Our platform runs on-device, processing your *code and sensitive data locally.* This minimizes exposure to external networks and reduces unauthorized access risks.\n\n* **No Mandatory Cloud Connectivity:** You control your data. Cloud services are optional, and *no data is sent or stored remotely* unless you enable it.\n\n* **Private By Default:** Your development environment is *isolated from external servers* by default, enhancing security and reducing data breach risks.\n\n### Enterprise Security Features\n\nWe provide robust, isolated data storage and a scalable architecture designed to meet the high security demands of enterprise environments.\n\n* **Individual User Repositories:** Each developer's data is stored separately in isolated micro-databases to prevent cross-contamination.\n\n* **No Centralized Servers:** Our decentralized approach avoids a single point of failure, reducing the risk of large-scale breaches.\n\n* **Dedicated Cloud Instances (If Enabled):** For those using cloud connectivity, we provide dedicated instances with high isolation, security, and enterprise-grade scalability.\n\n### Compliance & Certifications\n\nOur platform meets stringent industry standards—with SOC-2 compliance and regular security audits—ensuring you can trust our secure infrastructure.\n\n<Steps>\n  <Step title=\"SOC-2 Compliant Infrastructure\">\n    Our systems meet the *stringent requirements* of SOC-2 compliance, a critical benchmark for security in enterprise environments. \n  </Step>\n\n  <Step title=\"Regular Security Audits\">\n    We conduct frequent audits of our infrastructure to ensure that our security practices not only meet but exceed industry standards.\n\n    These audits help us identify potential vulnerabilities and *continuously improve* our systems.\n  </Step>\n\n  <Step title=\"Enterprise-Ready Authentication with Auth0\">\n    Secure access is key to our security. Using Auth0, we ensure only *authorized* users access sensitive data, with advanced and multi-factor authentication options for extra protection.\n  </Step>\n</Steps>\n\n## Privacy Controls\n\nWe ensure users have full control over their privacy settings, data collection, and telemetry. **All data collection is opt-out**, telemetry is anonymous, and there are *clear opt-out options* in all our products. Each Pieces product offers detailed settings for *data sharing, Cloud connectivity, and telemetry controls.*\n\n<Callout type=\"info\">\n  Our tools keep your data safe by processing it on your device. Tasks run locally, and we *never* use your data to train models. You can disable cloud processing anytime to keep data on your device.\n</Callout>\n\n### Available Offline Features\n\nMany of the core pillars of Pieces for Developers functionality have been designed to be offline-flexible.\n\n***\n\n| **Feature**        | **Local Available** | **Cloud Optional** |\n| ------------------ | ------------------- | ------------------ |\n| Code Analysis      | ✅                   | ✅                  |\n| Language Detection | ✅                   | ✅                  |\n| Secret Detection   | ✅                   | ✅                  |\n| Tag Generation     | ✅                   | ✅                  |\n\n***\n\n### Cloud Integration (Optional)\n\nFor users who choose to leverage cloud-based features, our platform offers secure, scalable cloud integration while keeping you in full control.\n\n* **Individual Cloud Infrastructure:** Each user gets their own dedicated cloud setup so your data remains isolated and secure.\n\n* **Unique Subdomain Per User:** Your cloud instance is accessed via a unique subdomain, further isolating your data from others.\n\n* I**ndependent Scaling:** Our cloud services automatically scale based on *your* usage so you get consistent performance without compromising security.\n\n* **Data Isolation:** Even when using cloud functionalities, we make sure your data remains segregated from other users’ data.\n\n### Long-Term Memory (LTM-2) Security\n\nOur Long-Term Memory (LTM-2) Engine is designed to protect your work through on-device processing and advanced local integration options.\n\n* **On-device Processing:** All LTM functions run locally by default, keeping your sensitive data within your own environment.\n\n* **Local LLM Options via** <a target=\"_blank\" href=\"https://ollama.com/\">Ollama</a>: You can integrate with local LLMs through the Pieces client’s usage of Ollama as a local model wrapper for added security.\n\n* **Complete Control Over Data Sharing:** Decide when and if your data is shared, so you can be confident that you maintain full ownership and control over your information.\n\n<Callout type=\"alert\">\n  For users concerned about privacy, we strongly recommend using a local LLM with Pieces for Developers products, so LTM-2, Pieces Copilot and Pieces Drive never send data through the cloud.\n</Callout>\n\n## Privacy Policy Updates\n\nWe maintain transparency about <a target=\"_blank\" href=\"https://pieces.app/legal/privacy-policy\">our privacy practices</a>.\n\nFor the latest updates or specific concerns, please <a target=\"_blank\" href=\"https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr\">contact our support team.</a>\n\n***\n\n### Support & Documentation\n\nNeed help or have questions about privacy?\n\n* Visit our [Support Page](https://docs.pieces.app/products/support)\n\n* Join our <a target=\"_blank\" href=\"https://pieces.app/discord\">Discord community</a>\n\n* Open a <a target=\"_blank\" href=\"https://github.com/pieces-app/support/issues\">GitHub issue</a>",
    "lastModified": "2025-06-04T17:24:58.576Z",
    "filePath": "privacy-security-your-data.md"
  },
  "/docs/productivity": {
    "slug": "/docs/productivity",
    "metadata": {
      "title": "Productivity Tools",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "# Productivity Tools\n\nEnhance your productivity with Pieces across various tools and platforms.\n\n## Available Tools\n\n- **[Obsidian](/docs/obsidian)** - Knowledge management integration\n- **[Web Extension](/docs/web-extension)** - Browser extension for Chrome, Firefox, and Edge\n- **[Pieces CLI](/docs/cli)** - Command-line interface for power users\n- **[Raycast](/docs/raycast)** - macOS productivity app integration\n\nChoose a tool above to get started!",
    "lastModified": "2025-06-04T17:24:58.578Z",
    "filePath": "productivity.md"
  },
  "/docs/quick-guides/copilot-with-context": {
    "slug": "/docs/quick-guides/copilot-with-context",
    "metadata": {
      "title": "Using Pieces Copilot with Context",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Prerequisites\n\nTo complete this Quick Guide, you’ll need:\n\n1. **The Pieces Desktop App** installed and actively running on your device.\n\n2. **Long-Term Memory** enabled in the Pieces Desktop App.\n\n3. **Optional**—Pieces installed in a Python IDE, such as the [VS Code Extension](https://docs.pieces.app/products/extensions-plugins/visual-studio-code), or the [JetBrains PyCharm Plugin](https://docs.pieces.app/products/extensions-plugins/jetbrains).\n\n## In This Quick Guide\n\nThis Quick Guide will show you how to combine the Pieces Long-Term Memory with code context in a Pieces Copilot chat, demonstrating how you can use AI to help implement a feature in a Python app.\n\nAs a developer, a common daily task is reviewing a ticket in a tool like GitHub Issues or Jira and then implementing it in a codebase.\n\nThis often involves switching back and forth between the code and the ticket, which can affect your productivity due to constant context switching.\n\nWith Pieces, you can use the Long-Term Memory feature to remind you of the ticket details. You can then combine this with your code, allowing Pieces to guide you on implementing the issue, all from within your IDE!\n\n### Review a GitHub Issue\n\nThe first step is to review the issue by letting Pieces capture it, and then ask the Pieces Copilot about it.\n\n<Steps>\n  <Step title=\"Review the GitHub Issue\">\n    Open the following GitHub issue in your browser. Slowly scroll through the comments on the issue, taking maybe 30 seconds or so to scroll through it.\\\n    \\\n    You can <a target=\"_blank\" href=\"https://github.com/pieces-app/pieces-certification-course-content/issues/1\">use this issue</a> as an example.\n  </Step>\n\n  <Step title=\"Ask Pieces About the Issue\">\n    In the Pieces Copilot, start a new chat, ensuring the Long-Term Memory (LTM) context is enabled, and use the following prompt:\n\n    ```plaintext\n    Summarize the create a sign up page issue I was just reading\n    ```\n  </Step>\n</Steps>\n\nPieces will respond with a summary of the issue:\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/quick_guides/using_pieces_copilot_with_memory_context/summarize_this_issue_demo.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Clone the Project\n\nThis issue refers to a sci-fi store—a small web application written in Python and Flask for an upcoming retail store that sells themed sci-fi toys.\n\n<Steps>\n  <Step title=\"Clone the Project Repo\">\n    <a target=\"_blank\" href=\"https://github.com/pieces-app/pieces-certification-course-content\">Clone this GitHub repository.</a>\n  </Step>\n\n  <Step title=\"Navigate to the Sci-Fi Store folder\">\n    Inside the repo is a folder called `scifi_store`.\n\n    If you use an IDE like VS Code or JetBrains PyCharm, open this folder in that IDE.\n  </Step>\n</Steps>\n\n### Use the Project as Context\n\nThe next step is to add the project as context to the Pieces Copilot chat. This lets you link the project to the Long-Term Memory and ask questions about the code.\n\nAdding the project as context to your Pieces Copilot Chat will look a little different depending on whether you’re using the Pieces Desktop App or an IDE with the respective Pieces plugin or extension installed,such as VS Code.\n\n<Steps>\n  <Step title=\"via Pieces Desktop App\">\n    From the Pieces Desktop App, select the `Manage Conversation Context `button, then select `Add Folders`.\n\n    From the `Manage Copilot Context | Folders` dialog, select `Add Folders`.\n\n    Select the `scifi_store` folder in the repository you cloned in the previous step.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/quick_guides/using_pieces_copilot_with_memory_context/add_as_context_PFD.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n\n  <Step title=\"via VS Code with Pieces Installed\">\n    From the **Explorer**, right-click on the pane itself (not on a file or folder), and select `Pieces`, then click `Pieces: Add to Copilot Context`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/quick_guides/using_pieces_copilot_with_memory_context/add_as_context_VSC.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### Prompt Pieces Copilot\n\nNow that Pieces has the issue from the Long-Term Memory and the project folder as context, you can ask Pieces to implement this issue.\n\n<Steps>\n  <Step title=\"Ask Pieces how to Implement the Issue\">\n    In the same Pieces Copilot chat, use this prompt (or one like it):\n\n    ```plaintext\n    How can I implement this issue in this project?\n    ```\n  </Step>\n\n  <Step title=\"Check the Response\">\n    The Pieces Copilot will now reason over your project, as well as the GitHub issue you were looking at.\n\n    The response will contain relevant instructions on how to implement this issue, such as code for the endpoint, the new page leveraging the existing app templates, and so on.\n\n    Review these code changes along with the original codebase.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/quick_guides/using_pieces_copilot_with_memory_context/implem_in_project.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n<Callout type=\"tip\">\n  🎉 Congratulations, you’ve completed the *Using Pieces Copilot with Context* Quick Guide! 🎉\n</Callout>\n\n## Bonus—Try One Prompt\n\nThis Quick Guide showed two prompts: one to get the details about the issue and another to learn how to implement it.\n\nThis was done in 2 stages to illustrate the information from the Pieces Long-Term Memory, but is *unnecessary*. You can do this in a single prompt!\n\n<Steps>\n  <Step title=\"Create a New Copilot Chat\">\n    Create a new Pieces Copilot Chat in the Pieces Desktop App, or in your IDE.\n  </Step>\n\n  <Step title=\"Add the Project Folder as Context\">\n    Add the `scifi_store` project as context to this new Pieces Copilot Chat.\n  </Step>\n\n  <Step title=\"Prompt Pieces Copilot\">\n    Use this single prompt when interacting with Pieces Copilot;\n\n    ```plaintext\n    How can I implement the create a sign up page issue I was just reading in this Python project?\n    ```\n  </Step>\n\n  <Step title=\"Check the Response\">\n    The Pieces Copilot will now reason over your project, as well as the GitHub issue, and give you suggestions on how to implement it.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/quick_guides/using_pieces_copilot_with_memory_context/dual_prompt.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>",
    "lastModified": "2025-06-04T17:24:58.590Z",
    "filePath": "quick-guides/quick-guides/copilot-with-context.md"
  },
  "/docs/quick-guides/ltm-context": {
    "slug": "/docs/quick-guides/ltm-context",
    "metadata": {
      "title": "Using Long-Term Memory Context",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Prerequisites\n\nTo complete this Quick Guide, you’ll need:\n\n1. **The Pieces Desktop App** installed and actively running on your device.\n\n2. **Long-Term Memory** enabled in the Pieces Desktop App.\n\nTo enable the LTM-2 Engine from PiecesOS, click the PiecesOS icon to open the [Quick Menu](https://docs.pieces.app/products/core-dependencies/pieces-os/quick-menu#ltm-2-engine) on Windows or macOS, then select `Enable Long-Term Memory Engine`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/core_dependencies_assets/pieces_os_main/quick_menu/macos_enable_ltm.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## In This Quick Guide\n\nIn this Quick Guide, you’ll use [Pieces Long-Term Memory](https://docs.pieces.app/products/core-dependencies/pieces-os#ltm-2) to save context from a website, then prompt the Pieces Copilot to tell you what it saw.\n\n<Card title=\"Want a Sneak Peak?\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745425412321/d0262633-bbd5-4369-b8a3-2c68a1a1b544.webp\">\n  Here’s a <a target=\"_blank\" href=\"https://tsavo.hashnode.dev/temporal-nano-model-breakthrough\">quick read on some of the nano-models</a> we develop that layer into the data retrieval pipeline for LTM-2 and the coming *LTM-2.5*\n</Card>\n\nThis demonstrates how Pieces can capture information from any application and make it available to you in the Pieces Copilot.\n\n### Capture Context\n\nWith LTM enabled, Pieces captures workflow context from every actively used window, including the browser you’re using to read this Quick Guide.\n\n<Steps>\n  <Step title=\"Generate a Secret Message\">\n    <a target=\"_blank\" href=\"https://pieces.app/magic-moments/ltm\">Click this link</a> to generate a message Pieces can capture in a new tab.\n  </Step>\n\n  <Step title=\"Let Pieces Capture Your Context\">\n    Read the message and give Pieces a second or two to capture the context from your browser.\n  </Step>\n</Steps>\n\n### Prompt the Copilot\n\nNow that Pieces has captured the message, you can prompt the Pieces Copilot through the Pieces Desktop App to retrieve the secret message.\n\n<Steps>\n  <Step title=\"Open the Pieces Desktop App\">\n    Open the Pieces Desktop App and start a new chat or use an existing chat.\n  </Step>\n\n  <Step title=\"Prompt the Pieces Copilot\">\n    Use the following prompt with the Pieces Copilot:\n\n    ```plaintext\n    What is my secret message?\n    ```\n  </Step>\n</Steps>\n\n### Get your Secret Message\n\nOnce prompted, Pieces Copilot should generate a response containing the contents of the *Secret Message* you were given, as it was captured by LTM.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/quick_guides/using_long_term_memory_context/secret_message.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  Congratulations, you’ve completed the *Using Long-Term Memory Context* Quick Guide! 🎉\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.595Z",
    "filePath": "quick-guides/quick-guides/ltm-context.md"
  },
  "/docs/quick-guides/ltm-prompting/examples": {
    "slug": "/docs/quick-guides/ltm-prompting/examples",
    "metadata": {
      "title": "Use Cases and Example Prompts",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## In This Guide\n\nThere are many ways to use and prompt LTM to find specific information, recall past fixes and solutions, refresh your memory from conversations and shared resources, and much more.\n\nIn this guide, you’ll find some carefully selected use cases and examples that our users commonly rely on—but this is just the beginning.\n\n## Summarize & Extract Information\n\nIf you're reading a document in your browser, a PDF viewer, or a collaboration tool like Teams, Pieces is reading along with you. This means you can use Pieces to summarize or extract information from those documents.\n\nTry using these prompts to recall information captured by LTM while you were reading text in a browser or application related to your workflow.\n\n<Steps>\n  <Step title=\"Prompt #1\">\n    “Summarize the Project Falcon report I was reading last week.”\n  </Step>\n\n  <Step title=\"Prompt #2\">\n    “I was reading a Red Team huddle report yesterday. What were the items on the agenda and who were they assigned to?”\n  </Step>\n\n  <Step title=\"Prompt #3\">\n    “Last month I was looking at documentation on the Endor API. What is the API endpoint to open the bunker?”\n  </Step>\n</Steps>\n\n## Get Deep Link URLs\n\nWhen Pieces captures context from your browser, it saves the URL you were visiting.\n\nIt also captures links from other content where the URL is present in the text, so you can search for URLs, such as finding tabs you no longer have open or retrieving links mentioned in chats or emails.\n\n<Callout type=\"info\">\n  Note that Pieces is not a search engine—it captures *memories* from your activities. It will return the URLs you viewed, interacted with, or were shared with you, but it doesn't perform web searches.\n</Callout>\n\nUse similar prompts that include a little context, so LTM knows what information to surface and return to the Pieces Copilot.\n\n<Steps>\n  <Step title=\"Prompt #1\">\n    “Give me the URL of the Yavin JavaScript framework I was reading about this morning.”\n  </Step>\n\n  <Step title=\"Prompt #2\">\n    “What is the URL for the Power Converter documentation I was reading last week?”\n  </Step>\n\n  <Step title=\"Prompt #3\">\n    “I need the URL that Leia shared with me with the GCP Firestore database containing the plans.”\n  </Step>\n</Steps>\n\n## Research an Error in Code\n\nWhen you encounter an error in your code, whether it's in your terminal, a popup in your IDE, or an error in your browser, Pieces captures it.\n\n* If it's an error you've seen *before*, you can ask about it to recall what you did to fix it.\n\n* If it's a *new* error, you can use Long-Term Memory along with file or folder context to help find a solution in your codebase.\n\nOne of the most powerful applications of LTM context and the Pieces Copilot is to facilitate intelligent debugging regarding your recent or active development workflow.\n\n<Steps>\n  <Step title=\"Prompt #1\">\n    “What was the error I just saw in VS Code? Summarize some of the reasons I may have got this error and give me suggestions to resolve it.”\n  </Step>\n\n  <Step title=\"Prompt #2\">\n    “I just had an error log in my browser. What was the error and what file did it reference?”\n  </Step>\n\n  <Step title=\"Prompt #3\">\n    “How can I fix the error I just got in Warp in this project? *(Using the project as a folder of context)”*\n  </Step>\n</Steps>\n\n## Summarize Recent Work\n\nKnowledge workers often have to provide status updates, such as reports on the work they have been doing or the status of a project.\n\nFor example, developers often attend a daily standup where they list the tasks they worked on the previous day and the tasks they plan to work on today.\n\nWith access to all your activities, Pieces can help automate this process.\n\n<Callout type=\"tip\">\n  Pieces prioritizes activities based on how often workstream activities are captured. This means that documents or applications you spend more time on will be given higher priority in the response.\n</Callout>\n\nIf Pieces has access to calendar apps, the column or grid format might not be easily understood by AI, which can lead to confusing responses. You might get better results by adding your calendar apps to the list of disabled sources.\n\nUse some of these time-based example prompts to ask Pieces Copilot to provide accurate, relevant answers summarizing recent activities.\n\n<Steps>\n  <Step title=\"Prompt #1\">\n    “What was I working on yesterday?”\n  </Step>\n\n  <Step title=\"Prompt #2\">\n    “Give me a list of all the GitHub issues I was looking at yesterday in the Mustafar project.”\n  </Step>\n\n  <Step title=\"Prompt #3\">\n    “Summarize all the documents I was editing yesterday in Chrome and give me back a list of 5 bullet points that lists my main activities.”\n  </Step>\n</Steps>\n\n## Get Next Steps\n\nPieces can detect any upcoming activities, such as tasks in a task management tool, emails in your inbox, or discussions around future work in chat tools.\n\nYou can then ask Pieces to summarize these to give you details on what your next priorities are.\n\n<Steps>\n  <Step title=\"Prompt #1\">\n    “What is next on my agenda?”\n  </Step>\n\n  <Step title=\"Prompt #2\">\n    “What are the tasks Luke asked me to look at?”\n  </Step>\n\n  <Step title=\"Prompt #3\">\n    “What tasks are still open in my to-do app?”\n  </Step>\n</Steps>\n\n## Get Project History\n\nAs you work on multiple activities for a project, Pieces is able to piece together memories by capturing relevant context from multiple applications.\n\nThis allows you to prompt asking for information about a project and get a response that reasons over all these memories.\n\n<Steps>\n  <Step title=\"Prompt #1\">\n    “Summarize the carbonite freezing project and give me links to relevant documents.”\n  </Step>\n\n  <Step title=\"Prompt #2\">\n    “Who are the main contributors to project R2, and what are their email addresses?”\n  </Step>\n\n  <Step title=\"Prompt #3\">\n    “Give me an overview of the work done so far on D2, and what are the next steps?”\n  </Step>\n</Steps>\n\n## Get a Summary of Project Status\n\nIf you are in a role where you are often receiving project updates and summaries, it can be hard to stay on top of them all.\n\nPieces can read these updates with you, and provide summaries or roll-ups as needed.\n\n<Steps>\n  <Step title=\"Prompt #1\">\n    “Give me a summary of all the status updates I received last week from Han, Cassian, and Shin.”\n  </Step>\n\n  <Step title=\"Prompt #2\">\n    “Write me a summary report on the status of the Phasma testing.”\n  </Step>\n\n  <Step title=\"Prompt #3\">\n    “Send me a list of all the Jira tickets mentioned in the Geonosis status updates channel in Teams.”\n  </Step>\n</Steps>\n\n## Summarize Any Text Resource\n\nSometimes we come across different sources of information that might conflict or vary in detail. This could include anything from news articles to recommendations for code frameworks, cars, and more.\n\nTo help make sense of this and get a clearer understanding, Pieces can read all the sources with you, allowing you to think through these memories.\n\n<Steps>\n  <Step title=\"Prompt #1\">\n    “Summarize the 3 articles I was just reading about the recent stock market trends around AI.\n  </Step>\n\n  <Step title=\"Prompt #2\">\n    “I was just reading documentation on the best JavaScript framework to use. Provide me a detailed summary containing a list of all the frameworks, their pros and cons, and the maturity of each framework.”\n  </Step>\n\n  <Step title=\"Prompt #3\">\n    “Based on the reviews of different SUVs I was just looking at in Edge, which one would be the best for a family of 3? I care most about the lowest environmental impact, and the best crash safety.”\n  </Step>\n</Steps>",
    "lastModified": "2025-06-04T17:24:58.606Z",
    "filePath": "quick-guides/quick-guides/ltm-prompting/examples.md"
  },
  "/docs/quick-guides/ltm-prompting/tips": {
    "slug": "/docs/quick-guides/ltm-prompting/tips",
    "metadata": {
      "title": "General Long-Term Memory Prompting Tips",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## In This Guide\n\nGenerative AI can only be *so* smart, but you can extract a lot more usefulness out of LLMs—especially when they’re served through Pieces, with the power of LTM-2—by adjusting your prompts.\n\nThis prompt guide will cover some of the more basic, but still quite important, of prompting so that you maximize the potential of LTM-enhanced in your workflow.\n\n## Prompt by Keyword\n\nWhen Pieces searches its Long-Term Memory, it is more likely to find relevant context when you use unique expressions that are relevant to the memories you are interested in.\n\nFor example, if you want to use memories for a project called \"Gonk,\" a prompt like \"What is the status of project Gonk?\" will help Pieces focus only on the memories related to that project.\n\nIf you simply ask, \"What is the status of my project?\" then Pieces might consider multiple projects you have worked on, in which case you might get a mixed bag of results.\n\n<Callout type=\"tip\">\n  If you can't recall keywords like project, ticket, or package names, Pieces can help! Ask, \"Give me the titles of all the project documents I've been working on,\" and you can specify a time range like \"last month.\" This helps find keywords for more specific prompts.\n</Callout>\n\n## Prompt by Time Range\n\nPieces stores up to 9 months of memories. To help narrow down the memories, you can include a time range in your prompt. This allows Pieces to focus on exactly what you need.\n\nFor example, you can ask, “What was I doing last week?” or “What were the plans I received from Scarif in December?”\n\n## Prompt by Source Application\n\nWhen Pieces captures memories, it also captures the application name that the memories came from—this allows you to ask specific questions related to the source application.\n\nTry using a prompt like “Summarize my discussions with Rey Skywalker in Teams” to separate conversations with a colleague in Teams from those in emails or document comments.\n\n## Mix Prompt Types\n\nThe more context Pieces has, the more it can narrow down to the right memories to use when responding to your prompts.\n\nYou can mix and match keywords, time ranges, and applications to get very accurate responses.\n\nAsk, “What is the URL for the Project Darklighter document I discussed in Teams with Biggs last Thursday?” This helps distinguish it from documents shared by others, in different apps, or at other times.\n\n<Callout type=\"tip\">\n  Prompt mixing is extremely useful—not only are you narrowing down the search by providing specific keywords, but you improve the accuracy of that search by also excluding other ranges or species of data.\n</Callout>\n\n## Use the Source and Time Range Filters\n\nIf you know the source application or time range you want to access in your prompts, a quick and accurate way to use them is through the filters.\n\nThis lets you filter by source applications or a time range using a set of predefined ranges or a custom picker. This method can be more accurate than using prompts because there are many ways to express time concepts.\n\n## Start New Copilot Chats When you Change Topic\n\nRule of thumb—if you change topic, start a new copilot chat.\n\nWhen you are in a Pieces Copilot chat, Pieces will extract the relevant memory context for the questions you ask, and use this across the entire conversation.\n\nIf you change topics, then the memories available in the chat may not be relevant, so you may get better results by starting a new chat.",
    "lastModified": "2025-06-04T17:24:58.612Z",
    "filePath": "quick-guides/quick-guides/ltm-prompting/tips.md"
  },
  "/docs/quick-guides/ltm-prompting/workstream-activity": {
    "slug": "/docs/quick-guides/ltm-prompting/workstream-activity",
    "metadata": {
      "title": "Use Cases for the Pieces Workstream Activity View",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\nThe [Pieces Workstream Activity view](https://docs.pieces.app/products/quick-guides/ltm-prompting/workstream-activity) provides summaries of all activities captured in 20 minute blocks, called *LTM Roll-Ups.*\n\nYou can use these to find memories that you can then query, or to even track new memories that you can share with colleagues to provide relevant context to them.\n\nWorkstream Activities can be filtered by keyword to help you find activities related to a project, concept, bug in your code, and more. Once filtered, you can use these results as context for your chats.\n\n## In This Guide\n\nDiscover real-life use cases for the Workstream Activity view, and use it capture and filter entire project contexts, generate process documentation, and create detailed standup summaries using LTM roll-ups.\n\nPractical examples demonstrate how to turn these activity ‘snapshots’ into shareable references, from markdown exports to live discussions in Pieces Copilot chats, or search through them with various filters.\n\n<Callout type=\"tip\">\n  Workstream Activities can be exported as markdown or raw text, then sent to another Pieces user, who can then add these as context to their own Pieces Copilot chat.\n</Callout>\n\n## Share All Context for a Project\n\nIf your project has a unique name, or other identifier that is easy to query for, then you can filter all Workstream Activities for that keyword—this will then give a historical overview of your activities with that project.\n\nOnce you have this, you can either open it all in a Pieces Copilot chat and have the LLM create a detailed summary report to share with someone else, or you can export and share the activities directly, either as markdown files, or as raw text.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/quick_guides/long_term_memory_prompting_guide/use_cases_for_the_pieces_workstream_activity_view/share_context_for_project.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Create a Summary To Document a Process\n\nWhen some folks are documenting a process, they often create a video which is shared with colleagues.\n\nThe problem with this approach is that it misses important context, such as links or text from documentation, which must be shared separately and is difficult for the recipient to search.\n\nBy using Pieces, you can go through a process by checking documents, chats, emails, and code—then, you can create a new Workstream Activity for the time you spent.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/quick_guides/long_term_memory_prompting_guide/use_cases_for_the_pieces_workstream_activity_view/generating_summary_process.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThis summary can be shared with your colleagues and will include text details like links to the documents you read, information about people involved in the conversations, links to code, and more.\n\n## Turn Summaries into PRs and Reports\n\nPieces can help you create a summary of completed work based on details like tickets. For instance, if you're a developer and need to participate in an asynchronous daily standup, you can use Pieces to create a summary of tickets resolved—deep-links included.\n\nYou can do this by going through your ticket system and reviewing all the tickets you worked on the previous day.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/quick_guides/long_term_memory_prompting_guide/use_cases_for_the_pieces_workstream_activity_view/all_github_issues_looked_at.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nThen, create a new Workstream Activity for the time you spent reviewing, which will include deep links to the tickets. You can use this raw content for your daily standup or ask the Pieces Copilot to summarize it in a more suitable format.",
    "lastModified": "2025-06-04T17:24:58.616Z",
    "filePath": "quick-guides/quick-guides/ltm-prompting/workstream-activity.md"
  },
  "/docs/quick-guides/ltm-prompting": {
    "slug": "/docs/quick-guides/ltm-prompting",
    "metadata": {
      "title": "Long-Term Memory Prompting Guide",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Why This Matters\n\nOver the past few years, LLM users have been figuring out how to prompt different LLMs to get the responses they want.\n\nThey've learned tricks like prompt chaining or the simple fix of adding 'Let’s think about this' for zero-shot chain-of-thought prompting.\n\nWith Pieces Long-Term Memory, *we’re adding more dimensions* to your prompts.\n\nYou can query across the captured memories using keywords that connect your prompts to activities you were doing, as well as prompting based off of the application you were using, or a time period, mixing and matching these as needed.\n\nThese guides introduce some of the ways you can query the databased of stored LTM context using the Pieces Copilot in the Pieces Desktop App, or any of the applications you use that have a Pieces plugin or extension.\n\n<Callout type=\"tip\">\n  When using these prompts, ensure you have LTM-2 turned on, both the [LTM](https://docs.pieces.app/products/core-dependencies/pieces-os/quick-menu#ltm-2-engine), and the <a target=\"_blank\" href=\"https://docs.pieces.app/products/desktop/copilot/integration#ltm-context-toggle\">LTM context source</a> in the copilot chat.\n</Callout>\n\n## Guide Links\n\nThese guides introduce some of the ways you can query the databased of stored LTM context using the Pieces Copilot in the Pieces Desktop App, or any of the applications you use that have a Pieces plugin or extension.\n\nClick one of the cards below to jump to that guide.\n\n<CardGroup cols={2}>\n  <Card title=\"Use Cases and Example Prompts\" href=\"https://docs.pieces.app/products/quick-guides/ltm-prompting/examples\">\n    Examples of the typical use cases we see for Pieces LTM with the kinds of prompts users ask.\n  </Card>\n\n  <Card title=\"Use Cases for the Pieces Workstream Activity View\" href=\"https://docs.pieces.app/products/quick-guides/ltm-prompting/workstream-activity\">\n    A selection of popular use cases for the new Pieces Workstream Activity view.\n  </Card>\n</CardGroup>\n\n<Card title=\"General Long-Term Memory Prompting Tips\" href=\"https://docs.pieces.app/products/quick-guides/ltm-prompting/tips\">\n  Some general prompting tips to help you get the most out of Pieces.\n</Card>",
    "lastModified": "2025-06-04T17:24:58.599Z",
    "filePath": "quick-guides/quick-guides/ltm-prompting.md"
  },
  "/docs/quick-guides/overview": {
    "slug": "/docs/quick-guides/overview",
    "metadata": {
      "title": "Introduction to Pieces Quick Guides",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/quick_guides/quick-guides.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Why Use Quick Guides?\n\nPieces Quick Guides help you quickly understand and effectively utilize powerful features like the Long-Term (LTM-2) Memory Engine and Pieces Copilot.\n\nCapture context from your browser, summarize meetings with coworkers, find closed GitHub Issues from last month that were just mentioned in that Slack channel—*and that’s just the beginning.*\n\nYou can get a lot done with Pieces, and we want to help you get started!\n\nVisit the links below to read Pieces Quick Guides on various topics, such as using LTM context, adding folders as additional context from different platforms, prompting, and more.\n\n***\n\n<CardGroup cols={2}>\n  <Card title=\"Using Long-Term Memory Context\" href=\"https://docs.pieces.app/products/quick-guides/ltm-context\">\n    Capture and recall information from webpages with LTM to quickly retrieve important details.\n  </Card>\n\n  <Card title=\"Using Pieces Copilot with Context Guide\" href=\"https://docs.pieces.app/products/quick-guides/copilot-with-context\">\n    Reduce context switching and use Pieces Copilot to turn issues and tasks from your IDE or browser into actionable strategies.\n  </Card>\n\n  <Card title=\"Long-Term Memory Prompting\" href=\"https://docs.pieces.app/products/quick-guides/ltm-prompting\">\n    Unlock the potential of advanced prompting and access context from past activities through search filters for better results.\n  </Card>\n\n  <Card title=\"General Long-Term Memory Prompting Tips\" href=\"https://docs.pieces.app/products/quick-guides/ltm-prompting/tips\">\n    Learn strategies to retrieve context, URLs, and detailed workflow memories accurately.\n  </Card>\n\n  <Card title=\"Workstream Activity View\" href=\"https://docs.pieces.app/products/quick-guides/ltm-prompting/workstream-activity\">\n    Use the Pieces Workstream Activity View to capture, filter, and share workflow memories.\n  </Card>\n\n  <Card title=\"Use Cases and Example Prompts\" href=\"https://docs.pieces.app/products/quick-guides/ltm-prompting/examples\">\n    Browse typical user scenarios showcasing the versatility of LTM + Pieces Copilot in real-time.\n  </Card>\n</CardGroup>\n\n***\n\n## Ready to Explore?\n\nJump into any guide above by clicking its card and transform your daily development routine with Pieces for Developers! 🌟\n\n## Additional Resources\n\nIf you’re looking for more specific information, you can read comprehensive Pieces for Developers documentation on the [Pieces Desktop App](http://docs.pieces.app/products/desktop), the [Core Dependencies](http://docs.pieces.app/products/core-dependencies)—[PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os) and [Ollama](https://docs.pieces.app/products/core-dependencies/ollama)—or any of our [plugins and extensions.](https://docs.pieces.app/products/extensions-plugins/visual-studio-code)\n\nIf you need help with a bug, [visit our Support page](https://docs.pieces.app/products/support) for links to our GitHub, links to our social media outlets, and for contacting our engineers.",
    "lastModified": "2025-06-04T17:24:58.620Z",
    "filePath": "quick-guides/quick-guides/overview.md"
  },
  "/docs/quick-guides": {
    "slug": "/docs/quick-guides",
    "metadata": {
      "title": "Quick Guides",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "# Quick Guides\n\nWelcome to the Pieces Quick Guides! These guides will help you get up and running quickly with key features of Pieces.\n\n## Available Guides\n\n- **[Overview](/docs/quick-guides/overview)** - Get started with quick guides\n- **[Using Long-Term Memory Context](/docs/quick-guides/ltm-context)** - Learn how to leverage LTM-2\n- **[Using Pieces Copilot with Context](/docs/quick-guides/copilot-with-context)** - Maximize your AI assistant\n- **[Long-Term Memory Prompting Guide](/docs/quick-guides/ltm-prompting)** - Master prompting techniques\n\nChoose a guide above to get started!",
    "lastModified": "2025-06-04T17:24:58.580Z",
    "filePath": "quick-guides.md"
  },
  "/docs/raycast": {
    "slug": "/docs/raycast",
    "metadata": {
      "title": "Raycast Extension",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1729000712202/830de9f7-cebb-4661-b893-d1816cf2fc13.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n<Callout type=\"alert\">\n  V2 Documentation for the Pieces extension for the Raycast productivity tool is under construction.\n\n  In the meantime, you can look at the V1 documentation for the Pieces for Raycast Extension below.\\`\n</Callout>\n\n***\n\n## Pieces for Raycast Extension\n\nThe Pieces for Developers Raycast Extension provides powerful features that allow you to streamline your workflow and boost productivity.\n\nWith just a few keystrokes, you can capture, search, and manage code snippets from anywhere on your desktop—*without switching context.*\n\n### Prerequisites\n\n* **PiecesOS** must be installed and running\n\n* <a target=\"_blank\" href=\"https://www.raycast.com\">Raycast</a> must be installed on your Mac\n\n## PiecesOS Installation Guide\n\nBefore using the Pieces for Raycast Extension, you must install PiecesOS on your macOS device.\n\nPiecesOS powers all of Pieces' core functionalities, including snippet saving, enrichment, and integration handling.\n\n<Callout type=\"tip\">\n  Pieces For Developers captures *no identifiable user data.* Our local-only architecture means your data never has to leave your device.\n</Callout>\n\n[Download the standalone PiecesOS file](https://docs.pieces.app/products/core-dependencies/pieces-os/manual-installation#macos) for your macOS system’s ARM or Intel-based architecture to start the installation process.\n\n*Your device must be updated to macOS 13.0 (Ventura) or higher.*\n\n1. Download the correct PiecesOS file for your system’s architecture.\n\n2. From your **Downloads** folder, double-click the installed PiecesOS file to open it.\n\n3. Drag PiecesOS into the application folder if prompted, then open PiecesOS.\n\n### Configuring Permissions\n\nTwo permission prompts will pop up on your screen when installing PiecesOS.\n\n```markdown\nPiecesOS is an app downloaded from the internet. Are you sure you want to open it?\n```\n\nClick `Open` to continue with the installation.\n\nThen, you’ll see a second permissions pop-up message:\n\n```markdown\nPiecesOS is requesting to bypass the system private window picker and directly access your screen and audio. This will allow PiecesOS to record your screen and system audio, including personal or sensitive information that may be visible or audible.\n```\n\nClick `Allow`.\n\nThese permissions are required for [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os) to power the [Long-Term Memory Engine (LTM-2)](https://docs.pieces.app/products/core-dependencies/pieces-os#ltm-2).\n\nPiecesOS will automatically open in your toolbar and pop up a *Notification preferences modal* in the upper right corner of your screen.\n\n### Enabling the LTM-2 Engine\n\nTo do this, open the PiecesOS Quick Menu and click `Enable Long-Term Memory Engine`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/misc_fragments_media/macos_piecesOS_toolbar.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Install the Pieces for Raycast Extension\n\nIf this is your first time installing a Raycast extension, refer to [Raycast’s extension install guide](https://developers.raycast.com/basics/install-an-extension).\n\nTo install the Pieces Extension:\n\n1. Open **Raycast**\n\n2. Navigate to the **Raycast Store**\n\n3. Search for *“Pieces for Raycast”*\n\n4. Click `Install`\n\n### Launch and Use the Extension\n\nOnce the extension is installed on your device:\n\n1. Open Raycast\n\n2. Search for the command: `Search Saved Snippets`\n\n3. Use this command to browse and reuse your saved code\n\n<Callout type=\"tip\">\n  You can use a custom keyboard shortcut to quickly launch Raycast. See the [**Raycast Hotkey Manual** to learn more.](https://manual.raycast.com/hotkey)\n</Callout>\n\n## Features\n\nThe Raycast Extension lets you capture code snippets and other developer materials from multiple sources, reuse them on the fly, and manage your account without switching applications.\n\n## Pieces Drive\n\n[Pieces Drive](https://docs.pieces.app/products/meet-pieces/fundamentals#pieces-drive) is your personal, intelligent snippet library—automatically curated and enriched as you work.\n\nIn the Raycast Extension, Pieces Drive serves as the backend engine that stores, indexes, and organizes the content you capture through various commands.\n\nBy integrating tightly with [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os), Pieces Drive ensures your saved materials are enriched with metadata like language, source, and context. This makes your content instantly searchable and more valuable over time as your snippet collection grows.\n\n### Search Saved Materials\n\nQuickly search across all of your saved code snippets using Raycast’s minimal interface.\n\nThis command surfaces results enriched with metadata such as title, language, tags, and source (e.g., clipboard, browser, editor). It’s a fast way to rediscover useful context you’ve captured in the past, without digging through files, emails, or browser tabs.\n\n<Image src=\"https://old.docs.pieces.app/assets/raycast/search_snippets.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nUse this feature when:\n\n* You want to reuse a snippet you saved earlier\n\n* You don’t remember exactly where you used it but recall its purpose\n\n* You want to avoid rewriting boilerplate or repeatedly googling common code\n\n### Save Clipboard History\n\nThis command displays a timeline of your clipboard history—enriched with metadata and usage context.\n\nYou can scroll through recently copied content and selectively save high-value items as persistent snippets. Each saved snippet includes its origin, content type, and timestamp, helping you retain the most relevant fragments of your workday.\n\n<Image src=\"https://old.docs.pieces.app/assets/raycast/save_clipboard_history.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Save Clipboard to Pieces\n\nYou can quickly save the current content in your clipboard to Pieces.\n\nThis command is perfect for moments when you quickly copy a block of code, a command, or a snippet of text and want to ensure its preservation.\n\n<Image src=\"https://old.docs.pieces.app/assets/raycast/save_clipboard.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Save Browser History to Pieces\n\nThis command allows you to surface code snippets that you recently interacted with in your browser, such as on Stack Overflow, GitHub, or blog posts.\n\nPieces identifies these snippets in your browser activity and gives you the option to save them with proper enrichment and metadata.\n\n<Image src=\"https://old.docs.pieces.app/assets/raycast/save_browser_history.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Save Finder Selection\n\nSelect one or more files in macOS Finder and save them to Pieces with a single command.\n\nFiles are stored as artifacts in your Pieces Library and enriched with metadata like filename, extension, and path.\n\n<Image src=\"https://old.docs.pieces.app/assets/raycast/save_finder_selection.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Save Selection in Any App\n\nHighlight any text in the currently active (frontmost) application—like VS Code, Terminal, Safari, or Slack—and instantly save it to Pieces.\n\nThis command enables frictionless, cross-app snippet capture without copy/paste.\n\n<Image src=\"https://old.docs.pieces.app/assets/raycast/save_frontmost_selection.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Account Access\n\nConnecting your Pieces account allows you to unlock the full potential of the ecosystem, including cloud sync, cross-device access, and personalized context enrichment.\n\nFrom within Raycast, you can quickly authenticate or sign out of your account to manage how your data is stored and accessed.\n\n<Callout type=\"tip\">\n  While Pieces can be used fully offline, logging in enables advanced features such as secure backup, account-linked snippet history, and enhanced AI-powered enrichment.\n</Callout>\n\n### Sign-in to Pieces\n\nThis command securely authenticates your Pieces account from within Raycast, enabling cloud sync, cross-device access, and personalization features.\n\nOnce signed in, your saved snippets are backed up and available wherever Pieces is installed.\n\n<Image src=\"https://old.docs.pieces.app/assets/raycast/sign_in_to_pieces.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Sign out of Pieces\n\nLog out of your Pieces account from Raycast.\n\n<Image src=\"https://old.docs.pieces.app/assets/raycast/signout.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  This is useful for switching accounts, temporarily disabling cloud syncing, or handing off a machine to another developer.\n</Callout>\n\n## Configuration\n\nWhile most of the configuration happens automatically, here are some helpful notes:\n\n* **PiecesOS must be running** for the Raycast Extension to function.\n\n* If you’re not signed in, use the `Sign into Pieces` command to authenticate.\n\n* Advanced features like auto-enrichment and snippet metadata rely on PiecesOS settings, which can be adjusted via the [Pieces Desktop App](https://docs.pieces.app/products/desktop/configuration) or the [PiecesOS Toolbar.](https://docs.pieces.app/products/core-dependencies/pieces-os/quick-menu)\n\n## Troubleshooting\n\nUse this section to diagnose problems, follow step-by-step fixes, and understand when to escalate an issue to the support team.\n\nPieces for Developers is built with resilience, but we know bugs can happen, and we’re here to help when they do.\n\n### Node.js Installation Screen Appears\n\nWhen you first use a Pieces command in Raycast, you may see a prompt to install Node.js. In some cases, this installation might fail or not complete.\n\n<Steps>\n  <Step title=\"Initial Attempt\">\n    Follow the on-screen prompts to install Node.js.\n  </Step>\n\n  <Step title=\"If Installation Fails\">\n    Fully close Raycast, then reopen Raycast and try the command again.\n  </Step>\n\n  <Step title=\"If the Issue Persists\">\n    Visit our [support page](https://docs.pieces.app/products/support) for help.\n  </Step>\n</Steps>\n\n## Data Privacy & Security\n\nAll data captured by the Raycast Extension is saved locally by default and never shared externally unless you explicitly enable cloud sync.\n\nYour clipboard contents, browser-captured snippets, and Finder selections are handled securely through PiecesOS.\n\nLearn more in our [Privacy Policy and Security Documentation.](https://docs.pieces.app/products/privacy-security-your-data)\n\n<on-device-storage />",
    "lastModified": "2025-06-04T17:24:58.623Z",
    "filePath": "raycast.md"
  },
  "/docs/support": {
    "slug": "/docs/support",
    "metadata": {
      "title": "Support",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734383533120/db6a6ede-80b3-43f2-95de-2f705b926c42.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n<Card title=\"We’ve been given an award!\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1740434022759/22bf29e6-55dd-4480-9f04-832989db50e2.png\">\n  Pieces for Developers was recently awarded the ‘Best Support’ badge for Fall of 2024 by G2. <a target=\"_blank\" href=\"https://www.g2.com/products/pieces-for-developers/reviews?utm_source=rewards-badge\">Read more here.</a>\n</Card>\n\n***\n\n## Get Support or Submit Feedback\n\nWe've got you covered if you’re experiencing an issue or have feedback for the Pieces team.\n\n## Live Support with Pieces\n\nWe want to ensure that your experience with PiecesOS, the Pieces Desktop App, and any of our IDE or browser integrations is as smooth and seamless as possible—and part of that is speaking with as many users as possible so we can continue iterating and improving on Pieces products.\n\nIf you need help getting everything up and running, feel free to book a call with our Founders & Engineering Leaders via <a target=\"_blank\" href=\"https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr\">our support calendar.</a>\n\n## Open a GitHub Issue<a target=\"_blank\" href=\"https://docs.pieces.app/extensions-plugins/sublime#get-support-or-share-feedback\">**​**</a>\n\nYou can open GitHub issues for PiecesOS, the Pieces Desktop App, or any other Pieces plugin or extension by <a target=\"_blank\" href=\"https://github.com/pieces-app/support/issues\">opening an issue in our GitHub repository.</a>\n\nIf you would prefer not to use GitHub, you can still <a target=\"_blank\" href=\"https://getpieces.typeform.com/to/mCjBSIjF#page=docs-support\">leave feedback or report a bug here.</a>\n\n## Finding your Logs\n\nIf opening a GitHub issue, attaching your logs helps developers on the Pieces team better identify issues so we can get you up and running quicker, as well as prevent more bugs in the future.\n\nAt any time, you can find your up-to-date log files can find your log files in the following locations, depending on your platform:\n\n* macOS: `/Users/<username>/Library/com.pieces.os/`\n\n* Windows: `C:/Users/<username>/Documents/com.pieces.os/`\n\n* Linux: `/Users/<username>/Documents/com.pieces.os/`\n\n<Callout type=\"tip\">\n  Replace `username` with your system username.\n</Callout>\n\n## Join our Discord Community\n\nWe have a strong community presence on <a target=\"_blank\" href=\"https://discord.com/invite/getpieces\">our Discord channel,</a> so feel free to reach out to other users or members of the Pieces for Developers team.\n\nYou can also catch up on product updates, speak with our power users, or participate in weekly Community Events.\n\n## Join Community Discussions\n\nWe’re active within our community and are always looking for feedback and suggestions from our power users.\n\nIf this is you, feel free to <a target=\"_blank\" href=\"https://github.com/pieces-app/support/discussions\">create or read through existing discussions on our GitHub</a>—that way you can inform our product roadmap and contribute feature requests.",
    "lastModified": "2025-06-04T17:24:58.625Z",
    "filePath": "support.md"
  },
  "/docs/web-extension/configuration": {
    "slug": "/docs/web-extension/configuration",
    "metadata": {
      "title": "Configuration",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Supported LLMs\n\nWe regularly update and configure our plugins and extensions to work with the latest LLMs.\n\nThe Pieces Web Extension currently [supports a range of cloud-hosted and local LLMs](https://docs.pieces.app/products/large-language-models) from your favorite providers, such as Anthropic, Google, OpenAI, Microsoft, and more.\n\n[Read documentation on switching your Pieces Copilot Runtime (LLM)](https://docs.pieces.app/products/web-extension/copilot/llm-settings#how-to-configure-your-llm-runtime) utilized by the Pieces Web Extension.\n\n## Opening Pieces Settings\n\nTo open the settings within the Pieces Web Extension, follow these steps:\n\n<Steps>\n  <Step title=\"Open the Pieces Web Extension\">\n    From your browser’s extensions list, select the `Pieces icon`.\n  </Step>\n\n  <Step title=\"Click the Three Bars\">\n    In the top-right of the extension, select the `sandwich` icon.\n  </Step>\n\n  <Step title=\"Open the Settings\">\n    After opening the horizontal bar menu, select the `Settings` button. This will open the available settings for the Pieces Web Extension.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/configuration/opening_settings.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## Settings Overview\n\nBelow is a breakdown of each adjustable setting (preferences, behaviors, views, etc.) available in the Pieces Web Extension, updated according to the latest features.\n\n### Account & Cloud Integrations (*Beta*)\n\nDisplays your Pieces account details and cloud‑integration status.\n\n* **Profile & Early Access**: Your name, email, GitHub link, and Early Access enrollment\n\n* **Personal Cloud**: Connection status, last sync time, and custom domain (e.g., `nolanworksat.pieces.cloud`)\n\n### Backup & Restore Data\n\nTrigger a manual backup of your local data to the cloud or restore from a snapshot.\n\n### Copilot LLM Runtime\n\nChoose which language model powers Copilot in the extension (e.g. GPT‑4o Mini, GPT‑4o).\n\n<Callout type=\"tip\">\n  You can switch between local and cloud models here using the `cloud` and `desktop` icons.\n</Callout>\n\n### Accent Color\n\nSelect the UI accent color used throughout the extension (Blue, Green, Purple, etc.).\n\n### Use Long‑Term Memory (LTM-2) Context by Default\n\nWhen checked, your saved long‑term memory is automatically included in every Pieces Copilot query without needing to re-enable LTM chat-by-chat.\n\n### Delete All Copilot Chats…\n\nClears all saved Pieces Copilot chat history inside the Pieces Web Extension.\n\n<Callout type=\"alert\">\n  This action is *not reversible.* Clearing your chat history is a permanent action.\n</Callout>\n\n### Saved Material Auto‑Enrichment\n\nChoose how much automatic enrichment occurs when saving materials. This can be beneficial for speed and performance on older systems, or if you’re utilizing local-only LLMs.\n\n* **None**: No metadata\n\n* **Low**: Basic metadata\n\n* **Medium**: Intermediate metadata (3–6 data points)\n\n* **High**: Extensive metadata (6+ data points)\n\n### ML Processing\n\nChoose how Pieces utilizes cloud and local LLMs to process context and power other Pieces features.\n\n* **Processing Mode**: Cloud‑based / Local (on‑device) / Blended\n\n* **Long‑Term Memory Engine**: On/off toggle and engine version (e.g., LTM‑2)\n\n### Long‑Term Memory Source Control\n\nWhen generating context, choose which sources (chats, visited pages, etc.) the LTM-2 engine draws context from.\n\nThis can also be done within the PiecesOS Quick Menu in the `Long-Term Memory Engine Access Control` panel.\n\n### Clear Long‑Term Memory Engine Data…\n\nDelete persisted memory captured by the LTM engine for a specified time range.\n\n### Enable Pieces Buttons by Default\n\nAutomatically shows the floating Pieces button on every webpage, so your extension is always running.\n\n### Enable Pieces Buttons for This Site\n\nToggle the Pieces toolbar on or off for just the current domain.\n\n### Button Placement\n\nPosition the floating action button (Bottom Left, Bottom Right, etc.).\n\n### Button Color\n\nUse the action button's light or dark theme to match your browser.\n\n### Minimum Number of Characters for a Code Block\n\nSet the minimum character count before the extension recognizes a code block. This is helpful for blacklisting short, one-line code elements, like terminal commands.\n\n### Code Block Actions\n\nConfigure which actions (copy, save snippet, run tests, etc.) appear on detected code blocks.\n\n### Number of Recent Websites to Save Snippets For\n\nLimit how many domains Pieces will track for snippet‑saving history.\n\n### Append Recent Websites\n\nIf checked, newly visited domains are automatically added to your “recent websites” list.\n\n### Save Visited Websites for Context\n\nInclude the page’s metadata and content whenever you save a snippet. These websites can then be referenced and added as context to future Pieces Copilot chats.\n\n### Telemetry & Diagnostics\n\nOpt in or out of sharing anonymous usage metrics and crash reports.\n\n### Documentation\n\nQuick link to the official extension documentation.\n\n### Submit Feedback/Issues\n\nOpen the feedback form or GitHub issues page for bugs and feature requests.\n\n### PiecesOS Version\n\nShows the version of your local PiecesOS service (e.g. 11.3.1).\n\n### Check for PiecesOS Updates\n\nManually check for updates to your local PiecesOS installation.\n\n### PiecesOS Port\n\nDisplays the port (default: 39300) on which your local PiecesOS server is actively listening & posting requests to.\n\n***\n\nFor additional support resources, check out our [troubleshooting guide.](https://docs.pieces.app/products/web-extension/troubleshooting)",
    "lastModified": "2025-06-04T17:24:58.634Z",
    "filePath": "web-extension/configuration.md"
  },
  "/docs/web-extension/copilot/chat": {
    "slug": "/docs/web-extension/copilot/chat",
    "metadata": {
      "title": "Generative AI Conversations",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Accessing the Pieces Copilot Chat in the Web Extension\n\nThere are several ways to open up the Pieces Copilot chat window in your browser.\n\n### via Right-Click Context Menu\n\nThe primary method of accessing Pieces Copilot, Pieces Drive, and other views is from the right-click menu.\n\n<Steps>\n  <Step title=\"Highlight Any Section of Text\">\n    When you find a code snippet or an important text block, highlight it.\n  </Step>\n\n  <Step title=\"Right-Click and Select Option\">\n    Right-click on your selection, hover over `Pieces For Developers`, and select `Ask Copilot About…`\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_copilot/chat/ask_pieces_right_click.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n    This initiates a Pieces Copilot chat using the active code snippet as pre-loaded context for the conversation.\n  </Step>\n</Steps>\n\n### via AI Quick Actions\n\nUnder any code block, Pieces adds AI Quick Actions that let you quickly open the Copilot Chat window with the context of the code block.\n\nClicking the `Ask Copilot` Quick Action will start a Copilot Chat with the code within the code snippet as context.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_copilot/chat/ask_copilot_QA.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### via the Sidebar\n\nYou can open up the dedicated Pieces Copilot view to locate previous chats or start new ones without context right from the sidebar.\n\n<Steps>\n  <Step title=\"Open the Pieces Web Extension\">\n    Select the `Pieces` icon in the extensions within your browser.\n  </Step>\n\n  <Step title=\"Switch to Pieces Copilot\">\n    If it's not enabled by default, click the dropdown in the top left and choose Pieces Copilot to access the Copilot Chats.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_copilot/chat/hovering_pieces_copilot.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## Starting Copilot Chats with Context\n\nYou can add context to a chat by adding `Files`**,** `Folders`**,** `Snippets`**,** `Websites`**,** and `Messages`**.**\n\nThis greatly boosts the number of generative AI responses you receive that will actually benefit you. It can provide *hyper-specific* responses because it’s contextually aware of your workspace.\n\nTo do this, you can select the `Circled Plus` Icon in the bottom-left corner of your Copilot Chat window, which is openable from the extensions section of your browser.\n\nClick the `Circled Plus` icon**,** then add whatever context items you need.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_copilot/chat/add_context_clicked.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Adding Code Snippets\n\nYou can paste code snippets as a code block in any Copilot Chat by clicking the `{ }` icon in the add context window and then pasting your code.\n\nThis helps add code that isn't currently in the active file as context, or for making comparisons and suggestions.\n\nYou can also locate a code snippet, i.e., on StackOverflow, and select the `Ask Copilot` that appears below it.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_copilot/chat/add_context_snippet.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Extracting Code from Screenshots\n\nYou can extract code from screenshots directly in the Copilot chat menu by selecting `Extract Code from Screenshot`.\n\nChoose the screenshot from your **Finder** (macOS) or **File Explorer** (Windows/Linux) menu, and confirm your selection.\n\nPieces Copilot will scan the screenshot and generate the code from the image into the chat. You can then copy it, save it as a snippet, and more.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_copilot/chat/extract_code_screenshot.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## AI Quick Actions\n\nBelow code blocks on websites, you can find a clickable `Ask Copilot` option that will allow you to ask Pieces Copilot directly about the code.\n\nClicking `Ask Copilot` will open the Pieces Copilot sidebar. The code will be explained within that chat, along with its purpose and function.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_copilot/chat/ask_copilot_QA.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Improving Code Consistency & Standardization\n\nThe Pieces Copilot Chat helps you with coding and learning tasks to increase productivity and improve your workflow.\n\nIt achieves this by removing the need for **context-switching** (leaving your window to use generative AI).\n\n### Naming Inconsistencies\n\nSuppose functions across your workspace use inconsistent naming patterns (e.g., `authenticateUser` in `authHandler.go` vs. `retrieveUserProfile` in `userHandler.go`).\n\nIn that case, it is helpful to adopt a standardized naming convention for better readability and maintainability. You can find suggestions for such conventions in snippets available on the web, like this:\n\n```c\n// authHandler.go\nfunc authenticateUser(ctx context.Context, credentials Credentials) (User, error) {\n    if credentials.Username == \"\" || credentials.Password == \"\" {\n        return User{}, errors.New(\"missing credentials\")\n    }\n}\n```\n\n### Inconsistent Error Handling\n\nIf error-handling strategies differ across web sources (e.g., structured errors in `authService.go` vs. inconsistent handling in `userService.go`), Pieces Copilot can help unify the approach:\n\n```c\n// authService.go\nfunc LoginUser(credentials Credentials) (string, error) {\n    token, err := authenticate(credentials)\n    if err != nil {\n        return \"\", fmt.Errorf(\"login failed: %w\", err)\n    }\n    return token, nil\n}\n```",
    "lastModified": "2025-06-04T17:24:58.645Z",
    "filePath": "web-extension/copilot/chat.md"
  },
  "/docs/web-extension/copilot/llm-settings": {
    "slug": "/docs/web-extension/copilot/llm-settings",
    "metadata": {
      "title": "Switching LLMs",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Available LLMs\n\nWe constantly update and configure our plugins and extensions, like the Pieces for Obsidian Plugin, to <a target=\"_blank\" href=\"https://github.com/pieces-app/support/discussions/121\">work with the latest LLMs</a>.\n\nClick here to see all [54+ local and cloud-hosted models available](https://docs.pieces.app/products/large-language-models) for use with the Pieces for Obsidian Plugin.\n\n## How To Configure Your LLM Runtime\n\nSwitching your LLM model in the Pieces Web Extension is\n\nYou can choose the model that best suits your needs, such as whether you need a model with a large context window for a specific task or series of prompts, or prefer speed over accuracy.\n\nHow to change your LLM:\n\n<Steps>\n  <Step title=\"Open the Copilot Chat View\">\n    Open the Copilot Chat view by clicking the `Pieces Icon` in the extensions section of your browser.\n  </Step>\n\n  <Step title=\"Locate the Active Model\">\n    Find the **Active Model** in the bottom-left corner of the view, where the current model (e.g., *GPT-4o Mini*) is shown.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_copilot/llm_settings/changing_llm.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n\n  <Step title=\"View the Models\">\n    Click on `Change Model` to open the **Manage Copilot Runtime** modal.\n  </Step>\n\n  <Step title=\"Choose your Desired Model\">\n    Browse the list of local and cloud models, and select your preferred model.\n  </Step>\n</Steps>\n\nSwitching between the cloud and desktop icons allows you to browse and select from various available cloud and local models.\n\n<Callout type=\"tip\">\n  Cloud-hosted models offer access to the latest AI capabilities, while on-device models ensure offline functionality, making Pieces Copilot adaptable to your specific workflow and environment.\n</Callout>\n\nOnce you choose a new model, the switch is instant, allowing you to continue working smoothly with the latest model's features without restarting or refreshing anything.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_copilot/llm_settings/changing_llm.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:58.650Z",
    "filePath": "web-extension/copilot/llm-settings.md"
  },
  "/docs/web-extension/copilot": {
    "slug": "/docs/web-extension/copilot",
    "metadata": {
      "title": "Pieces Copilot",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Generative AI Conversations\n\nIf you're unsure how to implement something, stuck on a bug, or need an answer within your workspace, use the Pieces Copilot for context-aware responses to help you move forward.\n\nThe Pieces Web Extension offers several levels of conversation functionality, all fully integrated with Pieces.\n\nYou can enable the [**Long Term Memory Engine (LTM-2)**](https://docs.pieces.app/products/meet-pieces/fundamentals#ltm-2) for complete, streamlined context across your workflow or open a limited context conversation in the browser's view.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_copilot/_MAIN/hover_copy_save.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Adding Conversation Context\n\nThe Pieces Copilot lets you add specific folders or files to the conversation's context window, like files from your current workspace.\n\nYou can add individual external items as context to your chat from within the Pieces Copilot view.\n\n<Callout type=\"info\">\n  This differs from starting a chat using one of the embedded buttons under a code snippet, such as on Stack Overflow (see the image below).\n</Callout>\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_copilot/_MAIN/hovering_ask_copilot_QA.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nTo start a conversation that’s pre-loaded with context, find a code snippet on a website such as Stack Overflow or your favorite code platforms and select the `Ask Copilot` quick action beneath it.\n\n## Selecting Your Pieces Copilot Runtime\n\nYou can choose between [different LLMs directly within the Pieces Web Extension](https://docs.pieces.app/products/web-extension/copilot/llm-settings) by accessing the sidebar and clicking on your preferred model under `Active Model` (e.g., *Claude 3.5 Sonnet*).\n\nOptions range from lightweight models for simple queries to advanced models for detailed analysis, including [local](https://docs.pieces.app/products/large-language-models/local-models) and [cloud-based LLMs](https://docs.pieces.app/products/large-language-models/cloud-models).\n\nThis flexibility lets you customize Pieces Copilot to fit your specific development needs, whether you prioritize speed or accuracy.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_copilot/_MAIN/changing_llm.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nRead more about [what LLMs are available](https://docs.pieces.app/products/large-language-models) with the Pieces Web Extension.\n\n## Pieces Copilot As a Daily Driver\n\nThe Pieces Copilot is a powerful, adaptable tool that grows with you as you use it—*so use it!*\n\n***\n\n<AccordionGroup>\n  <Accordion title=\"Collaborative Sharing Made Easy\">\n    Generate detailed comments and documentation for better team collaboration and also reduce onboarding times, creating a unified coding style across teams.\n  </Accordion>\n\n  <Accordion title=\"Quick Prototyping\">\n    Generate initial implementations and boilerplate code for prototypes and fast-paced projects. Ideal for hackathons, PoCs, and other time-sensitive tasks.\n  </Accordion>\n\n  <Accordion title=\"Skill Enhancement\">\n    Pieces Copilot doubles as a learning tool, helping you explore best practices, new paradigms, and advanced techniques in real-time.\n  </Accordion>\n</AccordionGroup>\n\n***\n\n[Download the Pieces Web Extension Today!](https://docs.pieces.app/products/web-extension/get-started#supported-browsers)",
    "lastModified": "2025-06-04T17:24:58.638Z",
    "filePath": "web-extension/copilot.md"
  },
  "/docs/web-extension/drive/edit-update": {
    "slug": "/docs/web-extension/drive/edit-update",
    "metadata": {
      "title": "Editing",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## How to Edit Saved Materials\n\nEditing saved materials is a great way to make sure that your most-used code or reference text stays as evergreen as possible.\n\nThe more you curate your library of saved code snippets to your specific workflow and use cases, the more useful and “dialed in” your personal repository will be over time\n\nTo modify an existing snippet, follow these steps:\n\n<Steps>\n  <Step title=\"Open the Pieces Sidebar\">\n    Click the `Pieces icon` in the extensions section of your browser.\n  </Step>\n\n  <Step title=\"Locate and Open the Snippet\">\n    Go to the Pieces Drive section of the browser by clicking the dropdown in the top left of the extension and selecting `Pieces Drive`.\n  </Step>\n\n  <Step title=\"Navigate to the Edit Button\">\n    At the bottom of the quick view section, click the `Edit Selected Material` button (pencil icon) to enter editing mode.\n  </Step>\n\n  <Step title=\"Make Your Changes\">\n    Modify the snippet's content, name, or language as needed.\n  </Step>\n\n  <Step title=\"Save Your Edits\">\n    Click the `Save Changes` button on the bottom left of the extension.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/edit_update/editing_view.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\nWithin the editing view, you will also have options to 4 new options:\n\n* `Templatize Selected Material`: This will convert the material into a template for future usage inside your IDEs.\n\n* `Optimize Selected Material for Performance`: This option refactors the code for performance and future usage.\n\n* `Optimize Select Material for Readability`: Selecting this option will improve variable names and add helpful comments to make the code easier to understand in the future.\n\n* `Convert Selected Material to New Language`: This option converts the selected material to a new programming language and allows you to add custom descriptors to help improve the translation.\n\n<Callout type=\"tip\">\n  Your changes are automatically saved in real-time and reflected across the Pieces Sidebar.\n</Callout>\n\n### Material Management Actions\n\nThere are several material management options available when editing code snippets in the Pieces Web Extension:\n\n***\n\n| `Copy Code to Clipboard` | Instantly copy the snippet's content to your clipboard to use it in your notes or projects. |\n| ------------------------ | ------------------------------------------------------------------------------------------- |\n| `Edit Snippet`           | Modifies the snippet's content or metadata.                                                 |\n| `Edit Annotations`       | Adds, updates, or removes annotations to give extra context or notes for the snippet.       |\n| `Share via Pieces`       | Creates a shareable link to the snippet for collaboration or external use.                  |\n\n***\n\n## Actions from the Quick Preview Mode\n\nWhen viewing a snippet in **Quick Preview Mode** in the Pieces Web Extension, you can use quick actions to manage snippets and enhance your workflow.\n\nAccess these actions from the toolbar or the **Captured Context** section below the snippet.\n\n### Quick Menu Actions\n\nThe Pieces Web Extension lets you easily manage your snippets by clicking the **three dots** inside the Pieces Drive section.\n\nFrom there, you can choose from a variety of options listed in the table below.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/edit_update/open_classification_options.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n| `Reclassify`    | Change the snippet’s classification.                   |\n| --------------- | ------------------------------------------------------ |\n| `Rename`        | Update the snippet’s title.                            |\n| `Duplicate`     | Create a copy of the snippet.                          |\n| `Related Links` | Add or manage related links in the snippet’s metadata. |\n| `Tags`          | Add, update, or remove tags.                           |\n\n***\n\n## Quickly Access Snippets\n\n*Layers upon layers of functionality*—that’s the goal of all Pieces for Developers plugins and extensions.\n\nRight from within the Pieces Drive tab, select a saved material to open it in markdown as a preview—then click the `Edit` icon to edit & save your code.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/edit_update/editing_saving_refactoring_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />",
    "lastModified": "2025-06-04T17:24:58.661Z",
    "filePath": "web-extension/drive/edit-update.md"
  },
  "/docs/web-extension/drive/save-snippets": {
    "slug": "/docs/web-extension/drive/save-snippets",
    "metadata": {
      "title": "Saving",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Saving Materials\n\nYou can save code snippets as materials to the Pieces Drive using the right-click menu or embedded buttons in code sections.\n\nYou can use this feature to save all kinds of useful markdown and code materials, such as:\n\n* API endpoint definitions\n\n* Utility functions or commonly used helper methods\n\n* Predefined templates for organizing notes\n\n* Task Lists\n\n* Code Blocks\n\n* Reusable patterns for internal or external links\n\n### via Right-Click Menu\n\nTo capture useful code snippets via the right-click menu:\n\n<Steps>\n  <Step title=\"Highlight the Section\">\n    Select the section you want to save.\n  </Step>\n\n  <Step title=\"Right-Click on the Highlighted Section\">\n    Open the context menu by right-clicking on the selected section.\n  </Step>\n\n  <Step title=\"Choose Pieces: Save Selection\">\n    From the menu, select `Save Selection to Pieces`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/_MAIN/right_click_hover_save.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### via Embedded Buttons\n\nTo save code snippets directly from a code block in your browser:\n\n<Steps>\n  <Step title=\"Locate the Code Block\">\n    Find the code block you want to save within your browser.\n  </Step>\n\n  <Step title=\"Click Copy and Save\">\n    Use the `Copy and Save` button embedded below the code block to save it to Pieces Drive and copy the snippet to your keyboard.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/saving_materials/hover_copy_save.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### via Keyboard shortcut\n\nYou can quickly save a selection to Pieces Drive.\n\nJust highlight the section you want to save and press `⌥+shift+s` (macOS) or `alt+shift+s` (Windows/Linux). Pieces will then save the selection to your Pieces Drive.\n\n### via Copilot Chat\n\nYou can take any code block existing in your Copilot Chat and click `Save to Pieces`—like code generated by Pieces Copilot, code blocks you added as context that weren’t saved as individual snippets, and any other kind of code.\n\nTo do so, click the `Save to Pieces` button on any code block within the Copilot Chat view.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/saving_materials/save_to_pieces_chat.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## What’s Stored When You Save a Material\n\nWhen you save a snippet to your Pieces Drive, more than just the code is stored.\n\nThe Pieces Copilot captures:\n\n* `Type`: Categorizes the snippet (e.g., API call, function, class) and its programming language.\n\n* `Associated Tags`: Keywords linked to the snippet for easier searching.\n\n* `Custom Description`: Specifies exactly which *lines* (in numerical form) the snippet is from and the file it came from—very useful for mind-mapping.\n\n* `Smart Description`: AI-generated descriptions summarize the snippet’s purpose and function.\n\n* `Suggested Searches`: Related searches that help you find similar snippets.\n\n* `Related Links`: References to documentation, code repositories, or other relevant resources.\n\n* `Related People`: Associated collaborators or contributors.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/_MAIN/saved_media_browser.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nAdditionally, the Pieces Copilot **scans saved snippets for sensitive information**, such as API keys, passwords, or authentication tokens, to ensure no confidential data is accidentally stored.\n\n## Where Saved Materials Live\n\nSaved snippets are stored locally on your device, ensuring offline accessibility. This also means that any Pieces for Developers extension, plugin, or even the Pieces Desktop App, has constant, up-to-date access to your saved materials.\n\n[Read more about how to find your saved snippets here.](https://docs.pieces.app/products/web-extension/drive/search-reuse#finding-saved-snippets)",
    "lastModified": "2025-06-04T17:24:58.666Z",
    "filePath": "web-extension/drive/save-snippets.md"
  },
  "/docs/web-extension/drive/search-reuse": {
    "slug": "/docs/web-extension/drive/search-reuse",
    "metadata": {
      "title": "Searching",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Finding Saved Materials\n\nThe Pieces Web Extension view provides search options for locating saved materials within the Pieces Drive.\n\n<Callout type=\"tip\">\n  Once a material is located, you can edit the saved code or text, share it, use it as context for pieces Copilot chats, and more.\n</Callout>\n\nHere are a few different ways to locate Pieces Drive materials with the Pieces Web Extension:\n\n### via Pieces Sidebar\n\nTo locate your snippets, use the Pieces Web Extension sidebar:\n\n<Steps>\n  <Step title=\"Open the Pieces Sidebar\">\n    Open the Pieces Web Extension from your browser’s extension section.\n  </Step>\n\n  <Step title=\"Navigate to Pieces Drive\">\n    On top of the extension, select the dropdown menu, choose Pieces Drive, and then select the `Saved Materials` tab.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/search_reuse/hovering_pieces_copilot.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n\n  <Step title=\"Open a Snippet\">\n    Click on a snippet to view its content, related details, and quick actions.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/search_reuse/material_open.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### via Search Feature\n\nIf you know exactly what you’re looking for, you can search for specific snippets:\n\n<Steps>\n  <Step title=\"Click the Search Bar\">\n    Open the search bar at the top of the Pieces Web Extension sidebar.\n  </Step>\n\n  <Step title=\"Enter Your Query\">\n    Type your search query.\n  </Step>\n\n  <Step title=\"Navigate the Results\">\n    Scroll through the results or use the arrow keys to find your desired snippet.\n  </Step>\n\n  <Step title=\"Open the Snippet\">\n    Click on the snippet to open it and view its content, associated metadata, and quick actions.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/search_reuse/search_for_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n<Callout type=\"tip\">\n  To narrow down your search, you can use tags, descriptions, names, types, or even languages themselves.\n</Callout>\n\n## Adding Filters to Your Search\n\nSaved snippets being viewed in the Pieces Web Extension sidebar can be sorted and filtered to narrow down your search results.\n\n### Filtering Snippets\n\nFilter for saved materials that meet specific criteria if you have too many results to sift through manually.\n\n<Steps>\n  <Step title=\"Click the Search Bar\">\n    Open the Pieces Web Extension, change to `Pieces Drive`, select the `Saved Materials` tab, and click on the search bar at the top of the extension.\n  </Step>\n\n  <Step title=\"Use Quick Filters\">\n    Apply quick filters such as `Titles`, `Annotations`, or `Content` that appear below the search bar.\n  </Step>\n\n  <Step title=\"Filter by Tags or Keywords\">\n    Enter specific tags or keywords in the search bar to narrow down the snippets displayed.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/search_reuse/filtering_a_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n### Sorting Saved Materials\n\nOnce you have a list of saved materials in view, you can sort through them according to various criteria to locate the material you need.\n\n<Steps>\n  <Step title=\"Click the Sorting Icon\">\n    Click the icon at the top of the extension(e.g., the `clock` icon for *Recent*). The icon changes based on the selected sorting method.\n  </Step>\n\n  <Step title=\"Choose Sorting Order\">\n    Select your preferred sorting order, such as `Recent`, `Suggested`, `Alphabetical`, or `Language`.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/search_reuse/sorting_snippets.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## Viewing and Reusing Saved Snippets\n\n[Saved snippets](https://docs.pieces.app/products/web-extension/drive/save-snippets) can be viewed with their metadata by opening them directly from the Pieces Web Extension. Just click on them in the Pieces Drive once you've found them.\n\nFrom this view, you can use Quick Actions or copy the snippet in your browser. You can also click on the snippet for a quick overview.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/search_reuse/material_open.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nFrom this view, use the `Pieces Actions` button at the bottom of the snippet to copy, edit, update annotations, generate a shareable link, toggle the visibility of the Pieces Actions buttons, or highlight and right-click to copy.\n\n<Callout type=\"tip\">\n  You can press `⌘+c` (macOS) or `ctrl+c` (Windows/Linux) to copy to your clipboard.\n</Callout>\n\n### via Pieces Sidebar\n\nYou can view saved materials by opening Pieces Drive in your browser.\n\nClick the Pieces icon in the extension list, click the dropdown menu at the top left of the extension, and select `Pieces Drive`.\n\nOnce in the snippet, you can copy a snippet from Pieces Drive and use that material anywhere you’d like.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/search_reuse/copying_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Previewing Saved Snippets\n\nWhen using the Pieces Drive within the Pieces Web Extension, you can click on the **three vertical dots** on a saved code snippet to **delete it**, or select from 6 additional options:\n\n***\n\n| `View Preview`     | `Start Copilot Chat`      | `Copy to Clipboard`     |\n| ------------------ | ------------------------- | ----------------------- |\n| `Insert at cursor` | `Generate Shareable Link` | `Open Markdown Preview` |\n\n***\n\n## Real-Time Snippet Streaming\n\nEvery product within the Pieces Suite utilizes [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os) to gather information regarding the context of your snippets.\n\nWhen you modify a snippet in the <a target=\"_blank\" href=\"https://docs.pieces.app/products/desktop\">Pieces for Developers Desktop App</a>—like changing its name or description, tags, or any other metadata—those updates are automatically shown in your [Pieces Web Extension](https://docs.pieces.app/products/web-extension/get-started#supported-browsers) without the need for refreshing.\n\n<Callout type=\"tip\">\n  If your snippets aren’t updating immediately, refer to the [troubleshooting guide](https://docs.pieces.app/products/web-extension/troubleshooting) for instructions on refreshing your snippet list.\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.670Z",
    "filePath": "web-extension/drive/search-reuse.md"
  },
  "/docs/web-extension/drive/sharing": {
    "slug": "/docs/web-extension/drive/sharing",
    "metadata": {
      "title": "Sharing Saved Materials",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## What Information Gets Shared\n\nWhen a snippet is saved to the Pieces Cloud, the code is [enriched with valuable information](https://docs.pieces.app/products/web-extension/drive/save-snippets#whats-stored-when-you-save-a-snippet) such as related people, links, annotations, tags, and an automatically-generated description.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733970040011/f627038f-b8f3-46f8-8235-600d1a8a8efd.png?auto=compress,format&format=webp?auto=compress,format&format=webp&q=75\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## How to Generate Shareable Links\n\nThere are two ways to share saved snippets: by using the `Pieces Quick Actions` on code blocks on websites or directly from Pieces Drive within the Pieces Web Extension.\n\nThis link can easily be shared via email, Discord, Slack, or other platforms. The recipient can view the snippet **without the recipient needing to have a Pieces account.**\n\n### via Codeblock Quick Actions\n\nShareable Pieces links for code snippets found on the web can be generated by clicking `Share` under a code block on the web.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/edit_update/share_QA.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Sharing a Previously Saved Snippet\n\nIf you save a material, but didn’t generate a shareable link at the time, no problem.\n\nYou can still generate a shareable link (or copy, regenerate, and delete the existing link) from the Pieces Drive.\n\n<Steps>\n  <Step title=\"Open the Pieces Web Extension\">\n    Click the `Pieces icon` within the extensions section of your browser.\n  </Step>\n\n  <Step title=\"Open the Pieces Drive Section\">\n    After the Pieces Web Extension is opened, select the dropdown in the top left and choose `Pieces Drive`. You can then switch to the `Saved Materials` section to see all of your previously saved snippets.\n  </Step>\n\n  <Step title=\"Locate the Snippet\">\n    Locate a snippet you’d like to share and select it to open the Quick Preview.\n  </Step>\n\n  <Step title=\"Generate the Link\">\n    Click the `Generate Shareable Link` option at the bottom of the snippet Quick Preview.\n\n    <Callout type=\"info\">\n      Alternatively, access sharing options using the Quick Menu (three-dot icon) button.\n    </Callout>\n  </Step>\n\n  <Step title=\"Copy the Link\">\n    A new pop-up will appear giving you options to copy the personal link or generate a GitHub Gist.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/edit_update/generate_shareable_link.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## Enriched Sharing Experience\n\nWhen you `Share` a snippet, it’s not just the code that’s included. The snippet comes with additional metadata to provide context—[you can read more about that here.](https://docs.pieces.app/products/web-extension/drive/save-snippets#whats-stored-when-you-save-a-snippet)\n\n* `Snippet Type`: Identify the language or framework, such as Python or React.\n\n* `Tags`: Useful keywords for quick categorization.\n\n* `Description`: A short summary of what the snippet does.\n\n* `Related Links`: Helpful resources or documentation tied to the snippet.\n\n* `Author Information`: A record of who created the snippet.\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733970528143/f4acf9e2-0d73-4634-8695-a6cdcfbd3814.png?auto=compress,format&format=webp?auto=compress,format&format=webp&q=75\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Sensitive Information Watchdog\n\nThe `Share` feature does more than just allow you to effectively share snippets across your entire team and other communities, though.\n\nYou'll see a section titled **Sensitive Information:**\n\n<Image src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1733970500459/864946d3-8d27-435c-beb4-01f5d37e5fdc.png?auto=compress,format&format=webp?auto=compress,format&format=webp&q=75\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nOur in-house ML model scans snippets for potentially sensitive information, like API keys or passwords, and alerts you so that you can make an informed decision before sharing the snippet.  \n\nThe scan happens locally using on-device machine learning models **before the snippet is uploaded to the drive** for sharing. This allows you to make an informed decision about sharing your code on a case-by-case basis.",
    "lastModified": "2025-06-04T17:24:58.674Z",
    "filePath": "web-extension/drive/sharing.md"
  },
  "/docs/web-extension/drive": {
    "slug": "/docs/web-extension/drive",
    "metadata": {
      "title": "Pieces Drive",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Materials in Pieces Drive\n\nWith Pieces Drive and the Pieces Web Extension, you can save all types of code and text snippets.\n\nYou can easily find, edit, and reuse them anytime, anywhere, and in any way you need.\n\nHere are some examples of developer materials you can reuse:\n\n***\n\n| `Logging Utilities`    | A helper function for detailed server-side logging with timestamps and error levels.                        | Speeds up debugging and monitoring by inserting reliable logging methods.   |\n| ---------------------- | ----------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------- |\n| `Validation Functions` | A function to validate JSON payloads or form inputs before submission.                                      | Ensures data integrity with reusable, thoroughly tested validation logic.   |\n| `API Integration Code` | Prewritten `axios` code for making GET or POST requests, complete with error handling and response parsing. | Reduces repetitive work when integrating RESTful APIs or GraphQL endpoints. |\n| `Component Templates`  | A React functional component template with basic hooks and styling setup.                                   | Provides a consistent starting point for building new components.           |\n| `Database Queries`     | A MongoDB query to retrieve active user data filtered by last login.                                        | Streamlines database tasks by reusing optimized query patterns              |\n\n***\n\n## Boosting Productivity with Snippet Management\n\nThe Pieces Drive connects you with your notes and project files, allowing you to focus on what matters—building great software—while offering tools for efficient code reuse.\n\n* **Improved Productivity**: Concentrate on solving new problems instead of revisiting old ones by quickly accessing and reusing code snippets.\n\n* **Contextual Awareness**: Saved materials contain metadata, descriptions, and links to relevant searches, helping you remember their origin, purpose, and best usage scenarios.\n\n* **Code Standardization**: Sharing best practices and reusable components ensures consistent coding practices and conventions across teams and projects.\n\nBy using the Pieces Drive, you can capture and manage your snippets to streamline daily tasks and enhance your workflow in several ways:\n\n### Save & Organize\n\nEasily [save a function, script, or piece of boilerplate](https://docs.pieces.app/products/web-extension/drive/save-snippets) directly from the tool menu.\n\nThese snippets are saved to your personal Pieces Drive and enriched with context, metadata, and tags, making them easy to find whenever needed.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/_MAIN/saved_media_browser.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nTo save a snippet in your browser, highlight a section of text or code, right-click, and select `Pieces: Save Selection`.\n\nOn websites with code blocks, Pieces will add a `Copy and Save` option below the block, saving the snippet to your Pieces Drive.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/_MAIN/save_QA.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Search & Reuse\n\nYou can directly [search your collection of saved materials in Pieces Drive](https://docs.pieces.app/products/web-extension/drive/search-reuse) from your browser to quickly find snippets by keyword or context.\n\nTo search, open the **Search Bar** from the Pieces Web extension sidebar in the Pieces Drive tab.\n\nType your query into the search bar and press `return` (macOS) or `enter` (Windows/Linux) to view the search results.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/_MAIN/search_for_snippet.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nAny related snippets will appear in the results list.\n\nFrom there, you can press `return` (macOS) or `enter` (Windows/Linux) to view your snippet, complete with all its saved context, neatly displayed inside the editor.\n\n### Sharing\n\nShare your snippets from within the Pieces Web Extension, even if the person you’re sending it to doesn’t use Pieces or have a Pieces for Developers account.\n\n<Card title=\"Use Case\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745331050120/37d8601f-8136-45e4-b353-c6d37d69f976.png\">\n  Sharing useful code snippets can help overcome productivity hurdles, especially if a co-developer is new to the project or is a junior developer.\n\n  For instance, a teammate working on server monitoring can use your shared script to automate daily tasks without extra setup.\n\n  These shared links also keep their [original enriched metadata](https://docs.pieces.app/products/web-extension/drive/save-snippets#whats-stored-when-you-save-a-snippet), including tags, descriptions, and other details, making it easier for teammates to understand and use the code.\n</Card>\n\nTo share a snippet from your browser, simply find a code block you want to share and click the `Share` quick action below it.\n\nYou can also locate a snippet in your Pieces Drive, right click it, and select `Generate Shareable Link`.\n\nThis generates a link you can share with teammates, ensuring easy access to your reusable code.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/pieces_drive/_MAIN/shared_snippet.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Use Cases\n\nWith the Pieces Web Extension, [your snippets become a powerful library](https://docs.pieces.app/products/web-extension/drive/edit-update#how-to-edit-snippets) of reusable code. You can organize, search, edit, and share them across your projects, all within the Pieces Drive.\n\nHere are some examples of how you can use them:\n\n### Reusable Code Snippets for Data Science\n\nIf you often work on complex data science projects, algorithm design, or data processing pipelines, you can save reusable code snippets in your Pieces Drive.\n\nThese snippets can be easily imported into your browser for documenting workflows, analyzing results, and iterating on solutions in future projects.\n\n```python\n\ndata = pd.read_csv('data.csv')  \n\ndata.fillna(method='ffill', inplace=True)  \n \nfrom sklearn.preprocessing import MinMaxScaler  \nscaler = MinMaxScaler()  \ndata[['feature1', 'feature2']] = scaler.fit_transform(data[['feature1', 'feature2']])  \n\nprint(data.describe())  \n```\n\n### Code Snippet Documentation\n\nIf you frequently research projects that involve monitoring file system changes, you can [save a helpful snippet to your Pieces Drive](https://docs.pieces.app/products/web-extension/drive/save-snippets) that does exactly that, allowing you to import it over to your IDE for usage:\n\n```go\nfunc watchFileChanges(path string) {\n\twatcher, err := fsnotify.NewWatcher()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer watcher.Close()\n\n\terr = watcher.Add(path)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfor {\n\t\tselect {\n\t\tcase event := <-watcher.Events:\n\t\t\tif event.Op&fsnotify.Write == fsnotify.Write {\n\t\t\t\tfmt.Println(\"Modified file:\", event.Name)\n\t\t\t}\n\t\tcase err := <-watcher.Errors:\n\t\t\tfmt.Println(\"Error:\", err)\n\t\t}\n\t}\n}\n```\n\n<AccordionGroup>\n  <Accordion title=\"Testing Framework Templates\">\n    Streamline testing by saving snippets for your frequently used testing functions or unit test templates.\n  </Accordion>\n\n  <Accordion title=\"Command-Line Utilities\">\n    Save command-line instructions as snippets to quickly retrieve deployment commands, Docker setups, and other essential terminal operations.\n  </Accordion>\n\n  <Accordion title=\"Error Handling & Logging\">\n    You can also save common logging functions or error-handling snippets that can be reused across applications, promoting consistent error management.\n  </Accordion>\n\n  <Accordion title=\"Quickly Create New Projects\">\n    Import saved setup scripts, configuration files, and commonly used dependencies to speed up project setup and ensure consistency across new projects.\n  </Accordion>\n</AccordionGroup>",
    "lastModified": "2025-06-04T17:24:58.654Z",
    "filePath": "web-extension/drive.md"
  },
  "/docs/web-extension/get-started": {
    "slug": "/docs/web-extension/get-started",
    "metadata": {
      "title": "Get Started",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Web Extension Prerequisites\n\nBefore you begin, make sure you have:\n\n* **PiecesOS:** The core engine that powers all Pieces extensions. <a target=\"_blank\" href=\"https://docs.pieces.app/products/core-dependencies/pieces-os\">Learn more about PiecesOS.</a>\n\n* **A Supported Browser:** Your browser must meet the minimum version requirement and must also be on the list of supported browsers, as not all browsers are supported at this time.\n\n<Callout type=\"info\">\n  You must have [PiecesOS](https://docs.pieces.app/products/core-dependencies/pieces-os) to use the Pieces Web Extension. We also recommend downloading the [Pieces for Developers Desktop App](https://docs.pieces.app/products/desktop).\n</Callout>\n\n## Supported Browsers\n\nPieces Web Extension supports most Chromium and Gecko-based browsers.\n\nFind their respective install pages below:\n\n<Card title=\"Chrome\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744643425227/3b4ac061-8750-4d02-af09-11e78ce583a8.png\" href=\"https://chrome.google.com/webstore/detail/pieces-save-code-snippets/igbgibhbfonhmjlechmeefimncpekepm\" />\n\n<CardGroup cols={2}>\n  <Card title=\"Edge\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744643434444/0ec94446-6ad9-4597-af66-09ea59543d41.png\" href=\"https://microsoftedge.microsoft.com/addons/detail/pieces-save-code-snippet/hglfimcdgonaeeobjckfdabcldfidmim\" />\n\n  <Card title=\"Firefox\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744643450048/bed96cff-6292-44f8-be5f-363be8cd1494.webp\" href=\"https://addons.mozilla.org/en-US/firefox/addon/pieces-save-code-from-the-web/\" />\n\n  <Card title=\"Brave\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744643519812/51ad4cae-9e83-4df5-8060-dd53fbd0b175.png\" href=\"https://chrome.google.com/webstore/detail/pieces-save-code-snippets/igbgibhbfonhmjlechmeefimncpekepm\" />\n\n  <Card title=\"Opera\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744643531058/0d5fcc6c-143c-4531-8694-071a82501642.png\" href=\"https://chrome.google.com/webstore/detail/pieces-save-code-snippets/igbgibhbfonhmjlechmeefimncpekepm\" />\n</CardGroup>\n\n## Installing the Pieces Web Extension\n\nAfter going to your browser's install page, you typically see an `Add to Browser` button. Clicking the button automatically opens to add the Pieces Web Extension to your browser.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/get_started/chrome_install_page.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n<Callout type=\"tip\">\n  To ensure you have fully installed the Pieces Web Extension, restart your browser.\n</Callout>\n\n### Setting up PiecesOS\n\n<a target=\"_blank\" href=\"https://docs.pieces.app/products/core-dependencies/pieces-os\">PiecesOS</a> is required for the Pieces Web Extension to work.\n\nIf you haven’t installed it yet, click the buttons to download PiecesOS via the recommended method or follow the alternative steps below.\n\n<get-started-install />\n\n## Updating\n\nThe Pieces Web Extension will **automatically** update when a new version is available.\n\n<Callout type=\"alert\">\n  This depends on how your browser handles extensions—most browsers automatically update extensions.\n</Callout>\n\nYou can also manually update by visiting the extension's install page, uninstalling it, and then reinstalling the extension.\n\n## Pieces Cloud\n\nDisconnecting from the Pieces Cloud logs you out of your Pieces account.\n\n<Callout type=\"info\">\n  Connecting to the Pieces Cloud is *optional*.\n\n  However, it **provides additional features** like **data backups, shareable links, and more.** You can still enjoy the main functionalities of Pieces without an account.\n</Callout>\n\nTo disconnect from the Pieces Cloud:\n\n<Steps>\n  <Step title=\"Open the Extension\">\n    Click the `Pieces Icon` in the extensions bar of your browser to open the Pieces Web Extension.\n  </Step>\n\n  <Step title=\"Click the Sandwich Menu Icon\">\n    Select the `sandwich menu` icon in the top right of the Pieces extension. This will open up the **Quick Settings** menu.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/get_started/hover_over_settings.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n\n  <Step title=\"Click Account Settings\">\n    In the new popup menu, select the `settings gear` icon.\n  </Step>\n\n  <Step title=\"Click Log Out\">\n    Select the `Sign Out` button at the bottom of the section. This will only say `Sign Out` if you are logged in.\n\n    <Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/get_started/sign_out_chrome.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n  </Step>\n</Steps>\n\n## Onboarding\n\nThe Pieces Web Extension features an interactive walkthrough that shows you the *magic* behind the Long Term Memory (LTM-2) and how to get the most out of the web extension.\n\n### Activating LTM-2\n\nClick `Activate LTM`, and the welcome page appears with an overview of LTM-2.\n\nYou'll have the option to close the page or click `I'm In` to continue. Click `I'm In`, and the *magic* window pops up with interactive features that guide you through the process.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/get_started/ltm_onboarding.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nInside the *magic* window, click `Generate Secret Message`, and a browser window opens to display an example snippet for LTM. Y\n\nou'll be prompted to paste your copied prompt—*“What was my secret message from Pieces for Developers?”*—and then click `Submit`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/get_started/successful_onboarding.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nOnce submitted, Pieces celebrates your activation, showing you that LTM-2 is enabled and ready to go!\n\n## Uninstalling\n\nTo uninstall the Pieces extension in Chrome based browsers, click the three dots in the top right to open your browser menu.\n\nSelect `More Tools > Extensions`, locate the Pieces extension, then click `Remove`. When the verification popup appears, click `Remove` again to confirm.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/get_started/remove_from_chrome.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nTo uninstall in Gecko/Firefox based browsers, click the settings icon (or the hamburger menu), then go to `Add-ons and Themes` and find the Pieces extension.\n\nClick `Remove`, and confirm when prompted. The extension will be fully removed from your browser.",
    "lastModified": "2025-06-04T17:24:58.677Z",
    "filePath": "web-extension/get-started.md"
  },
  "/docs/web-extension/shortcuts": {
    "slug": "/docs/web-extension/shortcuts",
    "metadata": {
      "title": "Pieces Web Extension Shortcuts",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/shortcuts/settings_PWE.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Shortcut Table\n\nSeveral actions related to the Material Management ecosystem are accessible with shortcuts.\n\n***\n\n| **Command**                    | **macOS**   | **Windows/Linux** |\n| ------------------------------ | ----------- | ----------------- |\n| *Copy*                         | `⌘+c`       | `ctrl+c`          |\n| *Paste*                        | `⌘+v`       | `ctrl+v`          |\n| Save Selection to Pieces Drive | `⌥+shift+s` | `alt+shift+s`     |\n| Open Quick Menu                | `⌘+o`       | `ctl+o`           |\n\n***\n\n<Callout type=\"tip\">\n  You can set shortcuts in the [settings](https://docs.pieces.app/products/web-extension/configuration) for the Pieces Web Extension.\n</Callout>",
    "lastModified": "2025-06-04T17:24:58.680Z",
    "filePath": "web-extension/shortcuts.md"
  },
  "/docs/web-extension/troubleshooting": {
    "slug": "/docs/web-extension/troubleshooting",
    "metadata": {
      "title": "Troubleshooting",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n## Having Trouble with the Pieces Web Extension?\n\nIf you’re having issues with the Pieces Web Extension, try the following quick fixes and dependency checks.\n\n<on-device-storage />\n\n## Check PiecesOS Status\n\nPiecesOS, a required dependency, can cause issues with the Pieces Web Extension or other extensions and plugins if it is not installed or running.\n\n### Run or Restart PiecesOS\n\nMake sure PiecesOS is running on your device.\n\nTo double-check that Pieces OS is running, ensure the Pieces logo is present in your toolbar (on macOS) or your taskbar (Windows/Linux).\n\nIf it isn't there, please launch PiecesOS by double-clicking PiecesOS in your Applications folder.\n\n### Install PiecesOS\n\nFor the Pieces Web Extension to run, PiecesOS is required. This dependency communicates with the Web Extension and provides context and other necessary data for on-device machine learning, cloud and local-hosted model usage, cloud connectivity, and more.\n\nIf you need to download and install PiecesOS, [click here.](https://docs.pieces.app/products/core-dependencies/pieces-os/manual-installation)\n\n## Refreshing Copilot Chats\n\nIf you're using the Pieces Copilot chat and disconnect from WiFi or encounter issues with a cloud-based LLM, you may need to refresh the chat.\n\nThis can resolve issues such as the LLM appearing to \"hang\" (e.g., generating a response that turns out to be an infinite loop).\n\nTo refresh the chat, click the three vertical dots at the top-right corner of your Copilot Chat window and select `Refresh`.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/troubleshooting/hovering_refresh.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Missing Quick Actions Buttons\n\nYou may be missing the Pieces Quick Actions buttons under eligible code blocks for two main reasons:\n\n### Disabled Buttons\n\nNavigate to the **Settings** view to double-check that you haven't disabled the Pieces buttons from the site in your active tab. If you enable them, the page will automatically refresh, and the buttons should appear.\n\n### No Detectable Code\n\nOn specific pages, even on sites where code block elements are frequently embedded in the Document Object Model (DOM), such as Stack Overflow, there may not be eligible code blocks under which to render the Pieces Quick Action buttons.",
    "lastModified": "2025-06-04T17:24:58.683Z",
    "filePath": "web-extension/troubleshooting.md"
  },
  "/docs/web-extension": {
    "slug": "/docs/web-extension",
    "metadata": {
      "title": "Web Extension",
      "description": null,
      "sidebarTitle": null,
      "author": null,
      "lastModified": null,
      "order": null,
      "visibility": "PUBLIC"
    },
    "content": "***\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/_MAIN/og_image%20(2).png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Pieces Web Extension\n\nThe [Pieces Web Extension](https://docs.pieces.app/products/web-extension/get-started#supported-browsers) enhances your browsing experience by integrating the best features from the Pieces Suite directly into your supported browser, making your favorite tools easily accessible in your workspace.\n\nIt offers developers powerful tools for **managing code snippets, debugging, and refactoring** within their familiar development environment.\n\n* [Pieces Copilot:](https://docs.pieces.app/products/extensions-plugins/web-extension/copilot) Start AI-generated conversations and add websites and files as context to find the solutions you need. This includes out-of-browser context with the optional Long-Term Memory Engine (LTM-2).\n\n- [Pieces Drive:](https://docs.pieces.app/products/extensions-plugins/web-extension/drive) Easily save, locate, and share frequently used code snippets, making it easier to organize your work, quickly access important pieces for code or websites, and collaborate effectively with others.\n\n<CardGroup cols={2}>\n  <Card title=\"Getting Started\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744645742426/b759dab7-243e-4cb7-b926-3a6643e43d07.webp\">\n    Follow [these instructions](https://docs.pieces.app/products/extensions-plugins/web-extension/get-started) to download and install the [Pieces Web Extension](https://docs.pieces.app/products/web-extension/get-started#supported-browsers).\n  </Card>\n\n  <Card title=\"Support\" image=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1744645758570/a0088c44-3f84-4a1f-bc99-6b1665802750.webp\">\n    Explore [troubleshooting options](https://docs.pieces.app/products/extensions-plugins/web-extension/troubleshooting), navigate to our [support](https://docs.pieces.app/products/support) page, or directly [book a call with our engineers.](https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ22WJ2Htd2wRMJhueCNYc0xbFBFCAN-khijcuoXACd_Uux3wIhgZeGkzDRcqD3teamAI-CwCHpr)\n  </Card>\n</CardGroup>\n\n<Card title=\"Learn More with Quick Guides\">\n  Pieces Quick Guides help you quickly understand and effectively utilize powerful features like the Long-Term (LTM-2) Memory Engine and Pieces Copilot. [Click here to get started.](https://docs.pieces.app/products/quick-guides/overview)\n</Card>\n\n<Callout type=\"tip\">\n  All media (e.g., GIFs, screenshots) in this documentation were captured in **Google Chrome.**\n</Callout>\n\nThe minimum Chrome version required for the Pieces Web Extension to work is **4.0**, and the minimum Firefox/Gecko version required is **Firefox 2**.\n\nIf you’re not quite sure what version your browser is, [you can click here to find out how to check it.](https://docs.pieces.app/products/web-extension/configuration#checking-your-browser-version)\n\n### AI Assistance with Pieces Copilot\n\nPieces Copilot provides you with the ability to initiate context-rich generative AI conversations using your preferred LLM that can help answer questions, explain code, or generate code on the fly.\n\nYou can also add websites, files, and other materials as context to your conversations.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/_MAIN/right_click_hover_save.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n### Material Management with Pieces Drive\n\nPieces Drive lets you [save, edit, search, and share useful materials](https://docs.pieces.app/products/web-extension/drive) to boost your productivity and make collaboration easy.\n\nThese features help developers store their favorite code or websites in a personal, easy-to-access library.\n\nYou can quickly review past work, find related authors and links with the extra details saved with each piece, and more.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/_MAIN/right_click_saved_snippet.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n## Using Pieces Copilot\n\nYou can do many powerful things with Pieces Copilot in your browser, such as starting a conversation directly in the editor with your chosen LLM about a specific code snippet, fragment, folder, or terminal output.\n\nThis is the backbone of the Pieces Copilot experience—the **Ask Copilot** feature.\n\n**Ask Copilot** allows you to [ask Pieces to explain what you're reading](https://docs.pieces.app/products/web-extension/copilot/chat#generative-ai-conversations), helping you better understand the content. It can also generate responses filled with context outside of just your browser by referencing workflow data captured by the Long-Term Memory Engine (LTM-2).\n\n## Managing Materials\n\nWhen you save material to your personal repository, Pieces automatically enriches the snippet with AI-generated tags, titles, related authors, links, descriptions, and more.\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/_MAIN/hover_over_ask_pieces.png\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\nSave materials by right-clicking a selection and choosing the `Save Selection` `to Pieces` option from the pop-up window.\n\nIn this menu, you’re also able to select `Ask Pieces About…` to ask Pieces about the current selection so you can start a conversation right when you come across something without context-switching.\n\n### **Referencing & Reusing**\n\nThe Pieces Web Extension provides robust search tools to help you quickly find and access your saved materials.\n\nYou can easily find saved materials in your Web Extension by clicking the `Pieces` icon in your extensions list and switching to the Pieces Drive view.\n\nAt the top of the Pieces Drive, you can [search](https://docs.pieces.app/products/web-extension/drive/search-reuse#finding-saved-materials), [filter](https://docs.pieces.app/products/web-extension/drive/search-reuse#filtering-snippets), and [sort your materials](https://docs.pieces.app/products/web-extension/drive/search-reuse#sorting-snippets) to find anything you’d like.\n\nOnce you've found the material you want, clicking on it will open it, giving you [options to manage it](https://docs.pieces.app/products/web-extension/drive/edit-update). Pieces will also provide options to [share and copy.](https://docs.pieces.app/products/web-extension/drive/sharing)\n\n<Image src=\"https://storage.googleapis.com/hashnode_product_documentation_assets/web_extension/_MAIN/editing_snippet_demo.gif\" alt=\"\" align=\"center\" fullwidth=\"true\" />\n\n***\n\n## Download the Extension\n\nFollow the installation instructions to get started with the [Pieces Web Extension](https://docs.pieces.app/products/web-extension/get-started#supported-browsers).",
    "lastModified": "2025-06-04T17:24:58.628Z",
    "filePath": "web-extension.md"
  }
}